

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Oct 09 15:33:02 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F886 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  008F                     	;# 
    91  0090                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0095                     	;# 
    99  0096                     	;# 
   100  0097                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  0105                     	;# 
   110  0107                     	;# 
   111  0108                     	;# 
   112  0109                     	;# 
   113  010C                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  010F                     	;# 
   118  0185                     	;# 
   119  0187                     	;# 
   120  0188                     	;# 
   121  0189                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124                           
   125                           	psect	idataBANK0
   126  0746                     __pidataBANK0:	
   127                           
   128                           ;initializer for _ADC_limits
   129  0746  3400               	retlw	0
   130  0747  3400               	retlw	0
   131  0748  3480               	retlw	128
   132  0749  3400               	retlw	0
   133  074A  3400               	retlw	0
   134  074B  3401               	retlw	1
   135  074C  3480               	retlw	128
   136  074D  3401               	retlw	1
   137  074E  3400               	retlw	0
   138  074F  3402               	retlw	2
   139  0750  3480               	retlw	128
   140  0751  3402               	retlw	2
   141  0752  3400               	retlw	0
   142  0753  3403               	retlw	3
   143  0754  3480               	retlw	128
   144  0755  3403               	retlw	3
   145  001E                     _ADRESH	set	30
   146  001F                     _ADCON0	set	31
   147  0006                     _PORTB	set	6
   148  00F9                     _GO_nDONE	set	249
   149  009E                     _ADRESL	set	158
   150  0085                     _TRISAbits	set	133
   151  009F                     _ADCON1	set	159
   152  0086                     _TRISB	set	134
   153  0188                     _ANSELbits	set	392
   154  0189                     _ANSELH	set	393
   155  0188                     _ANSEL	set	392
   156                           
   157                           ; #config settings
   158  0000                     
   159                           	psect	cinit
   160  07F0                     start_initialization:	
   161  07F0                     __initialization:	
   162                           
   163                           ; Initialize objects allocated to BANK0
   164  07F0  1383               	bcf	3,7	;select IRP bank0
   165  07F1  3030               	movlw	low (__pdataBANK0+16)
   166  07F2  00FD               	movwf	btemp+-1
   167  07F3  3007               	movlw	high __pidataBANK0
   168  07F4  00FE               	movwf	btemp
   169  07F5  3046               	movlw	low __pidataBANK0
   170  07F6  00FF               	movwf	btemp+1
   171  07F7  3020               	movlw	low __pdataBANK0
   172  07F8  0084               	movwf	4
   173  07F9  120A  118A  275A   	fcall	init_ram0
   174  07FC                     end_of_initialization:	
   175                           ;End of C runtime variable initialization code
   176                           
   177  07FC                     __end_of__initialization:	
   178  07FC  0183               	clrf	3
   179  07FD  120A  118A  2F90   	ljmp	_main	;jump to C main() function
   180                           
   181                           	psect	dataBANK0
   182  0020                     __pdataBANK0:	
   183  0020                     _ADC_limits:	
   184  0020                     	ds	16
   185                           
   186                           	psect	inittext
   187  0756                     init_fetch0:	
   188                           ;	Called with low address in FSR and high address in W
   189                           
   190  0756  087E               	movf	126,w
   191  0757  008A               	movwf	10
   192  0758  087F               	movf	127,w
   193  0759  0082               	movwf	2
   194  075A                     init_ram0:	
   195                           ;Called with:
   196                           ;	high address of idata address in btemp 
   197                           ;	low address of idata address in btemp+1 
   198                           ;	low address of data in FSR
   199                           ;	high address + 1 of data in btemp-1
   200                           
   201  075A  2756  120A  118A   	fcall	init_fetch0
   202  075D  0080               	movwf	0
   203  075E  0A84               	incf	4,f
   204  075F  0804               	movf	4,w
   205  0760  067D               	xorwf	125,w
   206  0761  1903               	btfsc	3,2
   207  0762  3400               	retlw	0
   208  0763  0AFF               	incf	127,f
   209  0764  1903               	btfsc	3,2
   210  0765  0AFE               	incf	126,f
   211  0766  2F5A               	goto	init_ram0
   212                           
   213                           	psect	cstackCOMMON
   214  0070                     __pcstackCOMMON:	
   215  0070                     ?_ADC_Initialize:	
   216  0070                     ??_ADC_Initialize:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_main:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_ADC_Read:	
   223                           ; 1 bytes @ 0x0
   224                           
   225                           
   226                           ; 2 bytes @ 0x0
   227  0070                     	ds	2
   228  0072                     ??_ADC_Read:	
   229                           
   230                           ; 1 bytes @ 0x2
   231  0072                     	ds	2
   232  0074                     ADC_Read@channel:	
   233                           
   234                           ; 1 bytes @ 0x4
   235  0074                     	ds	1
   236  0075                     ??_main:	
   237                           
   238                           ; 1 bytes @ 0x5
   239  0075                     	ds	3
   240  0078                     main@adc_value:	
   241                           
   242                           ; 2 bytes @ 0x8
   243  0078                     	ds	2
   244  007A                     main@i:	
   245                           
   246                           ; 1 bytes @ 0xA
   247  007A                     	ds	1
   248                           
   249                           	psect	maintext
   250  0790                     __pmaintext:	
   251 ;;
   252 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   253 ;;
   254 ;; *************** function _main *****************
   255 ;; Defined at:
   256 ;;		line 13 in file "main.c"
   257 ;; Parameters:    Size  Location     Type
   258 ;;		None
   259 ;; Auto vars:     Size  Location     Type
   260 ;;  i               1   10[COMMON] unsigned char 
   261 ;;  adc_value       2    8[COMMON] unsigned int 
   262 ;; Return value:  Size  Location     Type
   263 ;;                  1    wreg      void 
   264 ;; Registers used:
   265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   266 ;; Tracked objects:
   267 ;;		On entry : B00/0
   268 ;;		On exit  : 0/0
   269 ;;		Unchanged: 0/0
   270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   271 ;;      Params:         0       0       0       0       0
   272 ;;      Locals:         3       0       0       0       0
   273 ;;      Temps:          3       0       0       0       0
   274 ;;      Totals:         6       0       0       0       0
   275 ;;Total ram usage:        6 bytes
   276 ;; Hardware stack levels required when called:    1
   277 ;; This function calls:
   278 ;;		_ADC_Initialize
   279 ;;		_ADC_Read
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           
   286                           ;psect for function _main
   287  0790                     _main:	
   288                           
   289                           ;main.c: 14: uint16_t adc_value;
   290                           ;main.c: 16: ANSEL = 0x00;
   291                           
   292                           ;incstack = 0
   293                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   294  0790  1683               	bsf	3,5	;RP0=1, select bank3
   295  0791  1703               	bsf	3,6	;RP1=1, select bank3
   296  0792  0188               	clrf	8	;volatile
   297                           
   298                           ;main.c: 17: ANSELH = 0x00;
   299  0793  0189               	clrf	9	;volatile
   300                           
   301                           ;main.c: 19: TRISB = 0x00;
   302  0794  1683               	bsf	3,5	;RP0=1, select bank1
   303  0795  1303               	bcf	3,6	;RP1=0, select bank1
   304  0796  0186               	clrf	6	;volatile
   305                           
   306                           ;main.c: 20: PORTB = 0x00;
   307  0797  1283               	bcf	3,5	;RP0=0, select bank0
   308  0798  1303               	bcf	3,6	;RP1=0, select bank0
   309  0799  0186               	clrf	6	;volatile
   310                           
   311                           ;main.c: 22: ADC_Initialize();
   312  079A  120A  118A  2737  120A  118A  	fcall	_ADC_Initialize
   313  079F                     l563:	
   314                           ;main.c: 24: while (1){
   315                           
   316                           
   317                           ;main.c: 25: adc_value = ADC_Read(0);
   318  079F  3000               	movlw	0
   319  07A0  120A  118A  2767  120A  118A  	fcall	_ADC_Read
   320  07A5  0871               	movf	?_ADC_Read+1,w
   321  07A6  00F9               	movwf	main@adc_value+1
   322  07A7  0870               	movf	?_ADC_Read,w
   323  07A8  00F8               	movwf	main@adc_value
   324                           
   325                           ;main.c: 27: for (uint8_t i = 0; i< 8;i++){
   326  07A9  01FA               	clrf	main@i
   327  07AA  3008               	movlw	8
   328  07AB  027A               	subwf	main@i,w
   329  07AC  1803               	btfsc	3,0
   330  07AD  2FE6               	goto	l577
   331  07AE                     l569:	
   332                           
   333                           ;main.c: 28: if (adc_value > ADC_limits[i]){
   334  07AE  087A               	movf	main@i,w
   335  07AF  00F5               	movwf	??_main
   336  07B0  0775               	addwf	??_main,w
   337  07B1  3E20               	addlw	(low (_ADC_limits| 0))& (0+255)
   338  07B2  0084               	movwf	4
   339  07B3  1383               	bcf	3,7	;select IRP bank0
   340  07B4  0800               	movf	0,w
   341  07B5  00F6               	movwf	??_main+1
   342  07B6  0A84               	incf	4,f
   343  07B7  0800               	movf	0,w
   344  07B8  00F7               	movwf	??_main+2
   345  07B9  0879               	movf	main@adc_value+1,w
   346  07BA  0277               	subwf	??_main+2,w
   347  07BB  1D03               	skipz
   348  07BC  2FBF               	goto	u115
   349  07BD  0878               	movf	main@adc_value,w
   350  07BE  0276               	subwf	??_main+1,w
   351  07BF                     u115:	
   352  07BF  1803               	skipnc
   353  07C0  2FCF               	goto	l573
   354                           
   355                           ;main.c: 29: PORTB = PORTB | (1U<<i);
   356  07C1  3001               	movlw	1
   357  07C2  00F5               	movwf	??_main
   358  07C3  0A7A               	incf	main@i,w
   359  07C4  2FC7               	goto	u124
   360  07C5                     u125:	
   361  07C5  1003               	clrc
   362  07C6  0DF5               	rlf	??_main,f
   363  07C7                     u124:	
   364  07C7  3EFF               	addlw	-1
   365  07C8  1D03               	skipz
   366  07C9  2FC5               	goto	u125
   367  07CA  0875               	movf	??_main,w
   368  07CB  1283               	bcf	3,5	;RP0=0, select bank0
   369  07CC  1303               	bcf	3,6	;RP1=0, select bank0
   370  07CD  0406               	iorwf	6,w
   371  07CE  2FDD               	goto	L1
   372  07CF                     l573:	
   373                           ;main.c: 30: }
   374                           
   375                           
   376                           ;main.c: 31: else{
   377                           ;main.c: 32: PORTB = PORTB & ~(1U<<i) ;
   378  07CF  3001               	movlw	1
   379  07D0  00F5               	movwf	??_main
   380  07D1  0A7A               	incf	main@i,w
   381  07D2  2FD5               	goto	u134
   382  07D3                     u135:	
   383  07D3  1003               	clrc
   384  07D4  0DF5               	rlf	??_main,f
   385  07D5                     u134:	
   386  07D5  3EFF               	addlw	-1
   387  07D6  1D03               	skipz
   388  07D7  2FD3               	goto	u135
   389  07D8  0875               	movf	??_main,w
   390  07D9  3AFF               	xorlw	255
   391  07DA  1283               	bcf	3,5	;RP0=0, select bank0
   392  07DB  1303               	bcf	3,6	;RP1=0, select bank0
   393  07DC  0506               	andwf	6,w	;volatile
   394  07DD                     L1:	
   395  07DD  0086               	movwf	6	;volatile
   396  07DE  3001               	movlw	1
   397  07DF  00F5               	movwf	??_main
   398  07E0  0875               	movf	??_main,w
   399  07E1  07FA               	addwf	main@i,f
   400  07E2  3008               	movlw	8
   401  07E3  027A               	subwf	main@i,w
   402  07E4  1C03               	skipc
   403  07E5  2FAE               	goto	l569
   404  07E6                     l577:	
   405                           
   406                           ;main.c: 33: }
   407                           ;main.c: 34: }
   408                           ;main.c: 35: _delay((unsigned long)((50)*(4000000/4000.0)));
   409  07E6  3041               	movlw	65
   410  07E7  00F6               	movwf	??_main+1
   411  07E8  30EE               	movlw	238
   412  07E9  00F5               	movwf	??_main
   413  07EA                     u157:	
   414  07EA  0BF5               	decfsz	??_main,f
   415  07EB  2FEA               	goto	u157
   416  07EC  0BF6               	decfsz	??_main+1,f
   417  07ED  2FEA               	goto	u157
   418  07EE  0000               	nop
   419  07EF  2F9F               	goto	l563
   420  07F0                     __end_of_main:	
   421                           
   422                           	psect	text1
   423  0767                     __ptext1:	
   424 ;; *************** function _ADC_Read *****************
   425 ;; Defined at:
   426 ;;		line 49 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;  channel         1    wreg     unsigned char 
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  channel         1    4[COMMON] unsigned char 
   431 ;; Return value:  Size  Location     Type
   432 ;;                  2    0[COMMON] unsigned int 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   440 ;;      Params:         2       0       0       0       0
   441 ;;      Locals:         1       0       0       0       0
   442 ;;      Temps:          2       0       0       0       0
   443 ;;      Totals:         5       0       0       0       0
   444 ;;Total ram usage:        5 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_main
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           
   454                           ;psect for function _ADC_Read
   455  0767                     _ADC_Read:	
   456                           
   457                           ;incstack = 0
   458                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
   459                           ;ADC_Read@channel stored from wreg
   460  0767  00F4               	movwf	ADC_Read@channel
   461                           
   462                           ;main.c: 51: ADCON0 &= 0x11000101;
   463  0768  3001               	movlw	1
   464  0769  00F2               	movwf	??_ADC_Read
   465  076A  0872               	movf	??_ADC_Read,w
   466  076B  1283               	bcf	3,5	;RP0=0, select bank0
   467  076C  1303               	bcf	3,6	;RP1=0, select bank0
   468  076D  059F               	andwf	31,f	;volatile
   469                           
   470                           ;main.c: 52: ADCON0 |= (unsigned)channel<<3;
   471  076E  0874               	movf	ADC_Read@channel,w
   472  076F  00F2               	movwf	??_ADC_Read
   473  0770  3002               	movlw	2
   474  0771                     u85:	
   475  0771  1003               	clrc
   476  0772  0DF2               	rlf	??_ADC_Read,f
   477  0773  3EFF               	addlw	-1
   478  0774  1D03               	skipz
   479  0775  2F71               	goto	u85
   480  0776  1003               	clrc
   481  0777  0D72               	rlf	??_ADC_Read,w
   482  0778  00F3               	movwf	??_ADC_Read+1
   483  0779  0873               	movf	??_ADC_Read+1,w
   484  077A  049F               	iorwf	31,f	;volatile
   485                           
   486                           ;main.c: 53: _delay((unsigned long)((2)*(4000000/4000.0)));
   487  077B  3003               	movlw	3
   488  077C  00F3               	movwf	??_ADC_Read+1
   489  077D  3097               	movlw	151
   490  077E  00F2               	movwf	??_ADC_Read
   491  077F                     u167:	
   492  077F  0BF2               	decfsz	??_ADC_Read,f
   493  0780  2F7F               	goto	u167
   494  0781  0BF3               	decfsz	??_ADC_Read+1,f
   495  0782  2F7F               	goto	u167
   496  0783  2F84               	nop2
   497                           
   498                           ;main.c: 54: GO_nDONE = 1;
   499  0784  1283               	bcf	3,5	;RP0=0, select bank0
   500  0785  1303               	bcf	3,6	;RP1=0, select bank0
   501  0786  149F               	bsf	31,1	;volatile
   502  0787                     l48:	
   503                           ;main.c: 55: while(GO_nDONE);
   504                           
   505  0787  189F               	btfsc	31,1	;volatile
   506  0788  2F87               	goto	l48
   507                           
   508                           ;main.c: 56: return (uint16_t)((ADRESH<<8)+ADRESL);
   509  0789  081E               	movf	30,w	;volatile
   510  078A  00F1               	movwf	?_ADC_Read+1
   511  078B  1683               	bsf	3,5	;RP0=1, select bank1
   512  078C  1303               	bcf	3,6	;RP1=0, select bank1
   513  078D  081E               	movf	30,w	;volatile
   514  078E  00F0               	movwf	?_ADC_Read
   515  078F  0008               	return
   516  0790                     __end_of_ADC_Read:	
   517                           
   518                           	psect	text2
   519  0737                     __ptext2:	
   520 ;; *************** function _ADC_Initialize *****************
   521 ;; Defined at:
   522 ;;		line 40 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   536 ;;      Params:         0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           
   550                           ;psect for function _ADC_Initialize
   551  0737                     _ADC_Initialize:	
   552                           
   553                           ;main.c: 42: ADCON0 = 0b01000001;
   554                           
   555                           ;incstack = 0
   556                           ; Regs used in _ADC_Initialize: [wreg]
   557  0737  3041               	movlw	65
   558  0738  1283               	bcf	3,5	;RP0=0, select bank0
   559  0739  1303               	bcf	3,6	;RP1=0, select bank0
   560  073A  009F               	movwf	31	;volatile
   561                           
   562                           ;main.c: 43: ADCON1 = 0b11000000;
   563  073B  30C0               	movlw	192
   564  073C  1683               	bsf	3,5	;RP0=1, select bank1
   565  073D  1303               	bcf	3,6	;RP1=0, select bank1
   566  073E  009F               	movwf	31	;volatile
   567                           
   568                           ;main.c: 44: ANSELbits.ANS0 = 1;
   569  073F  1683               	bsf	3,5	;RP0=1, select bank3
   570  0740  1703               	bsf	3,6	;RP1=1, select bank3
   571  0741  1408               	bsf	8,0	;volatile
   572                           
   573                           ;main.c: 45: TRISAbits.TRISA0 = 1;
   574  0742  1683               	bsf	3,5	;RP0=1, select bank1
   575  0743  1303               	bcf	3,6	;RP1=0, select bank1
   576  0744  1405               	bsf	5,0	;volatile
   577  0745  0008               	return
   578  0746                     __end_of_ADC_Initialize:	
   579                           ;main.c: 46: return;
   580                           
   581  007E                     btemp	set	126	;btemp
   582  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     157
                                              5 COMMON     6     6      0
                     _ADC_Initialize
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      10       5       20.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1B      12        0.0%
ABS                  0      0      1B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Oct 09 15:33:02 2021

                       pc 0002               __CFG_CP$OFF 0000                        l48 0787  
                      u85 0771                        fsr 0004               __CFG_LVP$ON 0000  
                     l563 079F                       l573 07CF                       l577 07E6  
                     l569 07AE                       u115 07BF                       u124 07C7  
                     u125 07C5                       u134 07D5                       u135 07D3  
                     u157 07EA                       u167 077F              __CFG_CPD$OFF 0000  
                     fsr0 0004                       indf 0000              __CFG_WRT$OFF 0000  
                    _main 0790                      btemp 007E          __end_of_ADC_Read 0790  
                    start 0000             __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000  
                   ?_main 0070             __CFG_WDTE$OFF 0000                     _ANSEL 0188  
                   _PORTB 0006                     _TRISB 0086            __CFG_FCMEN$OFF 0000  
                   main@i 007A            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E             main@adc_value 0078  
         __initialization 07F0              __end_of_main 07F0                    ??_main 0075  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ADRESL 009E                    _ANSELH 0189            __CFG_PWRTE$OFF 0000  
         ADC_Read@channel 0074                 ?_ADC_Read 0070   __end_of__initialization 07FC  
          __pcstackCOMMON 0070              __pidataBANK0 0746                ??_ADC_Read 0072  
              __pmaintext 0790   __size_of_ADC_Initialize 000F                 _ANSELbits 0188  
                 __ptext1 0767                   __ptext2 0737      end_of_initialization 07FC  
               _TRISAbits 0085         __size_of_ADC_Read 0029            _ADC_Initialize 0737  
     start_initialization 07F0  __CFG_FOSC$INTRC_NOCLKOUT 0000                init_fetch0 0756  
  __end_of_ADC_Initialize 0746               __pdataBANK0 0020                 ___latbits 0002  
         ?_ADC_Initialize 0070                  _ADC_Read 0767                  _GO_nDONE 00F9  
              _ADC_limits 0020         __CFG_BOR4V$BOR40V 0000             __size_of_main 0060  
                init_ram0 075A          ??_ADC_Initialize 0070  
