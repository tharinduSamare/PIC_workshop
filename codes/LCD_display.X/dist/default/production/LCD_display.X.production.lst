

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Oct 09 20:16:51 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text1_split_1,local,class=CODE,merge=1,delta=2
    43                           	psect	text1_split_2,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F886 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0097                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  0105                     	;# 
   142  0107                     	;# 
   143  0108                     	;# 
   144  0109                     	;# 
   145  010C                     	;# 
   146  010C                     	;# 
   147  010D                     	;# 
   148  010E                     	;# 
   149  010F                     	;# 
   150  0185                     	;# 
   151  0187                     	;# 
   152  0188                     	;# 
   153  0189                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156                           
   157                           	psect	idataBANK1
   158  10D8                     __pidataBANK1:	
   159                           
   160                           ;initializer for main@F1682
   161  10D8  3461               	retlw	97
   162  10D9  3462               	retlw	98
   163  10DA  3463               	retlw	99
   164  10DB  3464               	retlw	100
   165  10DC  3465               	retlw	101
   166  10DD  3466               	retlw	102
   167  10DE  3467               	retlw	103
   168  10DF  3468               	retlw	104
   169  10E0  3469               	retlw	105
   170  10E1  346A               	retlw	106
   171  10E2  346B               	retlw	107
   172  10E3  346C               	retlw	108
   173  10E4  346D               	retlw	109
   174  10E5  346E               	retlw	110
   175  10E6  346F               	retlw	111
   176  10E7  3470               	retlw	112
   177                           
   178                           	psect	idataBANK3
   179  10C8                     __pidataBANK3:	
   180                           
   181                           ;initializer for main@F1684
   182  10C8  3431               	retlw	49
   183  10C9  3432               	retlw	50
   184  10CA  3433               	retlw	51
   185  10CB  3434               	retlw	52
   186  10CC  3435               	retlw	53
   187  10CD  3436               	retlw	54
   188  10CE  3437               	retlw	55
   189  10CF  3438               	retlw	56
   190  10D0  3439               	retlw	57
   191  10D1  3430               	retlw	48
   192  10D2  3431               	retlw	49
   193  10D3  3432               	retlw	50
   194  10D4  3433               	retlw	51
   195  10D5  3434               	retlw	52
   196  10D6  3435               	retlw	53
   197  10D7  3436               	retlw	54
   198                           
   199                           	psect	strings
   200  1000                     __pstrings:	
   201  1000                     stringtab:	
   202  1000                     __stringtab:	
   203  1000                     stringcode:	
   204                           ;	String table - string pointers are 1 byte each
   205                           
   206  1000                     stringdir:	
   207  1000  3010               	movlw	high stringdir
   208  1001  008A               	movwf	10
   209  1002  0804               	movf	4,w
   210  1003  0A84               	incf	4,f
   211  1004  0782               	addwf	2,f
   212  1005                     __stringbase:	
   213  1005  3400               	retlw	0
   214  1006                     __end_of__stringtab:	
   215  1006                     _dpowers:	
   216  1006  3401               	retlw	1
   217  1007  3400               	retlw	0
   218  1008  3400               	retlw	0
   219  1009  3400               	retlw	0
   220  100A  340A               	retlw	10
   221  100B  3400               	retlw	0
   222  100C  3400               	retlw	0
   223  100D  3400               	retlw	0
   224  100E  3464               	retlw	100
   225  100F  3400               	retlw	0
   226  1010  3400               	retlw	0
   227  1011  3400               	retlw	0
   228  1012  34E8               	retlw	232
   229  1013  3403               	retlw	3
   230  1014  3400               	retlw	0
   231  1015  3400               	retlw	0
   232  1016  3410               	retlw	16
   233  1017  3427               	retlw	39
   234  1018  3400               	retlw	0
   235  1019  3400               	retlw	0
   236  101A  34A0               	retlw	160
   237  101B  3486               	retlw	134
   238  101C  3401               	retlw	1
   239  101D  3400               	retlw	0
   240  101E  3440               	retlw	64
   241  101F  3442               	retlw	66
   242  1020  340F               	retlw	15
   243  1021  3400               	retlw	0
   244  1022  3480               	retlw	128
   245  1023  3496               	retlw	150
   246  1024  3498               	retlw	152
   247  1025  3400               	retlw	0
   248  1026  3400               	retlw	0
   249  1027  34E1               	retlw	225
   250  1028  34F5               	retlw	245
   251  1029  3405               	retlw	5
   252  102A  3400               	retlw	0
   253  102B  34CA               	retlw	202
   254  102C  349A               	retlw	154
   255  102D  343B               	retlw	59
   256  102E                     __end_of_dpowers:	
   257  102E                     __powers_:	
   258  102E  3400               	retlw	0
   259  102F  3480               	retlw	128
   260  1030  343F               	retlw	63
   261  1031  3400               	retlw	0
   262  1032  3420               	retlw	32
   263  1033  3441               	retlw	65
   264  1034  3400               	retlw	0
   265  1035  34C8               	retlw	200
   266  1036  3442               	retlw	66
   267  1037  3400               	retlw	0
   268  1038  347A               	retlw	122
   269  1039  3444               	retlw	68
   270  103A  3440               	retlw	64
   271  103B  341C               	retlw	28
   272  103C  3446               	retlw	70
   273  103D  3450               	retlw	80
   274  103E  34C3               	retlw	195
   275  103F  3447               	retlw	71
   276  1040  3424               	retlw	36
   277  1041  3474               	retlw	116
   278  1042  3449               	retlw	73
   279  1043  3497               	retlw	151
   280  1044  3418               	retlw	24
   281  1045  344B               	retlw	75
   282  1046  34BC               	retlw	188
   283  1047  34BE               	retlw	190
   284  1048  344C               	retlw	76
   285  1049  346B               	retlw	107
   286  104A  346E               	retlw	110
   287  104B  344E               	retlw	78
   288  104C  3403               	retlw	3
   289  104D  3415               	retlw	21
   290  104E  3450               	retlw	80
   291  104F  3479               	retlw	121
   292  1050  34AD               	retlw	173
   293  1051  3460               	retlw	96
   294  1052  34F3               	retlw	243
   295  1053  3449               	retlw	73
   296  1054  3471               	retlw	113
   297  1055                     __end_of__powers_:	
   298  1055                     __npowers_:	
   299  1055  3400               	retlw	0
   300  1056  3480               	retlw	128
   301  1057  343F               	retlw	63
   302  1058  34CD               	retlw	205
   303  1059  34CC               	retlw	204
   304  105A  343D               	retlw	61
   305  105B  34D7               	retlw	215
   306  105C  3423               	retlw	35
   307  105D  343C               	retlw	60
   308  105E  3412               	retlw	18
   309  105F  3483               	retlw	131
   310  1060  343A               	retlw	58
   311  1061  34B7               	retlw	183
   312  1062  34D1               	retlw	209
   313  1063  3438               	retlw	56
   314  1064  34C6               	retlw	198
   315  1065  3427               	retlw	39
   316  1066  3437               	retlw	55
   317  1067  3438               	retlw	56
   318  1068  3486               	retlw	134
   319  1069  3435               	retlw	53
   320  106A  34C0               	retlw	192
   321  106B  34D6               	retlw	214
   322  106C  3433               	retlw	51
   323  106D  34CC               	retlw	204
   324  106E  342B               	retlw	43
   325  106F  3432               	retlw	50
   326  1070  3470               	retlw	112
   327  1071  3489               	retlw	137
   328  1072  3430               	retlw	48
   329  1073  34E7               	retlw	231
   330  1074  34DB               	retlw	219
   331  1075  342E               	retlw	46
   332  1076  34E5               	retlw	229
   333  1077  343C               	retlw	60
   334  1078  341E               	retlw	30
   335  1079  3442               	retlw	66
   336  107A  34A2               	retlw	162
   337  107B  340D               	retlw	13
   338  107C                     __end_of__npowers_:	
   339  003D                     _RC5	set	61
   340  003C                     _RC4	set	60
   341  0037                     _RB7	set	55
   342  0036                     _RB6	set	54
   343  003F                     _RC7	set	63
   344  003E                     _RC6	set	62
   345  0087                     _TRISC	set	135
   346  0086                     _TRISB	set	134
   347  0189                     _ANSELH	set	393
   348  0188                     _ANSEL	set	392
   349  107C                     STR_2:	
   350  107C  3464               	retlw	100	;'d'
   351  107D  3469               	retlw	105	;'i'
   352  107E  3472               	retlw	114	;'r'
   353  107F  343D               	retlw	61	;'='
   354  1080  3425               	retlw	37	;'%'
   355  1081  3464               	retlw	100	;'d'
   356  1082  3420               	retlw	32	;' '
   357  1083  3464               	retlw	100	;'d'
   358  1084  3475               	retlw	117	;'u'
   359  1085  3474               	retlw	116	;'t'
   360  1086  3479               	retlw	121	;'y'
   361  1087  343D               	retlw	61	;'='
   362  1088  3425               	retlw	37	;'%'
   363  1089  3430               	retlw	48	;'0'
   364  108A  342E               	retlw	46	;'.'
   365  108B  3433               	retlw	51	;'3'
   366  108C  3466               	retlw	102	;'f'
   367  108D  3400               	retlw	0
   368  108E                     STR_1:	
   369  108E  3449               	retlw	73	;'I'
   370  108F  346E               	retlw	110	;'n'
   371  1090  3476               	retlw	118	;'v'
   372  1091  3465               	retlw	101	;'e'
   373  1092  3472               	retlw	114	;'r'
   374  1093  3474               	retlw	116	;'t'
   375  1094  3465               	retlw	101	;'e'
   376  1095  3472               	retlw	114	;'r'
   377  1096  3420               	retlw	32	;' '
   378  1097  3466               	retlw	102	;'f'
   379  1098  3472               	retlw	114	;'r'
   380  1099  3465               	retlw	101	;'e'
   381  109A  3471               	retlw	113	;'q'
   382  109B  343D               	retlw	61	;'='
   383  109C  3425               	retlw	37	;'%'
   384  109D  3469               	retlw	105	;'i'
   385  109E  346B               	retlw	107	;'k'
   386  109F  3400               	retlw	0
   387                           
   388                           ; #config settings
   389  0000                     
   390                           	psect	cinit
   391  07E2                     start_initialization:	
   392  07E2                     __initialization:	
   393                           
   394                           ; Initialize objects allocated to BANK3
   395  07E2  1783               	bsf	3,7	;select IRP bank2
   396  07E3  30A0               	movlw	low (__pdataBANK3+16)
   397  07E4  00FD               	movwf	btemp+-1
   398  07E5  3010               	movlw	high __pidataBANK3
   399  07E6  00FE               	movwf	btemp
   400  07E7  30C8               	movlw	low __pidataBANK3
   401  07E8  00FF               	movwf	btemp+1
   402  07E9  3090               	movlw	low __pdataBANK3
   403  07EA  0084               	movwf	4
   404  07EB  160A  118A  20EC  120A  118A  	fcall	init_ram0
   405                           
   406                           ; Initialize objects allocated to BANK1
   407  07F0  1383               	bcf	3,7	;select IRP bank0
   408  07F1  30F0               	movlw	low (__pdataBANK1+16)
   409  07F2  00FD               	movwf	btemp+-1
   410  07F3  3010               	movlw	high __pidataBANK1
   411  07F4  00FE               	movwf	btemp
   412  07F5  30D8               	movlw	low __pidataBANK1
   413  07F6  00FF               	movwf	btemp+1
   414  07F7  30E0               	movlw	low __pdataBANK1
   415  07F8  0084               	movwf	4
   416  07F9  160A  118A  20EC   	fcall	init_ram0
   417  07FC                     end_of_initialization:	
   418                           ;End of C runtime variable initialization code
   419                           
   420  07FC                     __end_of__initialization:	
   421  07FC  0183               	clrf	3
   422  07FD  120A  118A  2811   	ljmp	_main	;jump to C main() function
   423                           
   424                           	psect	dataBANK1
   425  00E0                     __pdataBANK1:	
   426  00E0                     main@F1682:	
   427  00E0                     	ds	16
   428                           
   429                           	psect	dataBANK3
   430  0190                     __pdataBANK3:	
   431  0190                     main@F1684:	
   432  0190                     	ds	16
   433                           
   434                           	psect	inittext
   435  10E8                     init_fetch0:	
   436                           ;	Called with low address in FSR and high address in W
   437                           
   438  10E8  087E               	movf	126,w
   439  10E9  008A               	movwf	10
   440  10EA  087F               	movf	127,w
   441  10EB  0082               	movwf	2
   442  10EC                     init_ram0:	
   443                           ;Called with:
   444                           ;	high address of idata address in btemp 
   445                           ;	low address of idata address in btemp+1 
   446                           ;	low address of data in FSR
   447                           ;	high address + 1 of data in btemp-1
   448                           
   449  10EC  20E8  160A  118A   	fcall	init_fetch0
   450  10EF  0080               	movwf	0
   451  10F0  0A84               	incf	4,f
   452  10F1  0804               	movf	4,w
   453  10F2  067D               	xorwf	125,w
   454  10F3  1903               	btfsc	3,2
   455  10F4  3400               	retlw	0
   456  10F5  0AFF               	incf	127,f
   457  10F6  1903               	btfsc	3,2
   458  10F7  0AFE               	incf	126,f
   459  10F8  28EC               	goto	init_ram0
   460                           
   461                           	psect	cstackBANK1
   462  00A0                     __pcstackBANK1:	
   463  00A0                     _sprintf$562:	
   464                           
   465                           ; 3 bytes @ 0x0
   466  00A0                     	ds	3
   467  00A3                     sprintf@ap:	
   468                           
   469                           ; 1 bytes @ 0x3
   470  00A3                     	ds	1
   471  00A4                     sprintf@tmpval:	
   472                           
   473                           ; 4 bytes @ 0x4
   474  00A4                     	ds	4
   475  00A8                     sprintf@val:	
   476                           
   477                           ; 4 bytes @ 0x8
   478  00A8                     	ds	4
   479  00AC                     sprintf@exp:	
   480                           
   481                           ; 2 bytes @ 0xC
   482  00AC                     	ds	2
   483  00AE                     sprintf@flag:	
   484                           
   485                           ; 2 bytes @ 0xE
   486  00AE                     	ds	2
   487  00B0                     sprintf@width:	
   488                           
   489                           ; 2 bytes @ 0x10
   490  00B0                     	ds	2
   491  00B2                     sprintf@fval:	
   492                           
   493                           ; 3 bytes @ 0x12
   494  00B2                     	ds	3
   495  00B5                     sprintf@prec:	
   496                           
   497                           ; 2 bytes @ 0x15
   498  00B5                     	ds	2
   499  00B7                     sprintf@sp:	
   500                           
   501                           ; 1 bytes @ 0x17
   502  00B7                     	ds	1
   503  00B8                     sprintf@c:	
   504                           
   505                           ; 1 bytes @ 0x18
   506  00B8                     	ds	1
   507  00B9                     main@line1:	
   508                           
   509                           ; 16 bytes @ 0x19
   510  00B9                     	ds	16
   511  00C9                     main@line2:	
   512                           
   513                           ; 16 bytes @ 0x29
   514  00C9                     	ds	16
   515  00D9                     main@duty_LCD:	
   516                           
   517                           ; 3 bytes @ 0x39
   518  00D9                     	ds	3
   519  00DC                     main@freq:	
   520                           
   521                           ; 2 bytes @ 0x3C
   522  00DC                     	ds	2
   523  00DE                     main@current_direction:	
   524                           
   525                           ; 2 bytes @ 0x3E
   526  00DE                     	ds	2
   527                           
   528                           	psect	cstackCOMMON
   529  0070                     __pcstackCOMMON:	
   530  0070                     ?_isdigit:	
   531  0070                     ?___ftge:	
   532                           ; 1 bit 
   533                           
   534  0070                     ??_isdigit:	
   535                           ; 1 bit 
   536                           
   537  0070                     ?_Lcd_Port:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0070                     ??_Lcd_Port:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_Lcd_Cmd:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ?_Lcd_Clear:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_Lcd_Init:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_Lcd_Write_Char:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_Lcd_Write_String:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_main:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?___wmul:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?___awmod:	
   565                           ; 2 bytes @ 0x0
   566                           
   567  0070                     ?___ftpack:	
   568                           ; 2 bytes @ 0x0
   569                           
   570  0070                     ?___ftneg:	
   571                           ; 3 bytes @ 0x0
   572                           
   573  0070                     ?__tdiv_to_l_:	
   574                           ; 3 bytes @ 0x0
   575                           
   576  0070                     ?__div_to_l_:	
   577                           ; 4 bytes @ 0x0
   578                           
   579  0070                     ?___lldiv:	
   580                           ; 4 bytes @ 0x0
   581                           
   582  0070                     Lcd_Port@a:	
   583                           ; 4 bytes @ 0x0
   584                           
   585  0070                     _isdigit$335:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ___wmul@multiplier:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ___awmod@divisor:	
   592                           ; 2 bytes @ 0x0
   593                           
   594  0070                     __div_to_l_@f1:	
   595                           ; 2 bytes @ 0x0
   596                           
   597  0070                     ___ftpack@arg:	
   598                           ; 3 bytes @ 0x0
   599                           
   600  0070                     __tdiv_to_l_@f1:	
   601                           ; 3 bytes @ 0x0
   602                           
   603  0070                     ___ftge@ff1:	
   604                           ; 3 bytes @ 0x0
   605                           
   606  0070                     ___ftneg@f1:	
   607                           ; 3 bytes @ 0x0
   608                           
   609  0070                     ___lldiv@divisor:	
   610                           ; 3 bytes @ 0x0
   611                           
   612                           
   613                           ; 4 bytes @ 0x0
   614  0070                     	ds	1
   615  0071                     ??_Lcd_Cmd:	
   616  0071                     ??_Lcd_Write_Char:	
   617                           ; 1 bytes @ 0x1
   618                           
   619  0071                     isdigit@c:	
   620                           ; 1 bytes @ 0x1
   621                           
   622                           
   623                           ; 1 bytes @ 0x1
   624  0071                     	ds	1
   625  0072                     Lcd_Write_Char@temp:	
   626  0072                     ___wmul@multiplicand:	
   627                           ; 1 bytes @ 0x2
   628                           
   629  0072                     ___awmod@dividend:	
   630                           ; 2 bytes @ 0x2
   631                           
   632                           
   633                           ; 2 bytes @ 0x2
   634  0072                     	ds	1
   635  0073                     ??___ftneg:	
   636  0073                     Lcd_Cmd@a:	
   637                           ; 1 bytes @ 0x3
   638                           
   639  0073                     Lcd_Write_Char@y:	
   640                           ; 1 bytes @ 0x3
   641                           
   642  0073                     ___ftpack@exp:	
   643                           ; 1 bytes @ 0x3
   644                           
   645  0073                     __div_to_l_@f2:	
   646                           ; 1 bytes @ 0x3
   647                           
   648  0073                     __tdiv_to_l_@f2:	
   649                           ; 3 bytes @ 0x3
   650                           
   651  0073                     ___ftge@ff2:	
   652                           ; 3 bytes @ 0x3
   653                           
   654                           
   655                           ; 3 bytes @ 0x3
   656  0073                     	ds	1
   657  0074                     ??_Lcd_Clear:	
   658  0074                     ?_Lcd_Set_Cursor:	
   659                           ; 1 bytes @ 0x4
   660                           
   661  0074                     ??_Lcd_Init:	
   662                           ; 1 bytes @ 0x4
   663                           
   664  0074                     ??___wmul:	
   665                           ; 1 bytes @ 0x4
   666                           
   667  0074                     ??___awmod:	
   668                           ; 1 bytes @ 0x4
   669                           
   670  0074                     Lcd_Set_Cursor@b:	
   671                           ; 1 bytes @ 0x4
   672                           
   673  0074                     Lcd_Write_Char@a:	
   674                           ; 1 bytes @ 0x4
   675                           
   676  0074                     ___ftpack@sign:	
   677                           ; 1 bytes @ 0x4
   678                           
   679  0074                     ___wmul@product:	
   680                           ; 1 bytes @ 0x4
   681                           
   682  0074                     ___lldiv@dividend:	
   683                           ; 2 bytes @ 0x4
   684                           
   685                           
   686                           ; 4 bytes @ 0x4
   687  0074                     	ds	1
   688  0075                     ??___ftpack:	
   689  0075                     ??_Lcd_Set_Cursor:	
   690                           ; 1 bytes @ 0x5
   691                           
   692  0075                     ??_Lcd_Write_String:	
   693                           ; 1 bytes @ 0x5
   694                           
   695  0075                     ___awmod@counter:	
   696                           ; 1 bytes @ 0x5
   697                           
   698                           
   699                           ; 1 bytes @ 0x5
   700  0075                     	ds	1
   701  0076                     ??__tdiv_to_l_:	
   702  0076                     ??__div_to_l_:	
   703                           ; 1 bytes @ 0x6
   704                           
   705  0076                     ??___ftge:	
   706                           ; 1 bytes @ 0x6
   707                           
   708  0076                     ___awmod@sign:	
   709                           ; 1 bytes @ 0x6
   710                           
   711  0076                     Lcd_Write_String@i:	
   712                           ; 1 bytes @ 0x6
   713                           
   714                           
   715                           ; 2 bytes @ 0x6
   716  0076                     	ds	1
   717  0077                     ?___awdiv:	
   718  0077                     Lcd_Set_Cursor@a:	
   719                           ; 2 bytes @ 0x7
   720                           
   721  0077                     ___awdiv@divisor:	
   722                           ; 1 bytes @ 0x7
   723                           
   724                           
   725                           ; 2 bytes @ 0x7
   726  0077                     	ds	1
   727  0078                     ??___lldiv:	
   728  0078                     ?___lltoft:	
   729                           ; 1 bytes @ 0x8
   730                           
   731  0078                     Lcd_Set_Cursor@z:	
   732                           ; 3 bytes @ 0x8
   733                           
   734  0078                     Lcd_Write_String@a:	
   735                           ; 1 bytes @ 0x8
   736                           
   737  0078                     ___lltoft@c:	
   738                           ; 1 bytes @ 0x8
   739                           
   740                           
   741                           ; 4 bytes @ 0x8
   742  0078                     	ds	1
   743  0079                     Lcd_Set_Cursor@y:	
   744  0079                     ___awdiv@dividend:	
   745                           ; 1 bytes @ 0x9
   746                           
   747  0079                     ___lldiv@quotient:	
   748                           ; 2 bytes @ 0x9
   749                           
   750                           
   751                           ; 4 bytes @ 0x9
   752  0079                     	ds	1
   753  007A                     Lcd_Set_Cursor@temp:	
   754                           
   755                           ; 1 bytes @ 0xA
   756  007A                     	ds	1
   757  007B                     ??___awdiv:	
   758                           
   759                           ; 1 bytes @ 0xB
   760  007B                     	ds	1
   761  007C                     ??___bmul:	
   762  007C                     ??___lltoft:	
   763                           ; 1 bytes @ 0xC
   764                           
   765                           
   766                           ; 1 bytes @ 0xC
   767  007C                     	ds	1
   768  007D                     ___lldiv@counter:	
   769  007D                     ___lltoft@exp:	
   770                           ; 1 bytes @ 0xD
   771                           
   772                           
   773                           ; 1 bytes @ 0xD
   774  007D                     	ds	1
   775  007E                     ??___ftsub:	
   776                           
   777                           	psect	cstackBANK0
   778  0020                     __pcstackBANK0:	
   779                           ; 1 bytes @ 0xE
   780                           
   781  0020                     ?___llmod:	
   782  0020                     ___awdiv@counter:	
   783                           ; 4 bytes @ 0x0
   784                           
   785  0020                     __div_to_l_@quot:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0020                     __tdiv_to_l_@quot:	
   789                           ; 4 bytes @ 0x0
   790                           
   791  0020                     ___llmod@divisor:	
   792                           ; 4 bytes @ 0x0
   793                           
   794                           
   795                           ; 4 bytes @ 0x0
   796  0020                     	ds	1
   797  0021                     ___awdiv@sign:	
   798                           
   799                           ; 1 bytes @ 0x1
   800  0021                     	ds	1
   801  0022                     ___awdiv@quotient:	
   802                           
   803                           ; 2 bytes @ 0x2
   804  0022                     	ds	2
   805  0024                     ?___bmul:	
   806  0024                     ___bmul@multiplicand:	
   807                           ; 1 bytes @ 0x4
   808                           
   809  0024                     __div_to_l_@cntr:	
   810                           ; 1 bytes @ 0x4
   811                           
   812  0024                     __tdiv_to_l_@cntr:	
   813                           ; 1 bytes @ 0x4
   814                           
   815  0024                     ___llmod@dividend:	
   816                           ; 1 bytes @ 0x4
   817                           
   818                           
   819                           ; 4 bytes @ 0x4
   820  0024                     	ds	1
   821  0025                     ___bmul@product:	
   822  0025                     __div_to_l_@exp1:	
   823                           ; 1 bytes @ 0x5
   824                           
   825  0025                     __tdiv_to_l_@exp1:	
   826                           ; 1 bytes @ 0x5
   827                           
   828                           
   829                           ; 1 bytes @ 0x5
   830  0025                     	ds	1
   831  0026                     ___bmul@multiplier:	
   832                           
   833                           ; 1 bytes @ 0x6
   834  0026                     	ds	1
   835  0027                     ?___ftmul:	
   836  0027                     ___ftmul@f1:	
   837                           ; 3 bytes @ 0x7
   838                           
   839                           
   840                           ; 3 bytes @ 0x7
   841  0027                     	ds	1
   842  0028                     ??___llmod:	
   843                           
   844                           ; 1 bytes @ 0x8
   845  0028                     	ds	1
   846  0029                     ___llmod@counter:	
   847                           
   848                           ; 1 bytes @ 0x9
   849  0029                     	ds	1
   850  002A                     ___ftmul@f2:	
   851                           
   852                           ; 3 bytes @ 0xA
   853  002A                     	ds	3
   854  002D                     ??___ftmul:	
   855                           
   856                           ; 1 bytes @ 0xD
   857  002D                     	ds	4
   858  0031                     ___ftmul@exp:	
   859                           
   860                           ; 1 bytes @ 0x11
   861  0031                     	ds	1
   862  0032                     ___ftmul@f3_as_product:	
   863                           
   864                           ; 3 bytes @ 0x12
   865  0032                     	ds	3
   866  0035                     ___ftmul@cntr:	
   867                           
   868                           ; 1 bytes @ 0x15
   869  0035                     	ds	1
   870  0036                     ___ftmul@sign:	
   871                           
   872                           ; 1 bytes @ 0x16
   873  0036                     	ds	1
   874  0037                     ?_fround:	
   875  0037                     ?_scale:	
   876                           ; 3 bytes @ 0x17
   877                           
   878                           
   879                           ; 3 bytes @ 0x17
   880  0037                     	ds	3
   881  003A                     ??_fround:	
   882  003A                     ??_scale:	
   883                           ; 1 bytes @ 0x1A
   884                           
   885                           
   886                           ; 1 bytes @ 0x1A
   887  003A                     	ds	2
   888  003C                     _scale$561:	
   889                           
   890                           ; 3 bytes @ 0x1C
   891  003C                     	ds	3
   892  003F                     scale@scl:	
   893                           
   894                           ; 1 bytes @ 0x1F
   895  003F                     	ds	1
   896  0040                     ?___fttol:	
   897  0040                     ___fttol@f1:	
   898                           ; 4 bytes @ 0x20
   899                           
   900  0040                     _fround$560:	
   901                           ; 3 bytes @ 0x20
   902                           
   903                           
   904                           ; 3 bytes @ 0x20
   905  0040                     	ds	3
   906  0043                     _fround$559:	
   907                           
   908                           ; 3 bytes @ 0x23
   909  0043                     	ds	1
   910  0044                     ??___fttol:	
   911                           
   912                           ; 1 bytes @ 0x24
   913  0044                     	ds	2
   914  0046                     fround@prec:	
   915                           
   916                           ; 1 bytes @ 0x26
   917  0046                     	ds	1
   918  0047                     ?___ftadd:	
   919  0047                     ___ftadd@f1:	
   920                           ; 3 bytes @ 0x27
   921                           
   922                           
   923                           ; 3 bytes @ 0x27
   924  0047                     	ds	1
   925  0048                     ___fttol@sign1:	
   926                           
   927                           ; 1 bytes @ 0x28
   928  0048                     	ds	1
   929  0049                     ___fttol@lval:	
   930                           
   931                           ; 4 bytes @ 0x29
   932  0049                     	ds	1
   933  004A                     ___ftadd@f2:	
   934                           
   935                           ; 3 bytes @ 0x2A
   936  004A                     	ds	3
   937  004D                     ??___ftadd:	
   938  004D                     ___fttol@exp1:	
   939                           ; 1 bytes @ 0x2D
   940                           
   941                           
   942                           ; 1 bytes @ 0x2D
   943  004D                     	ds	4
   944  0051                     ___ftadd@sign:	
   945                           
   946                           ; 1 bytes @ 0x31
   947  0051                     	ds	1
   948  0052                     ___ftadd@exp2:	
   949                           
   950                           ; 1 bytes @ 0x32
   951  0052                     	ds	1
   952  0053                     ___ftadd@exp1:	
   953                           
   954                           ; 1 bytes @ 0x33
   955  0053                     	ds	1
   956  0054                     ?___ftsub:	
   957  0054                     ___ftsub@f2:	
   958                           ; 3 bytes @ 0x34
   959                           
   960                           
   961                           ; 3 bytes @ 0x34
   962  0054                     	ds	3
   963  0057                     ___ftsub@f1:	
   964                           
   965                           ; 3 bytes @ 0x37
   966  0057                     	ds	3
   967  005A                     ?_sprintf:	
   968  005A                     sprintf@f:	
   969                           ; 2 bytes @ 0x3A
   970                           
   971                           
   972                           ; 1 bytes @ 0x3A
   973  005A                     	ds	6
   974  0060                     ??_sprintf:	
   975                           
   976                           ; 1 bytes @ 0x40
   977  0060                     	ds	6
   978  0066                     ??_main:	
   979                           
   980                           ; 1 bytes @ 0x46
   981  0066                     	ds	4
   982                           
   983                           	psect	maintext
   984  0011                     __pmaintext:	
   985 ;;
   986 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   987 ;;
   988 ;; *************** function _main *****************
   989 ;; Defined at:
   990 ;;		line 21 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  line2          16   41[BANK1 ] unsigned char [16]
   995 ;;  line1          16   25[BANK1 ] unsigned char [16]
   996 ;;  duty_LCD        3   57[BANK1 ] float 
   997 ;;  current_dire    2   62[BANK1 ] int 
   998 ;;  freq            2   60[BANK1 ] int 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : B00/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1008 ;;      Params:         0       0       0       0       0
  1009 ;;      Locals:         0       0      39       0       0
  1010 ;;      Temps:          0       4       0       0       0
  1011 ;;      Totals:         0       4      39       0       0
  1012 ;;Total ram usage:       43 bytes
  1013 ;; Hardware stack levels required when called:    4
  1014 ;; This function calls:
  1015 ;;		_Lcd_Clear
  1016 ;;		_Lcd_Init
  1017 ;;		_Lcd_Set_Cursor
  1018 ;;		_Lcd_Write_String
  1019 ;;		_sprintf
  1020 ;; This function is called by:
  1021 ;;		Startup code after reset
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _main
  1027  0011                     _main:	
  1028                           
  1029                           ;main.c: 24: ANSEL = 0x00;
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1033  0011  1683               	bsf	3,5	;RP0=1, select bank3
  1034  0012  1703               	bsf	3,6	;RP1=1, select bank3
  1035  0013  0188               	clrf	8	;volatile
  1036                           
  1037                           ;main.c: 25: ANSELH = 0x00;
  1038  0014  0189               	clrf	9	;volatile
  1039                           
  1040                           ;main.c: 27: TRISB = 0x00;
  1041  0015  1683               	bsf	3,5	;RP0=1, select bank1
  1042  0016  1303               	bcf	3,6	;RP1=0, select bank1
  1043  0017  0186               	clrf	6	;volatile
  1044                           
  1045                           ;main.c: 28: TRISC = 0x00;
  1046  0018  0187               	clrf	7	;volatile
  1047                           
  1048                           ;main.c: 30: Lcd_Init();
  1049  0019  160A  118A  22BB  120A  118A  	fcall	_Lcd_Init
  1050                           
  1051                           ;main.c: 32: char line1[16] = "abcdefghijklmnop";
  1052  001E  30B9               	movlw	main@line1& (0+255)
  1053  001F  0084               	movwf	4
  1054  0020  30E0               	movlw	low main@F1682
  1055  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1056  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1057  0023  00E6               	movwf	??_main
  1058  0024  0804               	movf	4,w
  1059  0025  00E7               	movwf	??_main+1
  1060  0026  3010               	movlw	16
  1061  0027  00E8               	movwf	??_main+2
  1062  0028                     u4310:	
  1063  0028  0866               	movf	??_main,w
  1064  0029  0084               	movwf	4
  1065  002A  1383               	bcf	3,7	;select IRP bank1
  1066  002B  0800               	movf	0,w
  1067  002C  00E9               	movwf	??_main+3
  1068  002D  0AE6               	incf	??_main,f
  1069  002E  0867               	movf	??_main+1,w
  1070  002F  0084               	movwf	4
  1071  0030  0869               	movf	??_main+3,w
  1072  0031  0080               	movwf	0
  1073  0032  0AE7               	incf	??_main+1,f
  1074  0033  0BE8               	decfsz	??_main+2,f
  1075  0034  2828               	goto	u4310
  1076                           
  1077                           ;main.c: 33: char line2[16] = "1234567890123456";
  1078  0035  30C9               	movlw	main@line2& (0+255)
  1079  0036  0084               	movwf	4
  1080  0037  3090               	movlw	low main@F1684
  1081  0038  00E6               	movwf	??_main
  1082  0039  0804               	movf	4,w
  1083  003A  00E7               	movwf	??_main+1
  1084  003B  3010               	movlw	16
  1085  003C  00E8               	movwf	??_main+2
  1086  003D                     u4320:	
  1087  003D  0866               	movf	??_main,w
  1088  003E  0084               	movwf	4
  1089  003F  1783               	bsf	3,7	;select IRP bank3
  1090  0040  0800               	movf	0,w
  1091  0041  00E9               	movwf	??_main+3
  1092  0042  0AE6               	incf	??_main,f
  1093  0043  0867               	movf	??_main+1,w
  1094  0044  0084               	movwf	4
  1095  0045  1383               	bcf	3,7	;select IRP bank1
  1096  0046  0869               	movf	??_main+3,w
  1097  0047  0080               	movwf	0
  1098  0048  0AE7               	incf	??_main+1,f
  1099  0049  0BE8               	decfsz	??_main+2,f
  1100  004A  283D               	goto	u4320
  1101                           
  1102                           ;main.c: 35: int freq = 5;
  1103  004B  3005               	movlw	5
  1104  004C  1683               	bsf	3,5	;RP0=1, select bank1
  1105  004D  1303               	bcf	3,6	;RP1=0, select bank1
  1106  004E  00DC               	movwf	main@freq^(0+128)
  1107  004F  3000               	movlw	0
  1108  0050  00DD               	movwf	(main@freq^(0+128)+1)
  1109                           
  1110                           ;main.c: 36: int current_direction = 1;
  1111  0051  3001               	movlw	1
  1112  0052  00DE               	movwf	main@current_direction^(0+128)
  1113  0053  3000               	movlw	0
  1114  0054  00DF               	movwf	(main@current_direction^(0+128)+1)
  1115                           
  1116                           ;main.c: 37: float duty_LCD = 0.5;
  1117  0055  3000               	movlw	0
  1118  0056  00D9               	movwf	main@duty_LCD^(0+128)
  1119  0057  3000               	movlw	0
  1120  0058  00DA               	movwf	(main@duty_LCD+1)^(0+128)
  1121  0059  303F               	movlw	63
  1122  005A  00DB               	movwf	(main@duty_LCD+2)^(0+128)
  1123                           
  1124                           ;main.c: 39: sprintf(line1, "Inverter freq=%ik", freq);
  1125  005B  3089               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1126  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1127  005D  1303               	bcf	3,6	;RP1=0, select bank0
  1128  005E  00E6               	movwf	??_main
  1129  005F  0866               	movf	??_main,w
  1130  0060  00DA               	movwf	sprintf@f
  1131  0061  1683               	bsf	3,5	;RP0=1, select bank1
  1132  0062  1303               	bcf	3,6	;RP1=0, select bank1
  1133  0063  085D               	movf	(main@freq+1)^(0+128),w
  1134  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1135  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1136  0066  00DC               	movwf	?_sprintf+2
  1137  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1138  0068  1303               	bcf	3,6	;RP1=0, select bank1
  1139  0069  085C               	movf	main@freq^(0+128),w
  1140  006A  1283               	bcf	3,5	;RP0=0, select bank0
  1141  006B  1303               	bcf	3,6	;RP1=0, select bank0
  1142  006C  00DB               	movwf	?_sprintf+1
  1143  006D  30B9               	movlw	(low (main@line1| 0))& (0+255)
  1144  006E  160A  118A  26F2  120A  118A  	fcall	_sprintf
  1145                           
  1146                           ;main.c: 40: sprintf(line2, "dir=%d duty=%0.3f", current_direction,duty_LCD);
  1147  0073  3077               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1148  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1149  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1150  0076  00E6               	movwf	??_main
  1151  0077  0866               	movf	??_main,w
  1152  0078  00DA               	movwf	sprintf@f
  1153  0079  1683               	bsf	3,5	;RP0=1, select bank1
  1154  007A  1303               	bcf	3,6	;RP1=0, select bank1
  1155  007B  085F               	movf	(main@current_direction+1)^(0+128),w
  1156  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1157  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1158  007E  00DC               	movwf	?_sprintf+2
  1159  007F  1683               	bsf	3,5	;RP0=1, select bank1
  1160  0080  1303               	bcf	3,6	;RP1=0, select bank1
  1161  0081  085E               	movf	main@current_direction^(0+128),w
  1162  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1163  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1164  0084  00DB               	movwf	?_sprintf+1
  1165  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1166  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1167  0087  0859               	movf	main@duty_LCD^(0+128),w
  1168  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1169  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1170  008A  00DD               	movwf	?_sprintf+3
  1171  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1172  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1173  008D  085A               	movf	(main@duty_LCD+1)^(0+128),w
  1174  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1175  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1176  0090  00DE               	movwf	?_sprintf+4
  1177  0091  1683               	bsf	3,5	;RP0=1, select bank1
  1178  0092  1303               	bcf	3,6	;RP1=0, select bank1
  1179  0093  085B               	movf	(main@duty_LCD+2)^(0+128),w
  1180  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1181  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1182  0096  00DF               	movwf	?_sprintf+5
  1183  0097  30C9               	movlw	(low (main@line2| 0))& (0+255)
  1184  0098  160A  118A  26F2  120A  118A  	fcall	_sprintf
  1185                           
  1186                           ;main.c: 42: Lcd_Clear();
  1187  009D  160A  118A  20BD  120A  118A  	fcall	_Lcd_Clear
  1188                           
  1189                           ;main.c: 43: Lcd_Set_Cursor(1,1);
  1190  00A2  01F4               	clrf	Lcd_Set_Cursor@b
  1191  00A3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1192  00A4  3001               	movlw	1
  1193  00A5  160A  118A  21D8  120A  118A  	fcall	_Lcd_Set_Cursor
  1194                           
  1195                           ;main.c: 44: Lcd_Write_String(line1);
  1196  00AA  30B9               	movlw	(low (main@line1| 0))& (0+255)
  1197  00AB  160A  118A  2140  120A  118A  	fcall	_Lcd_Write_String
  1198                           
  1199                           ;main.c: 45: Lcd_Set_Cursor(2,1);
  1200  00B0  01F4               	clrf	Lcd_Set_Cursor@b
  1201  00B1  0AF4               	incf	Lcd_Set_Cursor@b,f
  1202  00B2  3002               	movlw	2
  1203  00B3  160A  118A  21D8  120A  118A  	fcall	_Lcd_Set_Cursor
  1204                           
  1205                           ;main.c: 46: Lcd_Write_String(line2);
  1206  00B8  30C9               	movlw	(low (main@line2| 0))& (0+255)
  1207  00B9  160A  118A  2140  120A  118A  	fcall	_Lcd_Write_String
  1208  00BE                     l74:	
  1209                           ;main.c: 49: while (1){
  1210                           
  1211  00BE  28BE               	goto	l74
  1212  00BF                     __end_of_main:	
  1213                           
  1214                           	psect	text1
  1215  16F2                     __ptext1:	
  1216 ;; *************** function _sprintf *****************
  1217 ;; Defined at:
  1218 ;;		line 492 in file "E:\software\pic\XC8\sources\common\doprnt.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  sp              1    wreg     PTR unsigned char 
  1221 ;;		 -> main@line2(16), main@line1(16), 
  1222 ;;  f               1   58[BANK0 ] PTR const unsigned char 
  1223 ;;		 -> STR_2(18), STR_1(18), 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  sp              1   23[BANK1 ] PTR unsigned char 
  1226 ;;		 -> main@line2(16), main@line1(16), 
  1227 ;;  val             4    8[BANK1 ] unsigned long 
  1228 ;;  tmpval          4    4[BANK1 ] struct .
  1229 ;;  fval            3   18[BANK1 ] struct .
  1230 ;;  prec            2   21[BANK1 ] int 
  1231 ;;  width           2   16[BANK1 ] int 
  1232 ;;  flag            2   14[BANK1 ] unsigned short 
  1233 ;;  exp             2   12[BANK1 ] int 
  1234 ;;  cp              2    0        PTR const unsigned char 
  1235 ;;  len             2    0        unsigned int 
  1236 ;;  c               1   24[BANK1 ] char 
  1237 ;;  ap              1    3[BANK1 ] PTR void [1]
  1238 ;;		 -> ?_sprintf(2), 
  1239 ;;  d               1    0        unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  2   58[BANK0 ] int 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1249 ;;      Params:         0       6       0       0       0
  1250 ;;      Locals:         0       0      25       0       0
  1251 ;;      Temps:          0       6       0       0       0
  1252 ;;      Totals:         0      12      25       0       0
  1253 ;;Total ram usage:       37 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    3
  1256 ;; This function calls:
  1257 ;;		___awdiv
  1258 ;;		___ftadd
  1259 ;;		___ftge
  1260 ;;		___ftmul
  1261 ;;		___ftneg
  1262 ;;		___ftsub
  1263 ;;		___fttol
  1264 ;;		___lldiv
  1265 ;;		___llmod
  1266 ;;		___lltoft
  1267 ;;		___wmul
  1268 ;;		__div_to_l_
  1269 ;;		__tdiv_to_l_
  1270 ;;		_fround
  1271 ;;		_isdigit
  1272 ;;		_scale
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _sprintf
  1280  16F2                     _sprintf:	
  1281                           
  1282                           ;incstack = 0
  1283                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1284                           ;sprintf@sp stored from wreg
  1285  16F2  1683               	bsf	3,5	;RP0=1, select bank1
  1286  16F3  1303               	bcf	3,6	;RP1=0, select bank1
  1287  16F4  00B7               	movwf	sprintf@sp^(0+128)
  1288                           
  1289                           ;doprnt.c: 494: va_list ap;
  1290                           ;doprnt.c: 499: signed char c;
  1291                           ;doprnt.c: 501: int width;
  1292                           ;doprnt.c: 504: int prec;
  1293                           ;doprnt.c: 508: unsigned short flag;
  1294                           ;doprnt.c: 515: char d;
  1295                           ;doprnt.c: 516: double fval;
  1296                           ;doprnt.c: 517: int exp;
  1297                           ;doprnt.c: 523: union {
  1298                           ;doprnt.c: 524: unsigned long vd;
  1299                           ;doprnt.c: 525: double integ;
  1300                           ;doprnt.c: 526: } tmpval;
  1301                           ;doprnt.c: 528: unsigned long val;
  1302                           ;doprnt.c: 529: unsigned len;
  1303                           ;doprnt.c: 530: const char * cp;
  1304                           ;doprnt.c: 533: *ap = __va_start();
  1305  16F5  305B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1306  16F6  1283               	bcf	3,5	;RP0=0, select bank0
  1307  16F7  1303               	bcf	3,6	;RP1=0, select bank0
  1308  16F8  00E0               	movwf	??_sprintf
  1309  16F9  0860               	movf	??_sprintf,w
  1310  16FA  1683               	bsf	3,5	;RP0=1, select bank1
  1311  16FB  1303               	bcf	3,6	;RP1=0, select bank1
  1312  16FC  00A3               	movwf	sprintf@ap^(0+128)
  1313  16FD                     l2707:	
  1314                           ;doprnt.c: 536: while(c = *f++) {
  1315                           
  1316  16FD  3001               	movlw	1
  1317  16FE  1283               	bcf	3,5	;RP0=0, select bank0
  1318  16FF  1303               	bcf	3,6	;RP1=0, select bank0
  1319  1700  07DA               	addwf	sprintf@f,f
  1320  1701  30FF               	movlw	-1
  1321  1702  075A               	addwf	sprintf@f,w
  1322  1703  0084               	movwf	4
  1323  1704  160A  118A  2000  160A  118A  	fcall	stringdir
  1324  1709  00E0               	movwf	??_sprintf
  1325  170A  0860               	movf	??_sprintf,w
  1326  170B  1683               	bsf	3,5	;RP0=1, select bank1
  1327  170C  1303               	bcf	3,6	;RP1=0, select bank1
  1328  170D  00B8               	movwf	sprintf@c^(0+128)
  1329  170E  0838               	movf	sprintf@c^(0+128),w
  1330  170F  1903               	btfsc	3,2
  1331  1710  2FFD               	goto	L11
  1332                           
  1333                           ;doprnt.c: 538: if(c != '%')
  1334  1711  3025               	movlw	37
  1335  1712  0638               	xorwf	sprintf@c^(0+128),w
  1336  1713  1903               	btfsc	3,2
  1337  1714  2F29               	goto	l2401
  1338                           
  1339                           ;doprnt.c: 540: {
  1340                           ;doprnt.c: 541: ((*sp++ = (c)));
  1341  1715  0838               	movf	sprintf@c^(0+128),w
  1342  1716  1283               	bcf	3,5	;RP0=0, select bank0
  1343  1717  1303               	bcf	3,6	;RP1=0, select bank0
  1344  1718  00E0               	movwf	??_sprintf
  1345  1719  1683               	bsf	3,5	;RP0=1, select bank1
  1346  171A  1303               	bcf	3,6	;RP1=0, select bank1
  1347  171B  0837               	movf	sprintf@sp^(0+128),w
  1348  171C  0084               	movwf	4
  1349  171D  1283               	bcf	3,5	;RP0=0, select bank0
  1350  171E  1303               	bcf	3,6	;RP1=0, select bank0
  1351  171F  0860               	movf	??_sprintf,w
  1352  1720  1383               	bcf	3,7	;select IRP bank0
  1353  1721  0080               	movwf	0
  1354  1722  3001               	movlw	1
  1355  1723  00E0               	movwf	??_sprintf
  1356  1724  0860               	movf	??_sprintf,w
  1357  1725  1683               	bsf	3,5	;RP0=1, select bank1
  1358  1726  1303               	bcf	3,6	;RP1=0, select bank1
  1359  1727  07B7               	addwf	sprintf@sp^(0+128),f
  1360                           
  1361                           ;doprnt.c: 542: continue;
  1362  1728  2EFD               	goto	l2707
  1363  1729                     l2401:	
  1364                           
  1365                           ;doprnt.c: 543: }
  1366                           ;doprnt.c: 546: width = 0;
  1367  1729  01B0               	clrf	sprintf@width^(0+128)
  1368  172A  01B1               	clrf	(sprintf@width+1)^(0+128)
  1369                           
  1370                           ;doprnt.c: 548: flag = 0;
  1371  172B  01AE               	clrf	sprintf@flag^(0+128)
  1372  172C  01AF               	clrf	(sprintf@flag+1)^(0+128)
  1373                           
  1374                           ;doprnt.c: 551: switch(*f) {
  1375                           
  1376                           ;doprnt.c: 550: for(;;) {
  1377  172D  2F37               	goto	l2407
  1378  172E                     l117:	
  1379                           ;doprnt.c: 579: case '0':
  1380                           
  1381                           
  1382                           ;doprnt.c: 580: flag |= 0x04;
  1383  172E  1683               	bsf	3,5	;RP0=1, select bank1
  1384  172F  1303               	bcf	3,6	;RP1=0, select bank1
  1385  1730  152E               	bsf	sprintf@flag^(0+128),2
  1386                           
  1387                           ;doprnt.c: 581: f++;
  1388  1731  3001               	movlw	1
  1389  1732  1283               	bcf	3,5	;RP0=0, select bank0
  1390  1733  1303               	bcf	3,6	;RP1=0, select bank0
  1391  1734  00E0               	movwf	??_sprintf
  1392  1735  0860               	movf	??_sprintf,w
  1393  1736  07DA               	addwf	sprintf@f,f
  1394  1737                     l2407:	
  1395                           ;doprnt.c: 584: }
  1396                           
  1397                           ;doprnt.c: 582: continue;
  1398                           
  1399  1737  1283               	bcf	3,5	;RP0=0, select bank0
  1400  1738  085A               	movf	sprintf@f,w
  1401  1739  0084               	movwf	4
  1402  173A  160A  118A  2000  160A  118A  	fcall	stringdir
  1403                           
  1404                           ; Switch size 1, requested type "space"
  1405                           ; Number of cases is 1, Range of values is 48 to 48
  1406                           ; switch strategies available:
  1407                           ; Name         Instructions Cycles
  1408                           ; simple_byte            4     3 (average)
  1409                           ; direct_byte           14    11 (fixed)
  1410                           ; jumptable            263     9 (fixed)
  1411                           ;	Chosen strategy is simple_byte
  1412  173F  3A30               	xorlw	48	; case 48
  1413  1740  1903               	skipnz
  1414  1741  2F2E               	goto	l117
  1415  1742  2F43               	goto	l2409
  1416  1743                     l2409:	
  1417                           ;doprnt.c: 586: }
  1418                           
  1419                           ;doprnt.c: 585: break;
  1420                           
  1421                           
  1422                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1423  1743  085A               	movf	sprintf@f,w
  1424  1744  0084               	movwf	4
  1425  1745  160A  118A  2000  160A  118A  	fcall	stringdir
  1426  174A  120A  118A  2003  160A  118A  	fcall	_isdigit
  1427  174F  1C03               	btfss	3,0
  1428  1750  2F99               	goto	l2421
  1429                           
  1430                           ;doprnt.c: 598: width = 0;
  1431  1751  1683               	bsf	3,5	;RP0=1, select bank1
  1432  1752  1303               	bcf	3,6	;RP1=0, select bank1
  1433  1753  01B0               	clrf	sprintf@width^(0+128)
  1434  1754  01B1               	clrf	(sprintf@width+1)^(0+128)
  1435  1755                     l2413:	
  1436                           ;doprnt.c: 599: do {
  1437                           
  1438                           
  1439                           ;doprnt.c: 600: width *= 10;
  1440  1755  300A               	movlw	10
  1441  1756  00F0               	movwf	___wmul@multiplier
  1442  1757  3000               	movlw	0
  1443  1758  00F1               	movwf	___wmul@multiplier+1
  1444  1759  1683               	bsf	3,5	;RP0=1, select bank1
  1445  175A  1303               	bcf	3,6	;RP1=0, select bank1
  1446  175B  0831               	movf	(sprintf@width+1)^(0+128),w
  1447  175C  00F3               	movwf	___wmul@multiplicand+1
  1448  175D  0830               	movf	sprintf@width^(0+128),w
  1449  175E  00F2               	movwf	___wmul@multiplicand
  1450  175F  160A  118A  2180  160A  118A  	fcall	___wmul
  1451  1764  0871               	movf	?___wmul+1,w
  1452  1765  1683               	bsf	3,5	;RP0=1, select bank1
  1453  1766  1303               	bcf	3,6	;RP1=0, select bank1
  1454  1767  00B1               	movwf	(sprintf@width+1)^(0+128)
  1455  1768  0870               	movf	?___wmul,w
  1456  1769  00B0               	movwf	sprintf@width^(0+128)
  1457                           
  1458                           ;doprnt.c: 601: width += *f++ - '0';
  1459  176A  1283               	bcf	3,5	;RP0=0, select bank0
  1460  176B  1303               	bcf	3,6	;RP1=0, select bank0
  1461  176C  085A               	movf	sprintf@f,w
  1462  176D  0084               	movwf	4
  1463  176E  160A  118A  2000  160A  118A  	fcall	stringdir
  1464  1773  3ED0               	addlw	208
  1465  1774  00E0               	movwf	??_sprintf
  1466  1775  30FF               	movlw	255
  1467  1776  1803               	skipnc
  1468  1777  3000               	movlw	0
  1469  1778  00E1               	movwf	??_sprintf+1
  1470  1779  0860               	movf	??_sprintf,w
  1471  177A  1683               	bsf	3,5	;RP0=1, select bank1
  1472  177B  1303               	bcf	3,6	;RP1=0, select bank1
  1473  177C  07B0               	addwf	sprintf@width^(0+128),f
  1474  177D  1803               	skipnc
  1475  177E  0AB1               	incf	(sprintf@width+1)^(0+128),f
  1476  177F  1283               	bcf	3,5	;RP0=0, select bank0
  1477  1780  1303               	bcf	3,6	;RP1=0, select bank0
  1478  1781  0861               	movf	??_sprintf+1,w
  1479  1782  1683               	bsf	3,5	;RP0=1, select bank1
  1480  1783  1303               	bcf	3,6	;RP1=0, select bank1
  1481  1784  07B1               	addwf	(sprintf@width+1)^(0+128),f
  1482  1785  3001               	movlw	1
  1483  1786  1283               	bcf	3,5	;RP0=0, select bank0
  1484  1787  1303               	bcf	3,6	;RP1=0, select bank0
  1485  1788  00E0               	movwf	??_sprintf
  1486  1789  0860               	movf	??_sprintf,w
  1487  178A  07DA               	addwf	sprintf@f,f
  1488                           
  1489                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1490  178B  085A               	movf	sprintf@f,w
  1491  178C  0084               	movwf	4
  1492  178D  160A  118A  2000  160A  118A  	fcall	stringdir
  1493  1792  120A  118A  2003  160A  118A  	fcall	_isdigit
  1494  1797  1803               	btfsc	3,0
  1495  1798  2F55               	goto	l2413
  1496  1799                     l2421:	
  1497                           
  1498                           ;doprnt.c: 608: }
  1499                           ;doprnt.c: 611: if(*f == '.') {
  1500  1799  1283               	bcf	3,5	;RP0=0, select bank0
  1501  179A  1303               	bcf	3,6	;RP1=0, select bank0
  1502  179B  085A               	movf	sprintf@f,w
  1503  179C  0084               	movwf	4
  1504  179D  160A  118A  2000  160A  118A  	fcall	stringdir
  1505  17A2  3A2E               	xorlw	46
  1506  17A3  1D03               	skipz
  1507  17A4  2FF5               	goto	l2435
  1508                           
  1509                           ;doprnt.c: 612: flag |= 0x4000;
  1510  17A5  1683               	bsf	3,5	;RP0=1, select bank1
  1511  17A6  1303               	bcf	3,6	;RP1=0, select bank1
  1512  17A7  172F               	bsf	(sprintf@flag^(0+128)+1),6
  1513                           
  1514                           ;doprnt.c: 613: f++;
  1515  17A8  3001               	movlw	1
  1516  17A9  1283               	bcf	3,5	;RP0=0, select bank0
  1517  17AA  1303               	bcf	3,6	;RP1=0, select bank0
  1518  17AB  00E0               	movwf	??_sprintf
  1519  17AC  0860               	movf	??_sprintf,w
  1520  17AD  07DA               	addwf	sprintf@f,f
  1521                           
  1522                           ;doprnt.c: 620: {
  1523                           ;doprnt.c: 621: prec = 0;
  1524  17AE  1683               	bsf	3,5	;RP0=1, select bank1
  1525  17AF  1303               	bcf	3,6	;RP1=0, select bank1
  1526  17B0  01B5               	clrf	sprintf@prec^(0+128)
  1527  17B1  01B6               	clrf	(sprintf@prec+1)^(0+128)
  1528  17B2                     l2433:	
  1529                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1530                           
  1531  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  1532  17B3  085A               	movf	sprintf@f,w
  1533  17B4  0084               	movwf	4
  1534  17B5  160A  118A  2000  160A  118A  	fcall	stringdir
  1535  17BA  120A  118A  2003  160A  118A  	fcall	_isdigit
  1536  17BF  1C03               	btfss	3,0
  1537  17C0  2FFA               	goto	L12
  1538                           
  1539                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1540  17C1  1683               	bsf	3,5	;RP0=1, select bank1
  1541  17C2  1303               	bcf	3,6	;RP1=0, select bank1
  1542  17C3  0836               	movf	(sprintf@prec+1)^(0+128),w
  1543  17C4  00F1               	movwf	___wmul@multiplier+1
  1544  17C5  0835               	movf	sprintf@prec^(0+128),w
  1545  17C6  00F0               	movwf	___wmul@multiplier
  1546  17C7  300A               	movlw	10
  1547  17C8  00F2               	movwf	___wmul@multiplicand
  1548  17C9  3000               	movlw	0
  1549  17CA  00F3               	movwf	___wmul@multiplicand+1
  1550  17CB  160A  118A  2180  160A  118A  	fcall	___wmul
  1551  17D0  1283               	bcf	3,5	;RP0=0, select bank0
  1552  17D1  1303               	bcf	3,6	;RP1=0, select bank0
  1553  17D2  085A               	movf	sprintf@f,w
  1554  17D3  0084               	movwf	4
  1555  17D4  160A  118A  2000  160A  118A  	fcall	stringdir
  1556  17D9  0770               	addwf	?___wmul,w
  1557  17DA  00E0               	movwf	??_sprintf
  1558  17DB  3000               	movlw	0
  1559  17DC  1803               	skipnc
  1560  17DD  3001               	movlw	1
  1561  17DE  0771               	addwf	?___wmul+1,w
  1562  17DF  00E1               	movwf	??_sprintf+1
  1563  17E0  0860               	movf	??_sprintf,w
  1564  17E1  3ED0               	addlw	208
  1565  17E2  1683               	bsf	3,5	;RP0=1, select bank1
  1566  17E3  1303               	bcf	3,6	;RP1=0, select bank1
  1567  17E4  00B5               	movwf	sprintf@prec^(0+128)
  1568  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  1569  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  1570  17E7  0861               	movf	??_sprintf+1,w
  1571  17E8  1803               	skipnc
  1572  17E9  3E01               	addlw	1
  1573  17EA  3EFF               	addlw	255
  1574  17EB  1683               	bsf	3,5	;RP0=1, select bank1
  1575  17EC  1303               	bcf	3,6	;RP1=0, select bank1
  1576  17ED  00B6               	movwf	(sprintf@prec+1)^(0+128)
  1577  17EE  3001               	movlw	1
  1578  17EF  1283               	bcf	3,5	;RP0=0, select bank0
  1579  17F0  1303               	bcf	3,6	;RP1=0, select bank0
  1580  17F1  00E0               	movwf	??_sprintf
  1581  17F2  0860               	movf	??_sprintf,w
  1582  17F3  07DA               	addwf	sprintf@f,f
  1583  17F4  2FB2               	goto	l2433
  1584  17F5                     l2435:	
  1585                           ;doprnt.c: 624: }
  1586                           ;doprnt.c: 625: } else {
  1587                           
  1588                           
  1589                           ;doprnt.c: 626: prec = 0;
  1590  17F5  1683               	bsf	3,5	;RP0=1, select bank1
  1591  17F6  1303               	bcf	3,6	;RP1=0, select bank1
  1592  17F7  01B5               	clrf	sprintf@prec^(0+128)
  1593  17F8  01B6               	clrf	(sprintf@prec+1)^(0+128)
  1594                           
  1595                           ;doprnt.c: 628: flag |= 0x1000;
  1596  17F9  162F               	bsf	(sprintf@flag^(0+128)+1),4
  1597  17FA                     L12:	
  1598                           
  1599                           ;doprnt.c: 630: }
  1600                           ;doprnt.c: 635: switch(c = *f++) {
  1601  17FA  120A  118A  28C1   	goto	l2441
  1602  17FD                     L11:	
  1603  17FD                     L10:	
  1604  17FD  120A  158A  2BC3   	ljmp	l2709
  1605                           
  1606                           	psect	text2
  1607  0D65                     __ptext2:	
  1608 ;; *************** function _scale *****************
  1609 ;; Defined at:
  1610 ;;		line 425 in file "E:\software\pic\XC8\sources\common\doprnt.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  scl             1    wreg     char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  scl             1   31[BANK0 ] char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  3   23[BANK0 ] char 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       3       0       0       0
  1625 ;;      Locals:         0       4       0       0       0
  1626 ;;      Temps:          0       2       0       0       0
  1627 ;;      Totals:         0       9       0       0       0
  1628 ;;Total ram usage:        9 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    2
  1631 ;; This function calls:
  1632 ;;		___awdiv
  1633 ;;		___awmod
  1634 ;;		___bmul
  1635 ;;		___ftmul
  1636 ;; This function is called by:
  1637 ;;		_sprintf
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           
  1642                           ;psect for function _scale
  1643  0D65                     _scale:	
  1644                           
  1645                           ;incstack = 0
  1646                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1647                           ;scale@scl stored from wreg
  1648  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  1649  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  1650  0D67  00BF               	movwf	scale@scl
  1651                           
  1652                           ;doprnt.c: 428: if(scl < 0) {
  1653  0D68  1FBF               	btfss	scale@scl,7
  1654  0D69  2EB6               	goto	l2071
  1655                           
  1656                           ;doprnt.c: 429: scl = -scl;
  1657  0D6A  09BF               	comf	scale@scl,f
  1658  0D6B  0ABF               	incf	scale@scl,f
  1659                           
  1660                           ;doprnt.c: 430: if(scl>=110)
  1661  0D6C  083F               	movf	scale@scl,w
  1662  0D6D  3A80               	xorlw	128
  1663  0D6E  3E12               	addlw	-238
  1664  0D6F  1C03               	skipc
  1665  0D70  2E29               	goto	l2061
  1666                           
  1667                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1668  0D71  3003               	movlw	3
  1669  0D72  00BA               	movwf	??_scale
  1670  0D73  083A               	movf	??_scale,w
  1671  0D74  00A4               	movwf	___bmul@multiplicand
  1672  0D75  300A               	movlw	10
  1673  0D76  00F7               	movwf	___awdiv@divisor
  1674  0D77  3000               	movlw	0
  1675  0D78  00F8               	movwf	___awdiv@divisor+1
  1676  0D79  083F               	movf	scale@scl,w
  1677  0D7A  00F2               	movwf	___awmod@dividend
  1678  0D7B  01F3               	clrf	___awmod@dividend+1
  1679  0D7C  1BF2               	btfsc	___awmod@dividend,7
  1680  0D7D  03F3               	decf	___awmod@dividend+1,f
  1681  0D7E  3064               	movlw	100
  1682  0D7F  00F0               	movwf	___awmod@divisor
  1683  0D80  3000               	movlw	0
  1684  0D81  00F1               	movwf	___awmod@divisor+1
  1685  0D82  160A  118A  2222  120A  158A  	fcall	___awmod
  1686  0D87  0871               	movf	?___awmod+1,w
  1687  0D88  00FA               	movwf	___awdiv@dividend+1
  1688  0D89  0870               	movf	?___awmod,w
  1689  0D8A  00F9               	movwf	___awdiv@dividend
  1690  0D8B  160A  118A  2316  120A  158A  	fcall	___awdiv
  1691  0D90  0877               	movf	?___awdiv,w
  1692  0D91  3E09               	addlw	9
  1693  0D92  160A  118A  20F9  120A  158A  	fcall	___bmul
  1694  0D97  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  1695  0D98  0084               	movwf	4
  1696  0D99  160A  118A  2000  120A  158A  	fcall	stringdir
  1697  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0DA0  00A7               	movwf	___ftmul@f1
  1700  0DA1  160A  118A  2000  120A  158A  	fcall	stringdir
  1701  0DA6  00A8               	movwf	___ftmul@f1+1
  1702  0DA7  160A  118A  2000  120A  158A  	fcall	stringdir
  1703  0DAC  00A9               	movwf	___ftmul@f1+2
  1704  0DAD  3003               	movlw	3
  1705  0DAE  00BB               	movwf	??_scale+1
  1706  0DAF  083B               	movf	??_scale+1,w
  1707  0DB0  00A4               	movwf	___bmul@multiplicand
  1708  0DB1  3064               	movlw	100
  1709  0DB2  00F7               	movwf	___awdiv@divisor
  1710  0DB3  3000               	movlw	0
  1711  0DB4  00F8               	movwf	___awdiv@divisor+1
  1712  0DB5  083F               	movf	scale@scl,w
  1713  0DB6  00F9               	movwf	___awdiv@dividend
  1714  0DB7  01FA               	clrf	___awdiv@dividend+1
  1715  0DB8  1BF9               	btfsc	___awdiv@dividend,7
  1716  0DB9  03FA               	decf	___awdiv@dividend+1,f
  1717  0DBA  160A  118A  2316  120A  158A  	fcall	___awdiv
  1718  0DBF  0877               	movf	?___awdiv,w
  1719  0DC0  3E12               	addlw	18
  1720  0DC1  160A  118A  20F9  120A  158A  	fcall	___bmul
  1721  0DC6  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  1722  0DC7  0084               	movwf	4
  1723  0DC8  160A  118A  2000  120A  158A  	fcall	stringdir
  1724  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0DCF  00AA               	movwf	___ftmul@f2
  1727  0DD0  160A  118A  2000  120A  158A  	fcall	stringdir
  1728  0DD5  00AB               	movwf	___ftmul@f2+1
  1729  0DD6  160A  118A  2000  120A  158A  	fcall	stringdir
  1730  0DDB  00AC               	movwf	___ftmul@f2+2
  1731  0DDC  120A  158A  2035  120A  158A  	fcall	___ftmul
  1732  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0DE3  0827               	movf	?___ftmul,w
  1735  0DE4  00BC               	movwf	_scale$561
  1736  0DE5  0828               	movf	?___ftmul+1,w
  1737  0DE6  00BD               	movwf	_scale$561+1
  1738  0DE7  0829               	movf	?___ftmul+2,w
  1739  0DE8  00BE               	movwf	_scale$561+2
  1740                           
  1741                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1742  0DE9  3003               	movlw	3
  1743  0DEA  00BA               	movwf	??_scale
  1744  0DEB  083A               	movf	??_scale,w
  1745  0DEC  00A4               	movwf	___bmul@multiplicand
  1746  0DED  083F               	movf	scale@scl,w
  1747  0DEE  00F2               	movwf	___awmod@dividend
  1748  0DEF  01F3               	clrf	___awmod@dividend+1
  1749  0DF0  1BF2               	btfsc	___awmod@dividend,7
  1750  0DF1  03F3               	decf	___awmod@dividend+1,f
  1751  0DF2  300A               	movlw	10
  1752  0DF3  00F0               	movwf	___awmod@divisor
  1753  0DF4  3000               	movlw	0
  1754  0DF5  00F1               	movwf	___awmod@divisor+1
  1755  0DF6  160A  118A  2222  120A  158A  	fcall	___awmod
  1756  0DFB  0870               	movf	?___awmod,w
  1757  0DFC  160A  118A  20F9  120A  158A  	fcall	___bmul
  1758  0E01  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  1759  0E02  0084               	movwf	4
  1760  0E03  160A  118A  2000  120A  158A  	fcall	stringdir
  1761  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  1762  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  1763  0E0A  00A7               	movwf	___ftmul@f1
  1764  0E0B  160A  118A  2000  120A  158A  	fcall	stringdir
  1765  0E10  00A8               	movwf	___ftmul@f1+1
  1766  0E11  160A  118A  2000  120A  158A  	fcall	stringdir
  1767  0E16  00A9               	movwf	___ftmul@f1+2
  1768  0E17  083C               	movf	_scale$561,w
  1769  0E18  00AA               	movwf	___ftmul@f2
  1770  0E19  083D               	movf	_scale$561+1,w
  1771  0E1A  00AB               	movwf	___ftmul@f2+1
  1772  0E1B  083E               	movf	_scale$561+2,w
  1773  0E1C  00AC               	movwf	___ftmul@f2+2
  1774  0E1D  120A  158A  2035   	fcall	___ftmul
  1775  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0E22  0827               	movf	?___ftmul,w
  1778  0E23  00B7               	movwf	?_scale
  1779  0E24  0828               	movf	?___ftmul+1,w
  1780  0E25  00B8               	movwf	?_scale+1
  1781  0E26  0829               	movf	?___ftmul+2,w
  1782  0E27  00B9               	movwf	?_scale+2
  1783  0E28  0008               	return
  1784  0E29                     l2061:	
  1785                           
  1786                           ;doprnt.c: 432: else if(scl > 10)
  1787  0E29  083F               	movf	scale@scl,w
  1788  0E2A  3A80               	xorlw	128
  1789  0E2B  3E75               	addlw	-139
  1790  0E2C  1C03               	skipc
  1791  0E2D  2E97               	goto	l2067
  1792                           
  1793                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1794  0E2E  3003               	movlw	3
  1795  0E2F  00BA               	movwf	??_scale
  1796  0E30  083A               	movf	??_scale,w
  1797  0E31  00A4               	movwf	___bmul@multiplicand
  1798  0E32  083F               	movf	scale@scl,w
  1799  0E33  00F2               	movwf	___awmod@dividend
  1800  0E34  01F3               	clrf	___awmod@dividend+1
  1801  0E35  1BF2               	btfsc	___awmod@dividend,7
  1802  0E36  03F3               	decf	___awmod@dividend+1,f
  1803  0E37  300A               	movlw	10
  1804  0E38  00F0               	movwf	___awmod@divisor
  1805  0E39  3000               	movlw	0
  1806  0E3A  00F1               	movwf	___awmod@divisor+1
  1807  0E3B  160A  118A  2222  120A  158A  	fcall	___awmod
  1808  0E40  0870               	movf	?___awmod,w
  1809  0E41  160A  118A  20F9  120A  158A  	fcall	___bmul
  1810  0E46  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  1811  0E47  0084               	movwf	4
  1812  0E48  160A  118A  2000  120A  158A  	fcall	stringdir
  1813  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  1814  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  1815  0E4F  00A7               	movwf	___ftmul@f1
  1816  0E50  160A  118A  2000  120A  158A  	fcall	stringdir
  1817  0E55  00A8               	movwf	___ftmul@f1+1
  1818  0E56  160A  118A  2000  120A  158A  	fcall	stringdir
  1819  0E5B  00A9               	movwf	___ftmul@f1+2
  1820  0E5C  3003               	movlw	3
  1821  0E5D  00BB               	movwf	??_scale+1
  1822  0E5E  083B               	movf	??_scale+1,w
  1823  0E5F  00A4               	movwf	___bmul@multiplicand
  1824  0E60  300A               	movlw	10
  1825  0E61  00F7               	movwf	___awdiv@divisor
  1826  0E62  3000               	movlw	0
  1827  0E63  00F8               	movwf	___awdiv@divisor+1
  1828  0E64  083F               	movf	scale@scl,w
  1829  0E65  00F9               	movwf	___awdiv@dividend
  1830  0E66  01FA               	clrf	___awdiv@dividend+1
  1831  0E67  1BF9               	btfsc	___awdiv@dividend,7
  1832  0E68  03FA               	decf	___awdiv@dividend+1,f
  1833  0E69  160A  118A  2316  120A  158A  	fcall	___awdiv
  1834  0E6E  0877               	movf	?___awdiv,w
  1835  0E6F  3E09               	addlw	9
  1836  0E70  160A  118A  20F9  120A  158A  	fcall	___bmul
  1837  0E75  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  1838  0E76  0084               	movwf	4
  1839  0E77  160A  118A  2000  120A  158A  	fcall	stringdir
  1840  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  1841  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  1842  0E7E  00AA               	movwf	___ftmul@f2
  1843  0E7F  160A  118A  2000  120A  158A  	fcall	stringdir
  1844  0E84  00AB               	movwf	___ftmul@f2+1
  1845  0E85  160A  118A  2000  120A  158A  	fcall	stringdir
  1846  0E8A  00AC               	movwf	___ftmul@f2+2
  1847  0E8B  120A  158A  2035   	fcall	___ftmul
  1848  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0E90  0827               	movf	?___ftmul,w
  1851  0E91  00B7               	movwf	?_scale
  1852  0E92  0828               	movf	?___ftmul+1,w
  1853  0E93  00B8               	movwf	?_scale+1
  1854  0E94  0829               	movf	?___ftmul+2,w
  1855  0E95  00B9               	movwf	?_scale+2
  1856  0E96  0008               	return
  1857  0E97                     l2067:	
  1858                           
  1859                           ;doprnt.c: 434: return _npowers_[scl];
  1860  0E97  3003               	movlw	3
  1861  0E98  00BA               	movwf	??_scale
  1862  0E99  083A               	movf	??_scale,w
  1863  0E9A  00A4               	movwf	___bmul@multiplicand
  1864  0E9B  083F               	movf	scale@scl,w
  1865  0E9C  160A  118A  20F9  120A  158A  	fcall	___bmul
  1866  0EA1  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  1867  0EA2  0084               	movwf	4
  1868  0EA3  160A  118A  2000  120A  158A  	fcall	stringdir
  1869  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0EAA  00B7               	movwf	?_scale
  1872  0EAB  160A  118A  2000  120A  158A  	fcall	stringdir
  1873  0EB0  00B8               	movwf	?_scale+1
  1874  0EB1  160A  118A  2000   	fcall	stringdir
  1875  0EB4  00B9               	movwf	?_scale+2
  1876  0EB5  0008               	return
  1877  0EB6                     l2071:	
  1878                           
  1879                           ;doprnt.c: 435: }
  1880                           ;doprnt.c: 436: if(scl>=110)
  1881  0EB6  083F               	movf	scale@scl,w
  1882  0EB7  3A80               	xorlw	128
  1883  0EB8  3E12               	addlw	-238
  1884  0EB9  1C03               	skipc
  1885  0EBA  2F73               	goto	l2079
  1886                           
  1887                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  1888  0EBB  3003               	movlw	3
  1889  0EBC  00BA               	movwf	??_scale
  1890  0EBD  083A               	movf	??_scale,w
  1891  0EBE  00A4               	movwf	___bmul@multiplicand
  1892  0EBF  300A               	movlw	10
  1893  0EC0  00F7               	movwf	___awdiv@divisor
  1894  0EC1  3000               	movlw	0
  1895  0EC2  00F8               	movwf	___awdiv@divisor+1
  1896  0EC3  083F               	movf	scale@scl,w
  1897  0EC4  00F2               	movwf	___awmod@dividend
  1898  0EC5  01F3               	clrf	___awmod@dividend+1
  1899  0EC6  1BF2               	btfsc	___awmod@dividend,7
  1900  0EC7  03F3               	decf	___awmod@dividend+1,f
  1901  0EC8  3064               	movlw	100
  1902  0EC9  00F0               	movwf	___awmod@divisor
  1903  0ECA  3000               	movlw	0
  1904  0ECB  00F1               	movwf	___awmod@divisor+1
  1905  0ECC  160A  118A  2222  120A  158A  	fcall	___awmod
  1906  0ED1  0871               	movf	?___awmod+1,w
  1907  0ED2  00FA               	movwf	___awdiv@dividend+1
  1908  0ED3  0870               	movf	?___awmod,w
  1909  0ED4  00F9               	movwf	___awdiv@dividend
  1910  0ED5  160A  118A  2316  120A  158A  	fcall	___awdiv
  1911  0EDA  0877               	movf	?___awdiv,w
  1912  0EDB  3E09               	addlw	9
  1913  0EDC  160A  118A  20F9  120A  158A  	fcall	___bmul
  1914  0EE1  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  1915  0EE2  0084               	movwf	4
  1916  0EE3  160A  118A  2000  120A  158A  	fcall	stringdir
  1917  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  1919  0EEA  00A7               	movwf	___ftmul@f1
  1920  0EEB  160A  118A  2000  120A  158A  	fcall	stringdir
  1921  0EF0  00A8               	movwf	___ftmul@f1+1
  1922  0EF1  160A  118A  2000  120A  158A  	fcall	stringdir
  1923  0EF6  00A9               	movwf	___ftmul@f1+2
  1924  0EF7  3003               	movlw	3
  1925  0EF8  00BB               	movwf	??_scale+1
  1926  0EF9  083B               	movf	??_scale+1,w
  1927  0EFA  00A4               	movwf	___bmul@multiplicand
  1928  0EFB  3064               	movlw	100
  1929  0EFC  00F7               	movwf	___awdiv@divisor
  1930  0EFD  3000               	movlw	0
  1931  0EFE  00F8               	movwf	___awdiv@divisor+1
  1932  0EFF  083F               	movf	scale@scl,w
  1933  0F00  00F9               	movwf	___awdiv@dividend
  1934  0F01  01FA               	clrf	___awdiv@dividend+1
  1935  0F02  1BF9               	btfsc	___awdiv@dividend,7
  1936  0F03  03FA               	decf	___awdiv@dividend+1,f
  1937  0F04  160A  118A  2316  120A  158A  	fcall	___awdiv
  1938  0F09  0877               	movf	?___awdiv,w
  1939  0F0A  3E12               	addlw	18
  1940  0F0B  160A  118A  20F9  120A  158A  	fcall	___bmul
  1941  0F10  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  1942  0F11  0084               	movwf	4
  1943  0F12  160A  118A  2000  120A  158A  	fcall	stringdir
  1944  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0F19  00AA               	movwf	___ftmul@f2
  1947  0F1A  160A  118A  2000  120A  158A  	fcall	stringdir
  1948  0F1F  00AB               	movwf	___ftmul@f2+1
  1949  0F20  160A  118A  2000  120A  158A  	fcall	stringdir
  1950  0F25  00AC               	movwf	___ftmul@f2+2
  1951  0F26  120A  158A  2035  120A  158A  	fcall	___ftmul
  1952  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0F2D  0827               	movf	?___ftmul,w
  1955  0F2E  00BC               	movwf	_scale$561
  1956  0F2F  0828               	movf	?___ftmul+1,w
  1957  0F30  00BD               	movwf	_scale$561+1
  1958  0F31  0829               	movf	?___ftmul+2,w
  1959  0F32  00BE               	movwf	_scale$561+2
  1960                           
  1961                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  1962  0F33  3003               	movlw	3
  1963  0F34  00BA               	movwf	??_scale
  1964  0F35  083A               	movf	??_scale,w
  1965  0F36  00A4               	movwf	___bmul@multiplicand
  1966  0F37  083F               	movf	scale@scl,w
  1967  0F38  00F2               	movwf	___awmod@dividend
  1968  0F39  01F3               	clrf	___awmod@dividend+1
  1969  0F3A  1BF2               	btfsc	___awmod@dividend,7
  1970  0F3B  03F3               	decf	___awmod@dividend+1,f
  1971  0F3C  300A               	movlw	10
  1972  0F3D  00F0               	movwf	___awmod@divisor
  1973  0F3E  3000               	movlw	0
  1974  0F3F  00F1               	movwf	___awmod@divisor+1
  1975  0F40  160A  118A  2222  120A  158A  	fcall	___awmod
  1976  0F45  0870               	movf	?___awmod,w
  1977  0F46  160A  118A  20F9  120A  158A  	fcall	___bmul
  1978  0F4B  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  1979  0F4C  0084               	movwf	4
  1980  0F4D  160A  118A  2000  120A  158A  	fcall	stringdir
  1981  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  1983  0F54  00A7               	movwf	___ftmul@f1
  1984  0F55  160A  118A  2000  120A  158A  	fcall	stringdir
  1985  0F5A  00A8               	movwf	___ftmul@f1+1
  1986  0F5B  160A  118A  2000  120A  158A  	fcall	stringdir
  1987  0F60  00A9               	movwf	___ftmul@f1+2
  1988  0F61  083C               	movf	_scale$561,w
  1989  0F62  00AA               	movwf	___ftmul@f2
  1990  0F63  083D               	movf	_scale$561+1,w
  1991  0F64  00AB               	movwf	___ftmul@f2+1
  1992  0F65  083E               	movf	_scale$561+2,w
  1993  0F66  00AC               	movwf	___ftmul@f2+2
  1994  0F67  120A  158A  2035   	fcall	___ftmul
  1995  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  1996  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  1997  0F6C  0827               	movf	?___ftmul,w
  1998  0F6D  00B7               	movwf	?_scale
  1999  0F6E  0828               	movf	?___ftmul+1,w
  2000  0F6F  00B8               	movwf	?_scale+1
  2001  0F70  0829               	movf	?___ftmul+2,w
  2002  0F71  00B9               	movwf	?_scale+2
  2003  0F72  0008               	return
  2004  0F73                     l2079:	
  2005                           
  2006                           ;doprnt.c: 438: else if(scl > 10)
  2007  0F73  083F               	movf	scale@scl,w
  2008  0F74  3A80               	xorlw	128
  2009  0F75  3E75               	addlw	-139
  2010  0F76  1C03               	skipc
  2011  0F77  2FE1               	goto	l2085
  2012                           
  2013                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2014  0F78  3003               	movlw	3
  2015  0F79  00BA               	movwf	??_scale
  2016  0F7A  083A               	movf	??_scale,w
  2017  0F7B  00A4               	movwf	___bmul@multiplicand
  2018  0F7C  083F               	movf	scale@scl,w
  2019  0F7D  00F2               	movwf	___awmod@dividend
  2020  0F7E  01F3               	clrf	___awmod@dividend+1
  2021  0F7F  1BF2               	btfsc	___awmod@dividend,7
  2022  0F80  03F3               	decf	___awmod@dividend+1,f
  2023  0F81  300A               	movlw	10
  2024  0F82  00F0               	movwf	___awmod@divisor
  2025  0F83  3000               	movlw	0
  2026  0F84  00F1               	movwf	___awmod@divisor+1
  2027  0F85  160A  118A  2222  120A  158A  	fcall	___awmod
  2028  0F8A  0870               	movf	?___awmod,w
  2029  0F8B  160A  118A  20F9  120A  158A  	fcall	___bmul
  2030  0F90  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  2031  0F91  0084               	movwf	4
  2032  0F92  160A  118A  2000  120A  158A  	fcall	stringdir
  2033  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0F99  00A7               	movwf	___ftmul@f1
  2036  0F9A  160A  118A  2000  120A  158A  	fcall	stringdir
  2037  0F9F  00A8               	movwf	___ftmul@f1+1
  2038  0FA0  160A  118A  2000  120A  158A  	fcall	stringdir
  2039  0FA5  00A9               	movwf	___ftmul@f1+2
  2040  0FA6  3003               	movlw	3
  2041  0FA7  00BB               	movwf	??_scale+1
  2042  0FA8  083B               	movf	??_scale+1,w
  2043  0FA9  00A4               	movwf	___bmul@multiplicand
  2044  0FAA  300A               	movlw	10
  2045  0FAB  00F7               	movwf	___awdiv@divisor
  2046  0FAC  3000               	movlw	0
  2047  0FAD  00F8               	movwf	___awdiv@divisor+1
  2048  0FAE  083F               	movf	scale@scl,w
  2049  0FAF  00F9               	movwf	___awdiv@dividend
  2050  0FB0  01FA               	clrf	___awdiv@dividend+1
  2051  0FB1  1BF9               	btfsc	___awdiv@dividend,7
  2052  0FB2  03FA               	decf	___awdiv@dividend+1,f
  2053  0FB3  160A  118A  2316  120A  158A  	fcall	___awdiv
  2054  0FB8  0877               	movf	?___awdiv,w
  2055  0FB9  3E09               	addlw	9
  2056  0FBA  160A  118A  20F9  120A  158A  	fcall	___bmul
  2057  0FBF  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  2058  0FC0  0084               	movwf	4
  2059  0FC1  160A  118A  2000  120A  158A  	fcall	stringdir
  2060  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  2062  0FC8  00AA               	movwf	___ftmul@f2
  2063  0FC9  160A  118A  2000  120A  158A  	fcall	stringdir
  2064  0FCE  00AB               	movwf	___ftmul@f2+1
  2065  0FCF  160A  118A  2000  120A  158A  	fcall	stringdir
  2066  0FD4  00AC               	movwf	___ftmul@f2+2
  2067  0FD5  120A  158A  2035   	fcall	___ftmul
  2068  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0FDA  0827               	movf	?___ftmul,w
  2071  0FDB  00B7               	movwf	?_scale
  2072  0FDC  0828               	movf	?___ftmul+1,w
  2073  0FDD  00B8               	movwf	?_scale+1
  2074  0FDE  0829               	movf	?___ftmul+2,w
  2075  0FDF  00B9               	movwf	?_scale+2
  2076  0FE0  0008               	return
  2077  0FE1                     l2085:	
  2078                           
  2079                           ;doprnt.c: 440: return _powers_[scl];
  2080  0FE1  3003               	movlw	3
  2081  0FE2  00BA               	movwf	??_scale
  2082  0FE3  083A               	movf	??_scale,w
  2083  0FE4  00A4               	movwf	___bmul@multiplicand
  2084  0FE5  083F               	movf	scale@scl,w
  2085  0FE6  160A  118A  20F9  120A  158A  	fcall	___bmul
  2086  0FEB  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  2087  0FEC  0084               	movwf	4
  2088  0FED  160A  118A  2000  120A  158A  	fcall	stringdir
  2089  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2090  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2091  0FF4  00B7               	movwf	?_scale
  2092  0FF5  160A  118A  2000  120A  158A  	fcall	stringdir
  2093  0FFA  00B8               	movwf	?_scale+1
  2094  0FFB  160A  118A  2000   	fcall	stringdir
  2095  0FFE  00B9               	movwf	?_scale+2
  2096  0FFF  0008               	return
  2097  1000                     __end_of_scale:	
  2098                           
  2099                           	psect	text3
  2100  0003                     __ptext3:	
  2101 ;; *************** function _isdigit *****************
  2102 ;; Defined at:
  2103 ;;		line 8 in file "E:\software\pic\XC8\sources\common\isdigit.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  c               1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  c               1    1[COMMON] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;		None               void
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2117 ;;      Params:         0       0       0       0       0
  2118 ;;      Locals:         2       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0
  2120 ;;      Totals:         2       0       0       0       0
  2121 ;;Total ram usage:        2 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_sprintf
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           
  2131                           ;psect for function _isdigit
  2132  0003                     _isdigit:	
  2133                           
  2134                           ;incstack = 0
  2135                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2136                           ;isdigit@c stored from wreg
  2137  0003  00F1               	movwf	isdigit@c
  2138  0004  01F0               	clrf	_isdigit$335
  2139  0005  303A               	movlw	58
  2140  0006  0271               	subwf	isdigit@c,w
  2141  0007  1803               	skipnc
  2142  0008  280F               	goto	l2097
  2143  0009  3030               	movlw	48
  2144  000A  0271               	subwf	isdigit@c,w
  2145  000B  1C03               	skipc
  2146  000C  280F               	goto	l2097
  2147  000D  01F0               	clrf	_isdigit$335
  2148  000E  0AF0               	incf	_isdigit$335,f
  2149  000F                     l2097:	
  2150  000F  0C70               	rrf	_isdigit$335,w
  2151  0010  0008               	return
  2152  0011                     __end_of_isdigit:	
  2153                           
  2154                           	psect	text4
  2155  0BCB                     __ptext4:	
  2156 ;; *************** function _fround *****************
  2157 ;; Defined at:
  2158 ;;		line 409 in file "E:\software\pic\XC8\sources\common\doprnt.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  prec            1    wreg     unsigned char 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  prec            1   38[BANK0 ] unsigned char 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  3   23[BANK0 ] unsigned char 
  2165 ;; Registers used:
  2166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2172 ;;      Params:         0       3       0       0       0
  2173 ;;      Locals:         0       7       0       0       0
  2174 ;;      Temps:          0       6       0       0       0
  2175 ;;      Totals:         0      16       0       0       0
  2176 ;;Total ram usage:       16 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    2
  2179 ;; This function calls:
  2180 ;;		___awdiv
  2181 ;;		___awmod
  2182 ;;		___bmul
  2183 ;;		___ftmul
  2184 ;; This function is called by:
  2185 ;;		_sprintf
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           
  2190                           ;psect for function _fround
  2191  0BCB                     _fround:	
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2195                           ;fround@prec stored from wreg
  2196  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0BCD  00C6               	movwf	fround@prec
  2199                           
  2200                           ;doprnt.c: 413: if(prec>=110)
  2201  0BCE  306E               	movlw	110
  2202  0BCF  0246               	subwf	fround@prec,w
  2203  0BD0  1C03               	skipc
  2204  0BD1  2CA9               	goto	l2037
  2205                           
  2206                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2207  0BD2  3003               	movlw	3
  2208  0BD3  00BA               	movwf	??_fround
  2209  0BD4  083A               	movf	??_fround,w
  2210  0BD5  00A4               	movwf	___bmul@multiplicand
  2211  0BD6  300A               	movlw	10
  2212  0BD7  00F7               	movwf	___awdiv@divisor
  2213  0BD8  3000               	movlw	0
  2214  0BD9  00F8               	movwf	___awdiv@divisor+1
  2215  0BDA  0846               	movf	fround@prec,w
  2216  0BDB  00BB               	movwf	??_fround+1
  2217  0BDC  01BC               	clrf	??_fround+2
  2218  0BDD  083B               	movf	??_fround+1,w
  2219  0BDE  00F2               	movwf	___awmod@dividend
  2220  0BDF  083C               	movf	??_fround+2,w
  2221  0BE0  00F3               	movwf	___awmod@dividend+1
  2222  0BE1  3064               	movlw	100
  2223  0BE2  00F0               	movwf	___awmod@divisor
  2224  0BE3  3000               	movlw	0
  2225  0BE4  00F1               	movwf	___awmod@divisor+1
  2226  0BE5  160A  118A  2222  120A  158A  	fcall	___awmod
  2227  0BEA  0871               	movf	?___awmod+1,w
  2228  0BEB  00FA               	movwf	___awdiv@dividend+1
  2229  0BEC  0870               	movf	?___awmod,w
  2230  0BED  00F9               	movwf	___awdiv@dividend
  2231  0BEE  160A  118A  2316  120A  158A  	fcall	___awdiv
  2232  0BF3  0877               	movf	?___awdiv,w
  2233  0BF4  3E09               	addlw	9
  2234  0BF5  160A  118A  20F9  120A  158A  	fcall	___bmul
  2235  0BFA  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2236  0BFB  0084               	movwf	4
  2237  0BFC  160A  118A  2000  120A  158A  	fcall	stringdir
  2238  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  2239  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  2240  0C03  00A7               	movwf	___ftmul@f1
  2241  0C04  160A  118A  2000  120A  158A  	fcall	stringdir
  2242  0C09  00A8               	movwf	___ftmul@f1+1
  2243  0C0A  160A  118A  2000  120A  158A  	fcall	stringdir
  2244  0C0F  00A9               	movwf	___ftmul@f1+2
  2245  0C10  3003               	movlw	3
  2246  0C11  00BD               	movwf	??_fround+3
  2247  0C12  083D               	movf	??_fround+3,w
  2248  0C13  00A4               	movwf	___bmul@multiplicand
  2249  0C14  3064               	movlw	100
  2250  0C15  00F7               	movwf	___awdiv@divisor
  2251  0C16  3000               	movlw	0
  2252  0C17  00F8               	movwf	___awdiv@divisor+1
  2253  0C18  0846               	movf	fround@prec,w
  2254  0C19  00BE               	movwf	??_fround+4
  2255  0C1A  01BF               	clrf	??_fround+5
  2256  0C1B  083E               	movf	??_fround+4,w
  2257  0C1C  00F9               	movwf	___awdiv@dividend
  2258  0C1D  083F               	movf	??_fround+5,w
  2259  0C1E  00FA               	movwf	___awdiv@dividend+1
  2260  0C1F  160A  118A  2316  120A  158A  	fcall	___awdiv
  2261  0C24  0877               	movf	?___awdiv,w
  2262  0C25  3E12               	addlw	18
  2263  0C26  160A  118A  20F9  120A  158A  	fcall	___bmul
  2264  0C2B  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2265  0C2C  0084               	movwf	4
  2266  0C2D  160A  118A  2000  120A  158A  	fcall	stringdir
  2267  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  2268  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  2269  0C34  00AA               	movwf	___ftmul@f2
  2270  0C35  160A  118A  2000  120A  158A  	fcall	stringdir
  2271  0C3A  00AB               	movwf	___ftmul@f2+1
  2272  0C3B  160A  118A  2000  120A  158A  	fcall	stringdir
  2273  0C40  00AC               	movwf	___ftmul@f2+2
  2274  0C41  120A  158A  2035  120A  158A  	fcall	___ftmul
  2275  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  2276  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  2277  0C48  0827               	movf	?___ftmul,w
  2278  0C49  00C3               	movwf	_fround$559
  2279  0C4A  0828               	movf	?___ftmul+1,w
  2280  0C4B  00C4               	movwf	_fround$559+1
  2281  0C4C  0829               	movf	?___ftmul+2,w
  2282  0C4D  00C5               	movwf	_fround$559+2
  2283                           
  2284                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2285  0C4E  3003               	movlw	3
  2286  0C4F  00BA               	movwf	??_fround
  2287  0C50  083A               	movf	??_fround,w
  2288  0C51  00A4               	movwf	___bmul@multiplicand
  2289  0C52  0846               	movf	fround@prec,w
  2290  0C53  00BB               	movwf	??_fround+1
  2291  0C54  01BC               	clrf	??_fround+2
  2292  0C55  083B               	movf	??_fround+1,w
  2293  0C56  00F2               	movwf	___awmod@dividend
  2294  0C57  083C               	movf	??_fround+2,w
  2295  0C58  00F3               	movwf	___awmod@dividend+1
  2296  0C59  300A               	movlw	10
  2297  0C5A  00F0               	movwf	___awmod@divisor
  2298  0C5B  3000               	movlw	0
  2299  0C5C  00F1               	movwf	___awmod@divisor+1
  2300  0C5D  160A  118A  2222  120A  158A  	fcall	___awmod
  2301  0C62  0870               	movf	?___awmod,w
  2302  0C63  160A  118A  20F9  120A  158A  	fcall	___bmul
  2303  0C68  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2304  0C69  0084               	movwf	4
  2305  0C6A  160A  118A  2000  120A  158A  	fcall	stringdir
  2306  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0C71  00A7               	movwf	___ftmul@f1
  2309  0C72  160A  118A  2000  120A  158A  	fcall	stringdir
  2310  0C77  00A8               	movwf	___ftmul@f1+1
  2311  0C78  160A  118A  2000  120A  158A  	fcall	stringdir
  2312  0C7D  00A9               	movwf	___ftmul@f1+2
  2313  0C7E  0843               	movf	_fround$559,w
  2314  0C7F  00AA               	movwf	___ftmul@f2
  2315  0C80  0844               	movf	_fround$559+1,w
  2316  0C81  00AB               	movwf	___ftmul@f2+1
  2317  0C82  0845               	movf	_fround$559+2,w
  2318  0C83  00AC               	movwf	___ftmul@f2+2
  2319  0C84  120A  158A  2035  120A  158A  	fcall	___ftmul
  2320  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  2321  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  2322  0C8B  0827               	movf	?___ftmul,w
  2323  0C8C  00C0               	movwf	_fround$560
  2324  0C8D  0828               	movf	?___ftmul+1,w
  2325  0C8E  00C1               	movwf	_fround$560+1
  2326  0C8F  0829               	movf	?___ftmul+2,w
  2327  0C90  00C2               	movwf	_fround$560+2
  2328                           
  2329                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2330  0C91  3000               	movlw	0
  2331  0C92  00A7               	movwf	___ftmul@f1
  2332  0C93  3000               	movlw	0
  2333  0C94  00A8               	movwf	___ftmul@f1+1
  2334  0C95  303F               	movlw	63
  2335  0C96  00A9               	movwf	___ftmul@f1+2
  2336  0C97  0840               	movf	_fround$560,w
  2337  0C98  00AA               	movwf	___ftmul@f2
  2338  0C99  0841               	movf	_fround$560+1,w
  2339  0C9A  00AB               	movwf	___ftmul@f2+1
  2340  0C9B  0842               	movf	_fround$560+2,w
  2341  0C9C  00AC               	movwf	___ftmul@f2+2
  2342  0C9D  120A  158A  2035   	fcall	___ftmul
  2343  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0CA2  0827               	movf	?___ftmul,w
  2346  0CA3  00B7               	movwf	?_fround
  2347  0CA4  0828               	movf	?___ftmul+1,w
  2348  0CA5  00B8               	movwf	?_fround+1
  2349  0CA6  0829               	movf	?___ftmul+2,w
  2350  0CA7  00B9               	movwf	?_fround+2
  2351  0CA8  0008               	return
  2352  0CA9                     l2037:	
  2353                           
  2354                           ;doprnt.c: 415: else if(prec > 10)
  2355  0CA9  300B               	movlw	11
  2356  0CAA  0246               	subwf	fround@prec,w
  2357  0CAB  1C03               	skipc
  2358  0CAC  2D33               	goto	l2045
  2359                           
  2360                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2361  0CAD  3003               	movlw	3
  2362  0CAE  00BA               	movwf	??_fround
  2363  0CAF  083A               	movf	??_fround,w
  2364  0CB0  00A4               	movwf	___bmul@multiplicand
  2365  0CB1  0846               	movf	fround@prec,w
  2366  0CB2  00BB               	movwf	??_fround+1
  2367  0CB3  01BC               	clrf	??_fround+2
  2368  0CB4  083B               	movf	??_fround+1,w
  2369  0CB5  00F2               	movwf	___awmod@dividend
  2370  0CB6  083C               	movf	??_fround+2,w
  2371  0CB7  00F3               	movwf	___awmod@dividend+1
  2372  0CB8  300A               	movlw	10
  2373  0CB9  00F0               	movwf	___awmod@divisor
  2374  0CBA  3000               	movlw	0
  2375  0CBB  00F1               	movwf	___awmod@divisor+1
  2376  0CBC  160A  118A  2222  120A  158A  	fcall	___awmod
  2377  0CC1  0870               	movf	?___awmod,w
  2378  0CC2  160A  118A  20F9  120A  158A  	fcall	___bmul
  2379  0CC7  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2380  0CC8  0084               	movwf	4
  2381  0CC9  160A  118A  2000  120A  158A  	fcall	stringdir
  2382  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  2383  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  2384  0CD0  00A7               	movwf	___ftmul@f1
  2385  0CD1  160A  118A  2000  120A  158A  	fcall	stringdir
  2386  0CD6  00A8               	movwf	___ftmul@f1+1
  2387  0CD7  160A  118A  2000  120A  158A  	fcall	stringdir
  2388  0CDC  00A9               	movwf	___ftmul@f1+2
  2389  0CDD  3003               	movlw	3
  2390  0CDE  00BD               	movwf	??_fround+3
  2391  0CDF  083D               	movf	??_fround+3,w
  2392  0CE0  00A4               	movwf	___bmul@multiplicand
  2393  0CE1  300A               	movlw	10
  2394  0CE2  00F7               	movwf	___awdiv@divisor
  2395  0CE3  3000               	movlw	0
  2396  0CE4  00F8               	movwf	___awdiv@divisor+1
  2397  0CE5  0846               	movf	fround@prec,w
  2398  0CE6  00BE               	movwf	??_fround+4
  2399  0CE7  01BF               	clrf	??_fround+5
  2400  0CE8  083E               	movf	??_fround+4,w
  2401  0CE9  00F9               	movwf	___awdiv@dividend
  2402  0CEA  083F               	movf	??_fround+5,w
  2403  0CEB  00FA               	movwf	___awdiv@dividend+1
  2404  0CEC  160A  118A  2316  120A  158A  	fcall	___awdiv
  2405  0CF1  0877               	movf	?___awdiv,w
  2406  0CF2  3E09               	addlw	9
  2407  0CF3  160A  118A  20F9  120A  158A  	fcall	___bmul
  2408  0CF8  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2409  0CF9  0084               	movwf	4
  2410  0CFA  160A  118A  2000  120A  158A  	fcall	stringdir
  2411  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0D01  00AA               	movwf	___ftmul@f2
  2414  0D02  160A  118A  2000  120A  158A  	fcall	stringdir
  2415  0D07  00AB               	movwf	___ftmul@f2+1
  2416  0D08  160A  118A  2000  120A  158A  	fcall	stringdir
  2417  0D0D  00AC               	movwf	___ftmul@f2+2
  2418  0D0E  120A  158A  2035  120A  158A  	fcall	___ftmul
  2419  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  2420  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  2421  0D15  0827               	movf	?___ftmul,w
  2422  0D16  00C3               	movwf	_fround$559
  2423  0D17  0828               	movf	?___ftmul+1,w
  2424  0D18  00C4               	movwf	_fround$559+1
  2425  0D19  0829               	movf	?___ftmul+2,w
  2426  0D1A  00C5               	movwf	_fround$559+2
  2427                           
  2428                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2429  0D1B  3000               	movlw	0
  2430  0D1C  00A7               	movwf	___ftmul@f1
  2431  0D1D  3000               	movlw	0
  2432  0D1E  00A8               	movwf	___ftmul@f1+1
  2433  0D1F  303F               	movlw	63
  2434  0D20  00A9               	movwf	___ftmul@f1+2
  2435  0D21  0843               	movf	_fround$559,w
  2436  0D22  00AA               	movwf	___ftmul@f2
  2437  0D23  0844               	movf	_fround$559+1,w
  2438  0D24  00AB               	movwf	___ftmul@f2+1
  2439  0D25  0845               	movf	_fround$559+2,w
  2440  0D26  00AC               	movwf	___ftmul@f2+2
  2441  0D27  120A  158A  2035   	fcall	___ftmul
  2442  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  2444  0D2C  0827               	movf	?___ftmul,w
  2445  0D2D  00B7               	movwf	?_fround
  2446  0D2E  0828               	movf	?___ftmul+1,w
  2447  0D2F  00B8               	movwf	?_fround+1
  2448  0D30  0829               	movf	?___ftmul+2,w
  2449  0D31  00B9               	movwf	?_fround+2
  2450  0D32  0008               	return
  2451  0D33                     l2045:	
  2452                           
  2453                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2454  0D33  3000               	movlw	0
  2455  0D34  00A7               	movwf	___ftmul@f1
  2456  0D35  3000               	movlw	0
  2457  0D36  00A8               	movwf	___ftmul@f1+1
  2458  0D37  303F               	movlw	63
  2459  0D38  00A9               	movwf	___ftmul@f1+2
  2460  0D39  3003               	movlw	3
  2461  0D3A  00BA               	movwf	??_fround
  2462  0D3B  083A               	movf	??_fround,w
  2463  0D3C  00A4               	movwf	___bmul@multiplicand
  2464  0D3D  0846               	movf	fround@prec,w
  2465  0D3E  160A  118A  20F9  120A  158A  	fcall	___bmul
  2466  0D43  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2467  0D44  0084               	movwf	4
  2468  0D45  160A  118A  2000  120A  158A  	fcall	stringdir
  2469  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  2470  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  2471  0D4C  00AA               	movwf	___ftmul@f2
  2472  0D4D  160A  118A  2000  120A  158A  	fcall	stringdir
  2473  0D52  00AB               	movwf	___ftmul@f2+1
  2474  0D53  160A  118A  2000  120A  158A  	fcall	stringdir
  2475  0D58  00AC               	movwf	___ftmul@f2+2
  2476  0D59  120A  158A  2035   	fcall	___ftmul
  2477  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  2478  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  2479  0D5E  0827               	movf	?___ftmul,w
  2480  0D5F  00B7               	movwf	?_fround
  2481  0D60  0828               	movf	?___ftmul+1,w
  2482  0D61  00B8               	movwf	?_fround+1
  2483  0D62  0829               	movf	?___ftmul+2,w
  2484  0D63  00B9               	movwf	?_fround+2
  2485  0D64  0008               	return
  2486  0D65                     __end_of_fround:	
  2487                           
  2488                           	psect	text5
  2489  0835                     __ptext5:	
  2490 ;; *************** function ___ftmul *****************
  2491 ;; Defined at:
  2492 ;;		line 62 in file "E:\software\pic\XC8\sources\common\ftmul.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  f1              3    7[BANK0 ] float 
  2495 ;;  f2              3   10[BANK0 ] float 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  2498 ;;  sign            1   22[BANK0 ] unsigned char 
  2499 ;;  cntr            1   21[BANK0 ] unsigned char 
  2500 ;;  exp             1   17[BANK0 ] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  3    7[BANK0 ] float 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2510 ;;      Params:         0       6       0       0       0
  2511 ;;      Locals:         0       6       0       0       0
  2512 ;;      Temps:          0       4       0       0       0
  2513 ;;      Totals:         0      16       0       0       0
  2514 ;;Total ram usage:       16 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    1
  2517 ;; This function calls:
  2518 ;;		___ftpack
  2519 ;; This function is called by:
  2520 ;;		_fround
  2521 ;;		_scale
  2522 ;;		_sprintf
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           
  2527                           ;psect for function ___ftmul
  2528  0835                     ___ftmul:	
  2529                           
  2530                           ;incstack = 0
  2531                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2532  0835  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0836  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0837  0827               	movf	___ftmul@f1,w
  2535  0838  00AD               	movwf	??___ftmul
  2536  0839  0828               	movf	___ftmul@f1+1,w
  2537  083A  00AE               	movwf	??___ftmul+1
  2538  083B  0829               	movf	___ftmul@f1+2,w
  2539  083C  00AF               	movwf	??___ftmul+2
  2540  083D  1003               	clrc
  2541  083E  0D2E               	rlf	??___ftmul+1,w
  2542  083F  0D2F               	rlf	??___ftmul+2,w
  2543  0840  00B0               	movwf	??___ftmul+3
  2544  0841  0830               	movf	??___ftmul+3,w
  2545  0842  00B1               	movwf	___ftmul@exp
  2546  0843  0831               	movf	___ftmul@exp,w
  2547  0844  1D03               	btfss	3,2
  2548  0845  284D               	goto	l1953
  2549  0846  3000               	movlw	0
  2550  0847  00A7               	movwf	?___ftmul
  2551  0848  3000               	movlw	0
  2552  0849  00A8               	movwf	?___ftmul+1
  2553  084A  3000               	movlw	0
  2554  084B  00A9               	movwf	?___ftmul+2
  2555  084C  0008               	return
  2556  084D                     l1953:	
  2557  084D  082A               	movf	___ftmul@f2,w
  2558  084E  00AD               	movwf	??___ftmul
  2559  084F  082B               	movf	___ftmul@f2+1,w
  2560  0850  00AE               	movwf	??___ftmul+1
  2561  0851  082C               	movf	___ftmul@f2+2,w
  2562  0852  00AF               	movwf	??___ftmul+2
  2563  0853  1003               	clrc
  2564  0854  0D2E               	rlf	??___ftmul+1,w
  2565  0855  0D2F               	rlf	??___ftmul+2,w
  2566  0856  00B0               	movwf	??___ftmul+3
  2567  0857  0830               	movf	??___ftmul+3,w
  2568  0858  00B6               	movwf	___ftmul@sign
  2569  0859  0836               	movf	___ftmul@sign,w
  2570  085A  1D03               	btfss	3,2
  2571  085B  2863               	goto	l1959
  2572  085C  3000               	movlw	0
  2573  085D  00A7               	movwf	?___ftmul
  2574  085E  3000               	movlw	0
  2575  085F  00A8               	movwf	?___ftmul+1
  2576  0860  3000               	movlw	0
  2577  0861  00A9               	movwf	?___ftmul+2
  2578  0862  0008               	return
  2579  0863                     l1959:	
  2580  0863  0836               	movf	___ftmul@sign,w
  2581  0864  3E7B               	addlw	123
  2582  0865  00AD               	movwf	??___ftmul
  2583  0866  082D               	movf	??___ftmul,w
  2584  0867  07B1               	addwf	___ftmul@exp,f
  2585  0868  0827               	movf	___ftmul@f1,w
  2586  0869  00AD               	movwf	??___ftmul
  2587  086A  0828               	movf	___ftmul@f1+1,w
  2588  086B  00AE               	movwf	??___ftmul+1
  2589  086C  0829               	movf	___ftmul@f1+2,w
  2590  086D  00AF               	movwf	??___ftmul+2
  2591  086E  3010               	movlw	16
  2592  086F                     u2805:	
  2593  086F  1003               	clrc
  2594  0870  0CAF               	rrf	??___ftmul+2,f
  2595  0871  0CAE               	rrf	??___ftmul+1,f
  2596  0872  0CAD               	rrf	??___ftmul,f
  2597  0873  3EFF               	addlw	-1
  2598  0874  1D03               	skipz
  2599  0875  286F               	goto	u2805
  2600  0876  082D               	movf	??___ftmul,w
  2601  0877  00B0               	movwf	??___ftmul+3
  2602  0878  0830               	movf	??___ftmul+3,w
  2603  0879  00B6               	movwf	___ftmul@sign
  2604  087A  082A               	movf	___ftmul@f2,w
  2605  087B  00AD               	movwf	??___ftmul
  2606  087C  082B               	movf	___ftmul@f2+1,w
  2607  087D  00AE               	movwf	??___ftmul+1
  2608  087E  082C               	movf	___ftmul@f2+2,w
  2609  087F  00AF               	movwf	??___ftmul+2
  2610  0880  3010               	movlw	16
  2611  0881                     u2815:	
  2612  0881  1003               	clrc
  2613  0882  0CAF               	rrf	??___ftmul+2,f
  2614  0883  0CAE               	rrf	??___ftmul+1,f
  2615  0884  0CAD               	rrf	??___ftmul,f
  2616  0885  3EFF               	addlw	-1
  2617  0886  1D03               	skipz
  2618  0887  2881               	goto	u2815
  2619  0888  082D               	movf	??___ftmul,w
  2620  0889  00B0               	movwf	??___ftmul+3
  2621  088A  0830               	movf	??___ftmul+3,w
  2622  088B  06B6               	xorwf	___ftmul@sign,f
  2623  088C  3080               	movlw	128
  2624  088D  00AD               	movwf	??___ftmul
  2625  088E  082D               	movf	??___ftmul,w
  2626  088F  05B6               	andwf	___ftmul@sign,f
  2627  0890  17A8               	bsf	___ftmul@f1+1,7
  2628  0891  17AB               	bsf	___ftmul@f2+1,7
  2629  0892  30FF               	movlw	255
  2630  0893  05AA               	andwf	___ftmul@f2,f
  2631  0894  30FF               	movlw	255
  2632  0895  05AB               	andwf	___ftmul@f2+1,f
  2633  0896  3000               	movlw	0
  2634  0897  05AC               	andwf	___ftmul@f2+2,f
  2635  0898  3000               	movlw	0
  2636  0899  00B2               	movwf	___ftmul@f3_as_product
  2637  089A  3000               	movlw	0
  2638  089B  00B3               	movwf	___ftmul@f3_as_product+1
  2639  089C  3000               	movlw	0
  2640  089D  00B4               	movwf	___ftmul@f3_as_product+2
  2641  089E  3007               	movlw	7
  2642  089F  00AD               	movwf	??___ftmul
  2643  08A0  082D               	movf	??___ftmul,w
  2644  08A1  00B5               	movwf	___ftmul@cntr
  2645  08A2                     l1971:	
  2646  08A2  1C27               	btfss	___ftmul@f1,0
  2647  08A3  28B2               	goto	l1975
  2648  08A4  082A               	movf	___ftmul@f2,w
  2649  08A5  07B2               	addwf	___ftmul@f3_as_product,f
  2650  08A6  082B               	movf	___ftmul@f2+1,w
  2651  08A7  1103               	clrz
  2652  08A8  1803               	skipnc
  2653  08A9  0A2B               	incf	___ftmul@f2+1,w
  2654  08AA  1D03               	btfss	3,2
  2655  08AB  07B3               	addwf	___ftmul@f3_as_product+1,f
  2656  08AC  082C               	movf	___ftmul@f2+2,w
  2657  08AD  1103               	clrz
  2658  08AE  1803               	skipnc
  2659  08AF  0A2C               	incf	___ftmul@f2+2,w
  2660  08B0  1D03               	btfss	3,2
  2661  08B1  07B4               	addwf	___ftmul@f3_as_product+2,f
  2662  08B2                     l1975:	
  2663  08B2  3001               	movlw	1
  2664  08B3                     u2845:	
  2665  08B3  1003               	clrc
  2666  08B4  0CA9               	rrf	___ftmul@f1+2,f
  2667  08B5  0CA8               	rrf	___ftmul@f1+1,f
  2668  08B6  0CA7               	rrf	___ftmul@f1,f
  2669  08B7  3EFF               	addlw	-1
  2670  08B8  1D03               	skipz
  2671  08B9  28B3               	goto	u2845
  2672  08BA  3001               	movlw	1
  2673  08BB                     u2855:	
  2674  08BB  1003               	clrc
  2675  08BC  0DAA               	rlf	___ftmul@f2,f
  2676  08BD  0DAB               	rlf	___ftmul@f2+1,f
  2677  08BE  0DAC               	rlf	___ftmul@f2+2,f
  2678  08BF  3EFF               	addlw	-1
  2679  08C0  1D03               	skipz
  2680  08C1  28BB               	goto	u2855
  2681  08C2  3001               	movlw	1
  2682  08C3  02B5               	subwf	___ftmul@cntr,f
  2683  08C4  1D03               	btfss	3,2
  2684  08C5  28A2               	goto	l1971
  2685  08C6  3009               	movlw	9
  2686  08C7  00AD               	movwf	??___ftmul
  2687  08C8  082D               	movf	??___ftmul,w
  2688  08C9  00B5               	movwf	___ftmul@cntr
  2689  08CA                     l1983:	
  2690  08CA  1C27               	btfss	___ftmul@f1,0
  2691  08CB  28DA               	goto	l1987
  2692  08CC  082A               	movf	___ftmul@f2,w
  2693  08CD  07B2               	addwf	___ftmul@f3_as_product,f
  2694  08CE  082B               	movf	___ftmul@f2+1,w
  2695  08CF  1103               	clrz
  2696  08D0  1803               	skipnc
  2697  08D1  0A2B               	incf	___ftmul@f2+1,w
  2698  08D2  1D03               	btfss	3,2
  2699  08D3  07B3               	addwf	___ftmul@f3_as_product+1,f
  2700  08D4  082C               	movf	___ftmul@f2+2,w
  2701  08D5  1103               	clrz
  2702  08D6  1803               	skipnc
  2703  08D7  0A2C               	incf	___ftmul@f2+2,w
  2704  08D8  1D03               	btfss	3,2
  2705  08D9  07B4               	addwf	___ftmul@f3_as_product+2,f
  2706  08DA                     l1987:	
  2707  08DA  3001               	movlw	1
  2708  08DB                     u2895:	
  2709  08DB  1003               	clrc
  2710  08DC  0CA9               	rrf	___ftmul@f1+2,f
  2711  08DD  0CA8               	rrf	___ftmul@f1+1,f
  2712  08DE  0CA7               	rrf	___ftmul@f1,f
  2713  08DF  3EFF               	addlw	-1
  2714  08E0  1D03               	skipz
  2715  08E1  28DB               	goto	u2895
  2716  08E2  3001               	movlw	1
  2717  08E3                     u2905:	
  2718  08E3  1003               	clrc
  2719  08E4  0CB4               	rrf	___ftmul@f3_as_product+2,f
  2720  08E5  0CB3               	rrf	___ftmul@f3_as_product+1,f
  2721  08E6  0CB2               	rrf	___ftmul@f3_as_product,f
  2722  08E7  3EFF               	addlw	-1
  2723  08E8  1D03               	skipz
  2724  08E9  28E3               	goto	u2905
  2725  08EA  3001               	movlw	1
  2726  08EB  02B5               	subwf	___ftmul@cntr,f
  2727  08EC  1D03               	btfss	3,2
  2728  08ED  28CA               	goto	l1983
  2729  08EE  0832               	movf	___ftmul@f3_as_product,w
  2730  08EF  00F0               	movwf	___ftpack@arg
  2731  08F0  0833               	movf	___ftmul@f3_as_product+1,w
  2732  08F1  00F1               	movwf	___ftpack@arg+1
  2733  08F2  0834               	movf	___ftmul@f3_as_product+2,w
  2734  08F3  00F2               	movwf	___ftpack@arg+2
  2735  08F4  0831               	movf	___ftmul@exp,w
  2736  08F5  00AD               	movwf	??___ftmul
  2737  08F6  082D               	movf	??___ftmul,w
  2738  08F7  00F3               	movwf	___ftpack@exp
  2739  08F8  0836               	movf	___ftmul@sign,w
  2740  08F9  00AE               	movwf	??___ftmul+1
  2741  08FA  082E               	movf	??___ftmul+1,w
  2742  08FB  00F4               	movwf	___ftpack@sign
  2743  08FC  160A  118A  242C   	fcall	___ftpack
  2744  08FF  0870               	movf	?___ftpack,w
  2745  0900  1283               	bcf	3,5	;RP0=0, select bank0
  2746  0901  1303               	bcf	3,6	;RP1=0, select bank0
  2747  0902  00A7               	movwf	?___ftmul
  2748  0903  0871               	movf	?___ftpack+1,w
  2749  0904  00A8               	movwf	?___ftmul+1
  2750  0905  0872               	movf	?___ftpack+2,w
  2751  0906  00A9               	movwf	?___ftmul+2
  2752  0907  0008               	return
  2753  0908                     __end_of___ftmul:	
  2754                           
  2755                           	psect	text6
  2756  10F9                     __ptext6:	
  2757 ;; *************** function ___bmul *****************
  2758 ;; Defined at:
  2759 ;;		line 4 in file "E:\software\pic\XC8\sources\common\Umul8.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  multiplier      1    wreg     unsigned char 
  2762 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  multiplier      1    6[BANK0 ] unsigned char 
  2765 ;;  product         1    5[BANK0 ] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      unsigned char 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2775 ;;      Params:         0       1       0       0       0
  2776 ;;      Locals:         0       2       0       0       0
  2777 ;;      Temps:          1       0       0       0       0
  2778 ;;      Totals:         1       3       0       0       0
  2779 ;;Total ram usage:        4 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_fround
  2785 ;;		_scale
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           
  2790                           ;psect for function ___bmul
  2791  10F9                     ___bmul:	
  2792                           
  2793                           ;incstack = 0
  2794                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2795                           ;___bmul@multiplier stored from wreg
  2796  10F9  1283               	bcf	3,5	;RP0=0, select bank0
  2797  10FA  1303               	bcf	3,6	;RP1=0, select bank0
  2798  10FB  00A6               	movwf	___bmul@multiplier
  2799  10FC  01A5               	clrf	___bmul@product
  2800  10FD                     l1783:	
  2801  10FD  1C26               	btfss	___bmul@multiplier,0
  2802  10FE  2903               	goto	l1787
  2803  10FF  0824               	movf	___bmul@multiplicand,w
  2804  1100  00FC               	movwf	??___bmul
  2805  1101  087C               	movf	??___bmul,w
  2806  1102  07A5               	addwf	___bmul@product,f
  2807  1103                     l1787:	
  2808  1103  1003               	clrc
  2809  1104  0DA4               	rlf	___bmul@multiplicand,f
  2810  1105  1003               	clrc
  2811  1106  0CA6               	rrf	___bmul@multiplier,f
  2812  1107  0826               	movf	___bmul@multiplier,w
  2813  1108  1D03               	btfss	3,2
  2814  1109  28FD               	goto	l1783
  2815  110A  0825               	movf	___bmul@product,w
  2816  110B  0008               	return
  2817  110C                     __end_of___bmul:	
  2818                           
  2819                           	psect	text7
  2820  1222                     __ptext7:	
  2821 ;; *************** function ___awmod *****************
  2822 ;; Defined at:
  2823 ;;		line 6 in file "E:\software\pic\XC8\sources\common\awmod.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;  divisor         2    0[COMMON] int 
  2826 ;;  dividend        2    2[COMMON] int 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  sign            1    6[COMMON] unsigned char 
  2829 ;;  counter         1    5[COMMON] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2    0[COMMON] int 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2839 ;;      Params:         4       0       0       0       0
  2840 ;;      Locals:         2       0       0       0       0
  2841 ;;      Temps:          1       0       0       0       0
  2842 ;;      Totals:         7       0       0       0       0
  2843 ;;Total ram usage:        7 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_fround
  2849 ;;		_scale
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function ___awmod
  2855  1222                     ___awmod:	
  2856                           
  2857                           ;incstack = 0
  2858                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2859  1222  01F6               	clrf	___awmod@sign
  2860  1223  1FF3               	btfss	___awmod@dividend+1,7
  2861  1224  2A2C               	goto	l1847
  2862  1225  09F2               	comf	___awmod@dividend,f
  2863  1226  09F3               	comf	___awmod@dividend+1,f
  2864  1227  0AF2               	incf	___awmod@dividend,f
  2865  1228  1903               	skipnz
  2866  1229  0AF3               	incf	___awmod@dividend+1,f
  2867  122A  01F6               	clrf	___awmod@sign
  2868  122B  0AF6               	incf	___awmod@sign,f
  2869  122C                     l1847:	
  2870  122C  1FF1               	btfss	___awmod@divisor+1,7
  2871  122D  2A33               	goto	l1851
  2872  122E  09F0               	comf	___awmod@divisor,f
  2873  122F  09F1               	comf	___awmod@divisor+1,f
  2874  1230  0AF0               	incf	___awmod@divisor,f
  2875  1231  1903               	skipnz
  2876  1232  0AF1               	incf	___awmod@divisor+1,f
  2877  1233                     l1851:	
  2878  1233  0870               	movf	___awmod@divisor,w
  2879  1234  0471               	iorwf	___awmod@divisor+1,w
  2880  1235  1903               	btfsc	3,2
  2881  1236  2A60               	goto	l1869
  2882  1237  01F5               	clrf	___awmod@counter
  2883  1238  0AF5               	incf	___awmod@counter,f
  2884  1239                     l1859:	
  2885  1239  1BF1               	btfsc	___awmod@divisor+1,7
  2886  123A  2A47               	goto	l1861
  2887  123B  3001               	movlw	1
  2888  123C                     u2485:	
  2889  123C  1003               	clrc
  2890  123D  0DF0               	rlf	___awmod@divisor,f
  2891  123E  0DF1               	rlf	___awmod@divisor+1,f
  2892  123F  3EFF               	addlw	-1
  2893  1240  1D03               	skipz
  2894  1241  2A3C               	goto	u2485
  2895  1242  3001               	movlw	1
  2896  1243  00F4               	movwf	??___awmod
  2897  1244  0874               	movf	??___awmod,w
  2898  1245  07F5               	addwf	___awmod@counter,f
  2899  1246  2A39               	goto	l1859
  2900  1247                     l1861:	
  2901  1247  0871               	movf	___awmod@divisor+1,w
  2902  1248  0273               	subwf	___awmod@dividend+1,w
  2903  1249  1D03               	skipz
  2904  124A  2A4D               	goto	u2505
  2905  124B  0870               	movf	___awmod@divisor,w
  2906  124C  0272               	subwf	___awmod@dividend,w
  2907  124D                     u2505:	
  2908  124D  1C03               	skipc
  2909  124E  2A55               	goto	l1865
  2910  124F  0870               	movf	___awmod@divisor,w
  2911  1250  02F2               	subwf	___awmod@dividend,f
  2912  1251  0871               	movf	___awmod@divisor+1,w
  2913  1252  1C03               	skipc
  2914  1253  03F3               	decf	___awmod@dividend+1,f
  2915  1254  02F3               	subwf	___awmod@dividend+1,f
  2916  1255                     l1865:	
  2917  1255  3001               	movlw	1
  2918  1256                     u2515:	
  2919  1256  1003               	clrc
  2920  1257  0CF1               	rrf	___awmod@divisor+1,f
  2921  1258  0CF0               	rrf	___awmod@divisor,f
  2922  1259  3EFF               	addlw	-1
  2923  125A  1D03               	skipz
  2924  125B  2A56               	goto	u2515
  2925  125C  3001               	movlw	1
  2926  125D  02F5               	subwf	___awmod@counter,f
  2927  125E  1D03               	btfss	3,2
  2928  125F  2A47               	goto	l1861
  2929  1260                     l1869:	
  2930  1260  0876               	movf	___awmod@sign,w
  2931  1261  1903               	btfsc	3,2
  2932  1262  2A68               	goto	l1873
  2933  1263  09F2               	comf	___awmod@dividend,f
  2934  1264  09F3               	comf	___awmod@dividend+1,f
  2935  1265  0AF2               	incf	___awmod@dividend,f
  2936  1266  1903               	skipnz
  2937  1267  0AF3               	incf	___awmod@dividend+1,f
  2938  1268                     l1873:	
  2939  1268  0873               	movf	___awmod@dividend+1,w
  2940  1269  00F1               	movwf	?___awmod+1
  2941  126A  0872               	movf	___awmod@dividend,w
  2942  126B  00F0               	movwf	?___awmod
  2943  126C  0008               	return
  2944  126D                     __end_of___awmod:	
  2945                           
  2946                           	psect	text8
  2947  1316                     __ptext8:	
  2948 ;; *************** function ___awdiv *****************
  2949 ;; Defined at:
  2950 ;;		line 6 in file "E:\software\pic\XC8\sources\common\awdiv.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  divisor         2    7[COMMON] int 
  2953 ;;  dividend        2    9[COMMON] int 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  quotient        2    2[BANK0 ] int 
  2956 ;;  sign            1    1[BANK0 ] unsigned char 
  2957 ;;  counter         1    0[BANK0 ] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  2    7[COMMON] int 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2967 ;;      Params:         4       0       0       0       0
  2968 ;;      Locals:         0       4       0       0       0
  2969 ;;      Temps:          1       0       0       0       0
  2970 ;;      Totals:         5       4       0       0       0
  2971 ;;Total ram usage:        9 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_fround
  2977 ;;		_scale
  2978 ;;		_sprintf
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function ___awdiv
  2984  1316                     ___awdiv:	
  2985                           
  2986                           ;incstack = 0
  2987                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2988  1316  1283               	bcf	3,5	;RP0=0, select bank0
  2989  1317  1303               	bcf	3,6	;RP1=0, select bank0
  2990  1318  01A1               	clrf	___awdiv@sign
  2991  1319  1FF8               	btfss	___awdiv@divisor+1,7
  2992  131A  2B22               	goto	l1803
  2993  131B  09F7               	comf	___awdiv@divisor,f
  2994  131C  09F8               	comf	___awdiv@divisor+1,f
  2995  131D  0AF7               	incf	___awdiv@divisor,f
  2996  131E  1903               	skipnz
  2997  131F  0AF8               	incf	___awdiv@divisor+1,f
  2998  1320  01A1               	clrf	___awdiv@sign
  2999  1321  0AA1               	incf	___awdiv@sign,f
  3000  1322                     l1803:	
  3001  1322  1FFA               	btfss	___awdiv@dividend+1,7
  3002  1323  2B2D               	goto	l1809
  3003  1324  09F9               	comf	___awdiv@dividend,f
  3004  1325  09FA               	comf	___awdiv@dividend+1,f
  3005  1326  0AF9               	incf	___awdiv@dividend,f
  3006  1327  1903               	skipnz
  3007  1328  0AFA               	incf	___awdiv@dividend+1,f
  3008  1329  3001               	movlw	1
  3009  132A  00FB               	movwf	??___awdiv
  3010  132B  087B               	movf	??___awdiv,w
  3011  132C  06A1               	xorwf	___awdiv@sign,f
  3012  132D                     l1809:	
  3013  132D  01A2               	clrf	___awdiv@quotient
  3014  132E  01A3               	clrf	___awdiv@quotient+1
  3015  132F  0877               	movf	___awdiv@divisor,w
  3016  1330  0478               	iorwf	___awdiv@divisor+1,w
  3017  1331  1903               	btfsc	3,2
  3018  1332  2B64               	goto	l1831
  3019  1333  01A0               	clrf	___awdiv@counter
  3020  1334  0AA0               	incf	___awdiv@counter,f
  3021  1335                     l1819:	
  3022  1335  1BF8               	btfsc	___awdiv@divisor+1,7
  3023  1336  2B43               	goto	l1821
  3024  1337  3001               	movlw	1
  3025  1338                     u2385:	
  3026  1338  1003               	clrc
  3027  1339  0DF7               	rlf	___awdiv@divisor,f
  3028  133A  0DF8               	rlf	___awdiv@divisor+1,f
  3029  133B  3EFF               	addlw	-1
  3030  133C  1D03               	skipz
  3031  133D  2B38               	goto	u2385
  3032  133E  3001               	movlw	1
  3033  133F  00FB               	movwf	??___awdiv
  3034  1340  087B               	movf	??___awdiv,w
  3035  1341  07A0               	addwf	___awdiv@counter,f
  3036  1342  2B35               	goto	l1819
  3037  1343                     l1821:	
  3038  1343  3001               	movlw	1
  3039  1344                     u2405:	
  3040  1344  1003               	clrc
  3041  1345  0DA2               	rlf	___awdiv@quotient,f
  3042  1346  0DA3               	rlf	___awdiv@quotient+1,f
  3043  1347  3EFF               	addlw	-1
  3044  1348  1D03               	skipz
  3045  1349  2B44               	goto	u2405
  3046  134A  0878               	movf	___awdiv@divisor+1,w
  3047  134B  027A               	subwf	___awdiv@dividend+1,w
  3048  134C  1D03               	skipz
  3049  134D  2B50               	goto	u2415
  3050  134E  0877               	movf	___awdiv@divisor,w
  3051  134F  0279               	subwf	___awdiv@dividend,w
  3052  1350                     u2415:	
  3053  1350  1C03               	skipc
  3054  1351  2B59               	goto	l1827
  3055  1352  0877               	movf	___awdiv@divisor,w
  3056  1353  02F9               	subwf	___awdiv@dividend,f
  3057  1354  0878               	movf	___awdiv@divisor+1,w
  3058  1355  1C03               	skipc
  3059  1356  03FA               	decf	___awdiv@dividend+1,f
  3060  1357  02FA               	subwf	___awdiv@dividend+1,f
  3061  1358  1422               	bsf	___awdiv@quotient,0
  3062  1359                     l1827:	
  3063  1359  3001               	movlw	1
  3064  135A                     u2425:	
  3065  135A  1003               	clrc
  3066  135B  0CF8               	rrf	___awdiv@divisor+1,f
  3067  135C  0CF7               	rrf	___awdiv@divisor,f
  3068  135D  3EFF               	addlw	-1
  3069  135E  1D03               	skipz
  3070  135F  2B5A               	goto	u2425
  3071  1360  3001               	movlw	1
  3072  1361  02A0               	subwf	___awdiv@counter,f
  3073  1362  1D03               	btfss	3,2
  3074  1363  2B43               	goto	l1821
  3075  1364                     l1831:	
  3076  1364  0821               	movf	___awdiv@sign,w
  3077  1365  1903               	btfsc	3,2
  3078  1366  2B6C               	goto	l1835
  3079  1367  09A2               	comf	___awdiv@quotient,f
  3080  1368  09A3               	comf	___awdiv@quotient+1,f
  3081  1369  0AA2               	incf	___awdiv@quotient,f
  3082  136A  1903               	skipnz
  3083  136B  0AA3               	incf	___awdiv@quotient+1,f
  3084  136C                     l1835:	
  3085  136C  0823               	movf	___awdiv@quotient+1,w
  3086  136D  00F8               	movwf	?___awdiv+1
  3087  136E  0822               	movf	___awdiv@quotient,w
  3088  136F  00F7               	movwf	?___awdiv
  3089  1370  0008               	return
  3090  1371                     __end_of___awdiv:	
  3091                           
  3092                           	psect	text9
  3093  1526                     __ptext9:	
  3094 ;; *************** function __tdiv_to_l_ *****************
  3095 ;; Defined at:
  3096 ;;		line 60 in file "E:\software\pic\XC8\sources\common\ftdivl.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  f1              3    0[COMMON] float 
  3099 ;;  f2              3    3[COMMON] float 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  quot            4    0[BANK0 ] unsigned long 
  3102 ;;  exp1            1    5[BANK0 ] unsigned char 
  3103 ;;  cntr            1    4[BANK0 ] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  4    0[COMMON] unsigned long 
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3113 ;;      Params:         6       0       0       0       0
  3114 ;;      Locals:         0       6       0       0       0
  3115 ;;      Temps:          4       0       0       0       0
  3116 ;;      Totals:        10       6       0       0       0
  3117 ;;Total ram usage:       16 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_sprintf
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           
  3127                           ;psect for function __tdiv_to_l_
  3128  1526                     __tdiv_to_l_:	
  3129                           
  3130                           ;incstack = 0
  3131                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  3132  1526  0870               	movf	__tdiv_to_l_@f1,w
  3133  1527  00F6               	movwf	??__tdiv_to_l_
  3134  1528  0871               	movf	__tdiv_to_l_@f1+1,w
  3135  1529  00F7               	movwf	??__tdiv_to_l_+1
  3136  152A  0872               	movf	__tdiv_to_l_@f1+2,w
  3137  152B  00F8               	movwf	??__tdiv_to_l_+2
  3138  152C  1003               	clrc
  3139  152D  0D77               	rlf	??__tdiv_to_l_+1,w
  3140  152E  0D78               	rlf	??__tdiv_to_l_+2,w
  3141  152F  00F9               	movwf	??__tdiv_to_l_+3
  3142  1530  0879               	movf	??__tdiv_to_l_+3,w
  3143  1531  1283               	bcf	3,5	;RP0=0, select bank0
  3144  1532  1303               	bcf	3,6	;RP1=0, select bank0
  3145  1533  00A5               	movwf	__tdiv_to_l_@exp1
  3146  1534  0825               	movf	__tdiv_to_l_@exp1,w
  3147  1535  1D03               	btfss	3,2
  3148  1536  2D40               	goto	l2107
  3149  1537  3000               	movlw	0
  3150  1538  00F3               	movwf	?__tdiv_to_l_+3
  3151  1539  3000               	movlw	0
  3152  153A  00F2               	movwf	?__tdiv_to_l_+2
  3153  153B  3000               	movlw	0
  3154  153C  00F1               	movwf	?__tdiv_to_l_+1
  3155  153D  3000               	movlw	0
  3156  153E  00F0               	movwf	?__tdiv_to_l_
  3157  153F  0008               	return
  3158  1540                     l2107:	
  3159  1540  0873               	movf	__tdiv_to_l_@f2,w
  3160  1541  00F6               	movwf	??__tdiv_to_l_
  3161  1542  0874               	movf	__tdiv_to_l_@f2+1,w
  3162  1543  00F7               	movwf	??__tdiv_to_l_+1
  3163  1544  0875               	movf	__tdiv_to_l_@f2+2,w
  3164  1545  00F8               	movwf	??__tdiv_to_l_+2
  3165  1546  1003               	clrc
  3166  1547  0D77               	rlf	??__tdiv_to_l_+1,w
  3167  1548  0D78               	rlf	??__tdiv_to_l_+2,w
  3168  1549  00F9               	movwf	??__tdiv_to_l_+3
  3169  154A  0879               	movf	??__tdiv_to_l_+3,w
  3170  154B  00A4               	movwf	__tdiv_to_l_@cntr
  3171  154C  0824               	movf	__tdiv_to_l_@cntr,w
  3172  154D  1D03               	btfss	3,2
  3173  154E  2D58               	goto	l533
  3174  154F  3000               	movlw	0
  3175  1550  00F3               	movwf	?__tdiv_to_l_+3
  3176  1551  3000               	movlw	0
  3177  1552  00F2               	movwf	?__tdiv_to_l_+2
  3178  1553  3000               	movlw	0
  3179  1554  00F1               	movwf	?__tdiv_to_l_+1
  3180  1555  3000               	movlw	0
  3181  1556  00F0               	movwf	?__tdiv_to_l_
  3182  1557  0008               	return
  3183  1558                     l533:	
  3184  1558  17F1               	bsf	__tdiv_to_l_@f1+1,7
  3185  1559  30FF               	movlw	255
  3186  155A  05F0               	andwf	__tdiv_to_l_@f1,f
  3187  155B  30FF               	movlw	255
  3188  155C  05F1               	andwf	__tdiv_to_l_@f1+1,f
  3189  155D  3000               	movlw	0
  3190  155E  05F2               	andwf	__tdiv_to_l_@f1+2,f
  3191  155F  17F4               	bsf	__tdiv_to_l_@f2+1,7
  3192  1560  30FF               	movlw	255
  3193  1561  05F3               	andwf	__tdiv_to_l_@f2,f
  3194  1562  30FF               	movlw	255
  3195  1563  05F4               	andwf	__tdiv_to_l_@f2+1,f
  3196  1564  3000               	movlw	0
  3197  1565  05F5               	andwf	__tdiv_to_l_@f2+2,f
  3198  1566  3000               	movlw	0
  3199  1567  00A3               	movwf	__tdiv_to_l_@quot+3
  3200  1568  3000               	movlw	0
  3201  1569  00A2               	movwf	__tdiv_to_l_@quot+2
  3202  156A  3000               	movlw	0
  3203  156B  00A1               	movwf	__tdiv_to_l_@quot+1
  3204  156C  3000               	movlw	0
  3205  156D  00A0               	movwf	__tdiv_to_l_@quot
  3206  156E  307F               	movlw	127
  3207  156F  02A5               	subwf	__tdiv_to_l_@exp1,f
  3208  1570  3098               	movlw	152
  3209  1571  0724               	addwf	__tdiv_to_l_@cntr,w
  3210  1572  00F6               	movwf	??__tdiv_to_l_
  3211  1573  0876               	movf	??__tdiv_to_l_,w
  3212  1574  02A5               	subwf	__tdiv_to_l_@exp1,f
  3213  1575  3018               	movlw	24
  3214  1576  00F6               	movwf	??__tdiv_to_l_
  3215  1577  0876               	movf	??__tdiv_to_l_,w
  3216  1578  00A4               	movwf	__tdiv_to_l_@cntr
  3217  1579                     l2121:	
  3218  1579  3001               	movlw	1
  3219  157A  00F6               	movwf	??__tdiv_to_l_
  3220  157B                     u3045:	
  3221  157B  1003               	clrc
  3222  157C  0DA0               	rlf	__tdiv_to_l_@quot,f
  3223  157D  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  3224  157E  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  3225  157F  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  3226  1580  0BF6               	decfsz	??__tdiv_to_l_,f
  3227  1581  2D7B               	goto	u3045
  3228  1582  0875               	movf	__tdiv_to_l_@f2+2,w
  3229  1583  0272               	subwf	__tdiv_to_l_@f1+2,w
  3230  1584  1D03               	skipz
  3231  1585  2D8C               	goto	u3055
  3232  1586  0874               	movf	__tdiv_to_l_@f2+1,w
  3233  1587  0271               	subwf	__tdiv_to_l_@f1+1,w
  3234  1588  1D03               	skipz
  3235  1589  2D8C               	goto	u3055
  3236  158A  0873               	movf	__tdiv_to_l_@f2,w
  3237  158B  0270               	subwf	__tdiv_to_l_@f1,w
  3238  158C                     u3055:	
  3239  158C  1C03               	skipc
  3240  158D  2D99               	goto	l2129
  3241  158E  0873               	movf	__tdiv_to_l_@f2,w
  3242  158F  02F0               	subwf	__tdiv_to_l_@f1,f
  3243  1590  0874               	movf	__tdiv_to_l_@f2+1,w
  3244  1591  1C03               	skipc
  3245  1592  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  3246  1593  02F1               	subwf	__tdiv_to_l_@f1+1,f
  3247  1594  0875               	movf	__tdiv_to_l_@f2+2,w
  3248  1595  1C03               	skipc
  3249  1596  0A75               	incf	__tdiv_to_l_@f2+2,w
  3250  1597  02F2               	subwf	__tdiv_to_l_@f1+2,f
  3251  1598  1420               	bsf	__tdiv_to_l_@quot,0
  3252  1599                     l2129:	
  3253  1599  3001               	movlw	1
  3254  159A                     u3065:	
  3255  159A  1003               	clrc
  3256  159B  0DF0               	rlf	__tdiv_to_l_@f1,f
  3257  159C  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  3258  159D  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  3259  159E  3EFF               	addlw	-1
  3260  159F  1D03               	skipz
  3261  15A0  2D9A               	goto	u3065
  3262  15A1  3001               	movlw	1
  3263  15A2  02A4               	subwf	__tdiv_to_l_@cntr,f
  3264  15A3  1D03               	btfss	3,2
  3265  15A4  2D79               	goto	l2121
  3266  15A5  1FA5               	btfss	__tdiv_to_l_@exp1,7
  3267  15A6  2DC5               	goto	l2141
  3268  15A7  0825               	movf	__tdiv_to_l_@exp1,w
  3269  15A8  3A80               	xorlw	128
  3270  15A9  3E97               	addlw	151
  3271  15AA  1803               	skipnc
  3272  15AB  2DB5               	goto	l2139
  3273  15AC  3000               	movlw	0
  3274  15AD  00F3               	movwf	?__tdiv_to_l_+3
  3275  15AE  3000               	movlw	0
  3276  15AF  00F2               	movwf	?__tdiv_to_l_+2
  3277  15B0  3000               	movlw	0
  3278  15B1  00F1               	movwf	?__tdiv_to_l_+1
  3279  15B2  3000               	movlw	0
  3280  15B3  00F0               	movwf	?__tdiv_to_l_
  3281  15B4  0008               	return
  3282  15B5                     l2139:	
  3283  15B5  3001               	movlw	1
  3284  15B6                     u3105:	
  3285  15B6  1003               	clrc
  3286  15B7  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  3287  15B8  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  3288  15B9  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  3289  15BA  0CA0               	rrf	__tdiv_to_l_@quot,f
  3290  15BB  3EFF               	addlw	-1
  3291  15BC  1D03               	skipz
  3292  15BD  2DB6               	goto	u3105
  3293  15BE  3001               	movlw	1
  3294  15BF  00F6               	movwf	??__tdiv_to_l_
  3295  15C0  0876               	movf	??__tdiv_to_l_,w
  3296  15C1  07A5               	addwf	__tdiv_to_l_@exp1,f
  3297  15C2  1903               	btfsc	3,2
  3298  15C3  2DE0               	goto	l2149
  3299  15C4  2DB5               	goto	l2139
  3300  15C5                     l2141:	
  3301  15C5  3018               	movlw	24
  3302  15C6  0225               	subwf	__tdiv_to_l_@exp1,w
  3303  15C7  1C03               	skipc
  3304  15C8  2DDD               	goto	l543
  3305  15C9  3000               	movlw	0
  3306  15CA  00F3               	movwf	?__tdiv_to_l_+3
  3307  15CB  3000               	movlw	0
  3308  15CC  00F2               	movwf	?__tdiv_to_l_+2
  3309  15CD  3000               	movlw	0
  3310  15CE  00F1               	movwf	?__tdiv_to_l_+1
  3311  15CF  3000               	movlw	0
  3312  15D0  00F0               	movwf	?__tdiv_to_l_
  3313  15D1  0008               	return
  3314  15D2                     l2147:	
  3315  15D2  3001               	movlw	1
  3316  15D3  00F6               	movwf	??__tdiv_to_l_
  3317  15D4                     u3135:	
  3318  15D4  1003               	clrc
  3319  15D5  0DA0               	rlf	__tdiv_to_l_@quot,f
  3320  15D6  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  3321  15D7  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  3322  15D8  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  3323  15D9  0BF6               	decfsz	??__tdiv_to_l_,f
  3324  15DA  2DD4               	goto	u3135
  3325  15DB  3001               	movlw	1
  3326  15DC  02A5               	subwf	__tdiv_to_l_@exp1,f
  3327  15DD                     l543:	
  3328  15DD  0825               	movf	__tdiv_to_l_@exp1,w
  3329  15DE  1D03               	btfss	3,2
  3330  15DF  2DD2               	goto	l2147
  3331  15E0                     l2149:	
  3332  15E0  0823               	movf	__tdiv_to_l_@quot+3,w
  3333  15E1  00F3               	movwf	?__tdiv_to_l_+3
  3334  15E2  0822               	movf	__tdiv_to_l_@quot+2,w
  3335  15E3  00F2               	movwf	?__tdiv_to_l_+2
  3336  15E4  0821               	movf	__tdiv_to_l_@quot+1,w
  3337  15E5  00F1               	movwf	?__tdiv_to_l_+1
  3338  15E6  0820               	movf	__tdiv_to_l_@quot,w
  3339  15E7  00F0               	movwf	?__tdiv_to_l_
  3340  15E8  0008               	return
  3341  15E9                     __end_of__tdiv_to_l_:	
  3342                           
  3343                           	psect	text10
  3344  0908                     __ptext10:	
  3345 ;; *************** function __div_to_l_ *****************
  3346 ;; Defined at:
  3347 ;;		line 60 in file "E:\software\pic\XC8\sources\common\fldivl.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  f1              3    0[COMMON] unsigned long 
  3350 ;;  f2              3    3[COMMON] unsigned long 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  quot            4    0[BANK0 ] unsigned long 
  3353 ;;  exp1            1    5[BANK0 ] unsigned char 
  3354 ;;  cntr            1    4[BANK0 ] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  4    0[COMMON] unsigned long 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3364 ;;      Params:         6       0       0       0       0
  3365 ;;      Locals:         0       6       0       0       0
  3366 ;;      Temps:          8       0       0       0       0
  3367 ;;      Totals:        14       6       0       0       0
  3368 ;;Total ram usage:       20 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_sprintf
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function __div_to_l_
  3379  0908                     __div_to_l_:	
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  3383  0908  3070               	movlw	low (__div_to_l_@f1| 0)
  3384  0909  0084               	movwf	4
  3385  090A  0800               	movf	0,w
  3386  090B  00F6               	movwf	??__div_to_l_
  3387  090C  0A84               	incf	4,f
  3388  090D  0800               	movf	0,w
  3389  090E  00F7               	movwf	??__div_to_l_+1
  3390  090F  0A84               	incf	4,f
  3391  0910  0800               	movf	0,w
  3392  0911  00F8               	movwf	??__div_to_l_+2
  3393  0912  0A84               	incf	4,f
  3394  0913  0800               	movf	0,w
  3395  0914  00F9               	movwf	??__div_to_l_+3
  3396  0915  1003               	clrc
  3397  0916  0D78               	rlf	??__div_to_l_+2,w
  3398  0917  0D79               	rlf	??__div_to_l_+3,w
  3399  0918  00FA               	movwf	??__div_to_l_+4
  3400  0919  087A               	movf	??__div_to_l_+4,w
  3401  091A  1283               	bcf	3,5	;RP0=0, select bank0
  3402  091B  1303               	bcf	3,6	;RP1=0, select bank0
  3403  091C  00A5               	movwf	__div_to_l_@exp1
  3404  091D  0825               	movf	__div_to_l_@exp1,w
  3405  091E  1D03               	btfss	3,2
  3406  091F  2929               	goto	l2159
  3407  0920  3000               	movlw	0
  3408  0921  00F3               	movwf	?__div_to_l_+3
  3409  0922  3000               	movlw	0
  3410  0923  00F2               	movwf	?__div_to_l_+2
  3411  0924  3000               	movlw	0
  3412  0925  00F1               	movwf	?__div_to_l_+1
  3413  0926  3000               	movlw	0
  3414  0927  00F0               	movwf	?__div_to_l_
  3415  0928  0008               	return
  3416  0929                     l2159:	
  3417  0929  3073               	movlw	low (__div_to_l_@f2| 0)
  3418  092A  0084               	movwf	4
  3419  092B  0800               	movf	0,w
  3420  092C  00F6               	movwf	??__div_to_l_
  3421  092D  0A84               	incf	4,f
  3422  092E  0800               	movf	0,w
  3423  092F  00F7               	movwf	??__div_to_l_+1
  3424  0930  0A84               	incf	4,f
  3425  0931  0800               	movf	0,w
  3426  0932  00F8               	movwf	??__div_to_l_+2
  3427  0933  0A84               	incf	4,f
  3428  0934  0800               	movf	0,w
  3429  0935  00F9               	movwf	??__div_to_l_+3
  3430  0936  1003               	clrc
  3431  0937  0D78               	rlf	??__div_to_l_+2,w
  3432  0938  0D79               	rlf	??__div_to_l_+3,w
  3433  0939  00FA               	movwf	??__div_to_l_+4
  3434  093A  087A               	movf	??__div_to_l_+4,w
  3435  093B  00A4               	movwf	__div_to_l_@cntr
  3436  093C  0824               	movf	__div_to_l_@cntr,w
  3437  093D  1D03               	btfss	3,2
  3438  093E  2948               	goto	l2165
  3439  093F  3000               	movlw	0
  3440  0940  00F3               	movwf	?__div_to_l_+3
  3441  0941  3000               	movlw	0
  3442  0942  00F2               	movwf	?__div_to_l_+2
  3443  0943  3000               	movlw	0
  3444  0944  00F1               	movwf	?__div_to_l_+1
  3445  0945  3000               	movlw	0
  3446  0946  00F0               	movwf	?__div_to_l_
  3447  0947  0008               	return
  3448  0948                     l2165:	
  3449  0948  3070               	movlw	low (__div_to_l_@f1| 0)
  3450  0949  0084               	movwf	4
  3451  094A  3000               	movlw	0
  3452  094B  0480               	iorwf	0,f
  3453  094C  0A84               	incf	4,f
  3454  094D  3000               	movlw	0
  3455  094E  0480               	iorwf	0,f
  3456  094F  0A84               	incf	4,f
  3457  0950  3080               	movlw	128
  3458  0951  0480               	iorwf	0,f
  3459  0952  0A84               	incf	4,f
  3460  0953  3000               	movlw	0
  3461  0954  0480               	iorwf	0,f
  3462  0955  3070               	movlw	low (__div_to_l_@f1| 0)
  3463  0956  0084               	movwf	4
  3464  0957  30FF               	movlw	255
  3465  0958  0580               	andwf	0,f
  3466  0959  0A84               	incf	4,f
  3467  095A  30FF               	movlw	255
  3468  095B  0580               	andwf	0,f
  3469  095C  0A84               	incf	4,f
  3470  095D  30FF               	movlw	255
  3471  095E  0580               	andwf	0,f
  3472  095F  0A84               	incf	4,f
  3473  0960  3000               	movlw	0
  3474  0961  0580               	andwf	0,f
  3475  0962  3073               	movlw	low (__div_to_l_@f2| 0)
  3476  0963  0084               	movwf	4
  3477  0964  3000               	movlw	0
  3478  0965  0480               	iorwf	0,f
  3479  0966  0A84               	incf	4,f
  3480  0967  3000               	movlw	0
  3481  0968  0480               	iorwf	0,f
  3482  0969  0A84               	incf	4,f
  3483  096A  3080               	movlw	128
  3484  096B  0480               	iorwf	0,f
  3485  096C  0A84               	incf	4,f
  3486  096D  3000               	movlw	0
  3487  096E  0480               	iorwf	0,f
  3488  096F  3073               	movlw	low (__div_to_l_@f2| 0)
  3489  0970  0084               	movwf	4
  3490  0971  30FF               	movlw	255
  3491  0972  0580               	andwf	0,f
  3492  0973  0A84               	incf	4,f
  3493  0974  30FF               	movlw	255
  3494  0975  0580               	andwf	0,f
  3495  0976  0A84               	incf	4,f
  3496  0977  30FF               	movlw	255
  3497  0978  0580               	andwf	0,f
  3498  0979  0A84               	incf	4,f
  3499  097A  3000               	movlw	0
  3500  097B  0580               	andwf	0,f
  3501  097C  3000               	movlw	0
  3502  097D  00A3               	movwf	__div_to_l_@quot+3
  3503  097E  3000               	movlw	0
  3504  097F  00A2               	movwf	__div_to_l_@quot+2
  3505  0980  3000               	movlw	0
  3506  0981  00A1               	movwf	__div_to_l_@quot+1
  3507  0982  3000               	movlw	0
  3508  0983  00A0               	movwf	__div_to_l_@quot
  3509  0984  307F               	movlw	127
  3510  0985  02A5               	subwf	__div_to_l_@exp1,f
  3511  0986  30A0               	movlw	160
  3512  0987  0724               	addwf	__div_to_l_@cntr,w
  3513  0988  00F6               	movwf	??__div_to_l_
  3514  0989  0876               	movf	??__div_to_l_,w
  3515  098A  02A5               	subwf	__div_to_l_@exp1,f
  3516  098B  3020               	movlw	32
  3517  098C  00F6               	movwf	??__div_to_l_
  3518  098D  0876               	movf	??__div_to_l_,w
  3519  098E  00A4               	movwf	__div_to_l_@cntr
  3520  098F                     l2175:	
  3521  098F  3001               	movlw	1
  3522  0990  00F6               	movwf	??__div_to_l_
  3523  0991                     u3175:	
  3524  0991  1003               	clrc
  3525  0992  0DA0               	rlf	__div_to_l_@quot,f
  3526  0993  0DA1               	rlf	__div_to_l_@quot+1,f
  3527  0994  0DA2               	rlf	__div_to_l_@quot+2,f
  3528  0995  0DA3               	rlf	__div_to_l_@quot+3,f
  3529  0996  0BF6               	decfsz	??__div_to_l_,f
  3530  0997  2991               	goto	u3175
  3531  0998  3073               	movlw	low (__div_to_l_@f2| 0)
  3532  0999  0084               	movwf	4
  3533  099A  0800               	movf	0,w
  3534  099B  00F6               	movwf	??__div_to_l_
  3535  099C  0A84               	incf	4,f
  3536  099D  0800               	movf	0,w
  3537  099E  00F7               	movwf	??__div_to_l_+1
  3538  099F  0A84               	incf	4,f
  3539  09A0  0800               	movf	0,w
  3540  09A1  00F8               	movwf	??__div_to_l_+2
  3541  09A2  0A84               	incf	4,f
  3542  09A3  0800               	movf	0,w
  3543  09A4  00F9               	movwf	??__div_to_l_+3
  3544  09A5  3070               	movlw	low (__div_to_l_@f1| 0)
  3545  09A6  0084               	movwf	4
  3546  09A7  0800               	movf	0,w
  3547  09A8  00FA               	movwf	??__div_to_l_+4
  3548  09A9  0A84               	incf	4,f
  3549  09AA  0800               	movf	0,w
  3550  09AB  00FB               	movwf	??__div_to_l_+5
  3551  09AC  0A84               	incf	4,f
  3552  09AD  0800               	movf	0,w
  3553  09AE  00FC               	movwf	??__div_to_l_+6
  3554  09AF  0A84               	incf	4,f
  3555  09B0  0800               	movf	0,w
  3556  09B1  00FD               	movwf	??__div_to_l_+7
  3557  09B2  0879               	movf	??__div_to_l_+3,w
  3558  09B3  027D               	subwf	??__div_to_l_+7,w
  3559  09B4  1D03               	skipz
  3560  09B5  29C0               	goto	u3185
  3561  09B6  0878               	movf	??__div_to_l_+2,w
  3562  09B7  027C               	subwf	??__div_to_l_+6,w
  3563  09B8  1D03               	skipz
  3564  09B9  29C0               	goto	u3185
  3565  09BA  0877               	movf	??__div_to_l_+1,w
  3566  09BB  027B               	subwf	??__div_to_l_+5,w
  3567  09BC  1D03               	skipz
  3568  09BD  29C0               	goto	u3185
  3569  09BE  0876               	movf	??__div_to_l_,w
  3570  09BF  027A               	subwf	??__div_to_l_+4,w
  3571  09C0                     u3185:	
  3572  09C0  1C03               	skipc
  3573  09C1  29E5               	goto	l456
  3574  09C2  3073               	movlw	low (__div_to_l_@f2| 0)
  3575  09C3  0084               	movwf	4
  3576  09C4  0800               	movf	0,w
  3577  09C5  00F6               	movwf	??__div_to_l_
  3578  09C6  0A84               	incf	4,f
  3579  09C7  0800               	movf	0,w
  3580  09C8  00F7               	movwf	??__div_to_l_+1
  3581  09C9  0A84               	incf	4,f
  3582  09CA  0800               	movf	0,w
  3583  09CB  00F8               	movwf	??__div_to_l_+2
  3584  09CC  0A84               	incf	4,f
  3585  09CD  0800               	movf	0,w
  3586  09CE  00F9               	movwf	??__div_to_l_+3
  3587  09CF  3070               	movlw	low (__div_to_l_@f1| 0)
  3588  09D0  0084               	movwf	4
  3589  09D1  0876               	movf	??__div_to_l_,w
  3590  09D2  0280               	subwf	0,f
  3591  09D3  0A84               	incf	4,f
  3592  09D4  0877               	movf	??__div_to_l_+1,w
  3593  09D5  1C03               	skipc
  3594  09D6  0F77               	incfsz	??__div_to_l_+1,w
  3595  09D7  0280               	subwf	0,f
  3596  09D8  0A84               	incf	4,f
  3597  09D9  0878               	movf	??__div_to_l_+2,w
  3598  09DA  1C03               	skipc
  3599  09DB  0F78               	incfsz	??__div_to_l_+2,w
  3600  09DC  0280               	subwf	0,f
  3601  09DD  0A84               	incf	4,f
  3602  09DE  0879               	movf	??__div_to_l_+3,w
  3603  09DF  1C03               	skipc
  3604  09E0  0A79               	incf	??__div_to_l_+3,w
  3605  09E1  0280               	subwf	0,f
  3606  09E2  3003               	movlw	3
  3607  09E3  0284               	subwf	4,f
  3608  09E4  1420               	bsf	__div_to_l_@quot,0
  3609  09E5                     l456:	
  3610  09E5  3070               	movlw	low (__div_to_l_@f1| 0)
  3611  09E6  0084               	movwf	4
  3612  09E7  1003               	clrc
  3613  09E8  0D80               	rlf	0,f
  3614  09E9  0A84               	incf	4,f
  3615  09EA  0D80               	rlf	0,f
  3616  09EB  0A84               	incf	4,f
  3617  09EC  0D80               	rlf	0,f
  3618  09ED  0A84               	incf	4,f
  3619  09EE  0D80               	rlf	0,f
  3620  09EF  0384               	decf	4,f
  3621  09F0  0384               	decf	4,f
  3622  09F1  0384               	decf	4,f
  3623  09F2  3001               	movlw	1
  3624  09F3  02A4               	subwf	__div_to_l_@cntr,f
  3625  09F4  1D03               	btfss	3,2
  3626  09F5  298F               	goto	l2175
  3627  09F6  1FA5               	btfss	__div_to_l_@exp1,7
  3628  09F7  2A16               	goto	l2193
  3629  09F8  0825               	movf	__div_to_l_@exp1,w
  3630  09F9  3A80               	xorlw	128
  3631  09FA  3E9F               	addlw	159
  3632  09FB  1803               	skipnc
  3633  09FC  2A06               	goto	l2191
  3634  09FD  3000               	movlw	0
  3635  09FE  00F3               	movwf	?__div_to_l_+3
  3636  09FF  3000               	movlw	0
  3637  0A00  00F2               	movwf	?__div_to_l_+2
  3638  0A01  3000               	movlw	0
  3639  0A02  00F1               	movwf	?__div_to_l_+1
  3640  0A03  3000               	movlw	0
  3641  0A04  00F0               	movwf	?__div_to_l_
  3642  0A05  0008               	return
  3643  0A06                     l2191:	
  3644  0A06  3001               	movlw	1
  3645  0A07                     u3225:	
  3646  0A07  1003               	clrc
  3647  0A08  0CA3               	rrf	__div_to_l_@quot+3,f
  3648  0A09  0CA2               	rrf	__div_to_l_@quot+2,f
  3649  0A0A  0CA1               	rrf	__div_to_l_@quot+1,f
  3650  0A0B  0CA0               	rrf	__div_to_l_@quot,f
  3651  0A0C  3EFF               	addlw	-1
  3652  0A0D  1D03               	skipz
  3653  0A0E  2A07               	goto	u3225
  3654  0A0F  3001               	movlw	1
  3655  0A10  00F6               	movwf	??__div_to_l_
  3656  0A11  0876               	movf	??__div_to_l_,w
  3657  0A12  07A5               	addwf	__div_to_l_@exp1,f
  3658  0A13  1903               	btfsc	3,2
  3659  0A14  2A31               	goto	l2201
  3660  0A15  2A06               	goto	l2191
  3661  0A16                     l2193:	
  3662  0A16  3020               	movlw	32
  3663  0A17  0225               	subwf	__div_to_l_@exp1,w
  3664  0A18  1C03               	skipc
  3665  0A19  2A2E               	goto	l464
  3666  0A1A  3000               	movlw	0
  3667  0A1B  00F3               	movwf	?__div_to_l_+3
  3668  0A1C  3000               	movlw	0
  3669  0A1D  00F2               	movwf	?__div_to_l_+2
  3670  0A1E  3000               	movlw	0
  3671  0A1F  00F1               	movwf	?__div_to_l_+1
  3672  0A20  3000               	movlw	0
  3673  0A21  00F0               	movwf	?__div_to_l_
  3674  0A22  0008               	return
  3675  0A23                     l2199:	
  3676  0A23  3001               	movlw	1
  3677  0A24  00F6               	movwf	??__div_to_l_
  3678  0A25                     u3255:	
  3679  0A25  1003               	clrc
  3680  0A26  0DA0               	rlf	__div_to_l_@quot,f
  3681  0A27  0DA1               	rlf	__div_to_l_@quot+1,f
  3682  0A28  0DA2               	rlf	__div_to_l_@quot+2,f
  3683  0A29  0DA3               	rlf	__div_to_l_@quot+3,f
  3684  0A2A  0BF6               	decfsz	??__div_to_l_,f
  3685  0A2B  2A25               	goto	u3255
  3686  0A2C  3001               	movlw	1
  3687  0A2D  02A5               	subwf	__div_to_l_@exp1,f
  3688  0A2E                     l464:	
  3689  0A2E  0825               	movf	__div_to_l_@exp1,w
  3690  0A2F  1D03               	btfss	3,2
  3691  0A30  2A23               	goto	l2199
  3692  0A31                     l2201:	
  3693  0A31  0823               	movf	__div_to_l_@quot+3,w
  3694  0A32  00F3               	movwf	?__div_to_l_+3
  3695  0A33  0822               	movf	__div_to_l_@quot+2,w
  3696  0A34  00F2               	movwf	?__div_to_l_+2
  3697  0A35  0821               	movf	__div_to_l_@quot+1,w
  3698  0A36  00F1               	movwf	?__div_to_l_+1
  3699  0A37  0820               	movf	__div_to_l_@quot,w
  3700  0A38  00F0               	movwf	?__div_to_l_
  3701  0A39  0008               	return
  3702  0A3A                     __end_of__div_to_l_:	
  3703                           
  3704                           	psect	text11
  3705  1180                     __ptext11:	
  3706 ;; *************** function ___wmul *****************
  3707 ;; Defined at:
  3708 ;;		line 15 in file "E:\software\pic\XC8\sources\common\Umul16.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  multiplier      2    0[COMMON] unsigned int 
  3711 ;;  multiplicand    2    2[COMMON] unsigned int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  product         2    4[COMMON] unsigned int 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  2    0[COMMON] unsigned int 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3723 ;;      Params:         4       0       0       0       0
  3724 ;;      Locals:         2       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0
  3726 ;;      Totals:         6       0       0       0       0
  3727 ;;Total ram usage:        6 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_sprintf
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function ___wmul
  3738  1180                     ___wmul:	
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3742  1180  01F4               	clrf	___wmul@product
  3743  1181  01F5               	clrf	___wmul@product+1
  3744  1182                     l2207:	
  3745  1182  1C70               	btfss	___wmul@multiplier,0
  3746  1183  298A               	goto	l298
  3747  1184  0872               	movf	___wmul@multiplicand,w
  3748  1185  07F4               	addwf	___wmul@product,f
  3749  1186  1803               	skipnc
  3750  1187  0AF5               	incf	___wmul@product+1,f
  3751  1188  0873               	movf	___wmul@multiplicand+1,w
  3752  1189  07F5               	addwf	___wmul@product+1,f
  3753  118A                     l298:	
  3754  118A  3001               	movlw	1
  3755  118B                     u3285:	
  3756  118B  1003               	clrc
  3757  118C  0DF2               	rlf	___wmul@multiplicand,f
  3758  118D  0DF3               	rlf	___wmul@multiplicand+1,f
  3759  118E  3EFF               	addlw	-1
  3760  118F  1D03               	skipz
  3761  1190  298B               	goto	u3285
  3762  1191  3001               	movlw	1
  3763  1192                     u3295:	
  3764  1192  1003               	clrc
  3765  1193  0CF1               	rrf	___wmul@multiplier+1,f
  3766  1194  0CF0               	rrf	___wmul@multiplier,f
  3767  1195  3EFF               	addlw	-1
  3768  1196  1D03               	skipz
  3769  1197  2992               	goto	u3295
  3770  1198  0870               	movf	___wmul@multiplier,w
  3771  1199  0471               	iorwf	___wmul@multiplier+1,w
  3772  119A  1D03               	btfss	3,2
  3773  119B  2982               	goto	l2207
  3774  119C  0875               	movf	___wmul@product+1,w
  3775  119D  00F1               	movwf	?___wmul+1
  3776  119E  0874               	movf	___wmul@product,w
  3777  119F  00F0               	movwf	?___wmul
  3778  11A0  0008               	return
  3779  11A1                     __end_of___wmul:	
  3780                           
  3781                           	psect	text12
  3782  080A                     __ptext12:	
  3783 ;; *************** function ___lltoft *****************
  3784 ;; Defined at:
  3785 ;;		line 35 in file "E:\software\pic\XC8\sources\common\lltoft.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  c               4    8[COMMON] unsigned long 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;  exp             1   13[COMMON] unsigned char 
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  3    8[COMMON] float 
  3792 ;; Registers used:
  3793 ;;		wreg, status,2, status,0, pclath, cstack
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3799 ;;      Params:         4       0       0       0       0
  3800 ;;      Locals:         1       0       0       0       0
  3801 ;;      Temps:          1       0       0       0       0
  3802 ;;      Totals:         6       0       0       0       0
  3803 ;;Total ram usage:        6 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    1
  3806 ;; This function calls:
  3807 ;;		___ftpack
  3808 ;; This function is called by:
  3809 ;;		_sprintf
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           
  3814                           ;psect for function ___lltoft
  3815  080A                     ___lltoft:	
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  3819  080A  308E               	movlw	142
  3820  080B  00FC               	movwf	??___lltoft
  3821  080C  087C               	movf	??___lltoft,w
  3822  080D  00FD               	movwf	___lltoft@exp
  3823  080E                     l2345:	
  3824  080E  30FF               	movlw	255
  3825  080F  057B               	andwf	___lltoft@c+3,w
  3826  0810  1903               	btfsc	3,2
  3827  0811  2820               	goto	l2347
  3828  0812  3001               	movlw	1
  3829  0813                     u3615:	
  3830  0813  1003               	clrc
  3831  0814  0CFB               	rrf	___lltoft@c+3,f
  3832  0815  0CFA               	rrf	___lltoft@c+2,f
  3833  0816  0CF9               	rrf	___lltoft@c+1,f
  3834  0817  0CF8               	rrf	___lltoft@c,f
  3835  0818  3EFF               	addlw	-1
  3836  0819  1D03               	skipz
  3837  081A  2813               	goto	u3615
  3838  081B  3001               	movlw	1
  3839  081C  00FC               	movwf	??___lltoft
  3840  081D  087C               	movf	??___lltoft,w
  3841  081E  07FD               	addwf	___lltoft@exp,f
  3842  081F  280E               	goto	l2345
  3843  0820                     l2347:	
  3844  0820  0878               	movf	___lltoft@c,w
  3845  0821  00F0               	movwf	___ftpack@arg
  3846  0822  0879               	movf	___lltoft@c+1,w
  3847  0823  00F1               	movwf	___ftpack@arg+1
  3848  0824  087A               	movf	___lltoft@c+2,w
  3849  0825  00F2               	movwf	___ftpack@arg+2
  3850  0826  087D               	movf	___lltoft@exp,w
  3851  0827  00FC               	movwf	??___lltoft
  3852  0828  087C               	movf	??___lltoft,w
  3853  0829  00F3               	movwf	___ftpack@exp
  3854  082A  01F4               	clrf	___ftpack@sign
  3855  082B  160A  118A  242C   	fcall	___ftpack
  3856  082E  0870               	movf	?___ftpack,w
  3857  082F  00F8               	movwf	?___lltoft
  3858  0830  0871               	movf	?___ftpack+1,w
  3859  0831  00F9               	movwf	?___lltoft+1
  3860  0832  0872               	movf	?___ftpack+2,w
  3861  0833  00FA               	movwf	?___lltoft+2
  3862  0834  0008               	return
  3863  0835                     __end_of___lltoft:	
  3864                           
  3865                           	psect	text13
  3866  126D                     __ptext13:	
  3867 ;; *************** function ___llmod *****************
  3868 ;; Defined at:
  3869 ;;		line 6 in file "E:\software\pic\XC8\sources\common\llmod.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  divisor         4    0[BANK0 ] unsigned long 
  3872 ;;  dividend        4    4[BANK0 ] unsigned long 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  counter         1    9[BANK0 ] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  4    0[BANK0 ] unsigned long 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3884 ;;      Params:         0       8       0       0       0
  3885 ;;      Locals:         0       1       0       0       0
  3886 ;;      Temps:          0       1       0       0       0
  3887 ;;      Totals:         0      10       0       0       0
  3888 ;;Total ram usage:       10 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_sprintf
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function ___llmod
  3899  126D                     ___llmod:	
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3903  126D  1283               	bcf	3,5	;RP0=0, select bank0
  3904  126E  1303               	bcf	3,6	;RP1=0, select bank0
  3905  126F  0823               	movf	___llmod@divisor+3,w
  3906  1270  0422               	iorwf	___llmod@divisor+2,w
  3907  1271  0421               	iorwf	___llmod@divisor+1,w
  3908  1272  0420               	iorwf	___llmod@divisor,w
  3909  1273  1903               	skipnz
  3910  1274  2AB2               	goto	l2337
  3911  1275  01A9               	clrf	___llmod@counter
  3912  1276  0AA9               	incf	___llmod@counter,f
  3913  1277                     l2327:	
  3914  1277  1BA3               	btfsc	___llmod@divisor+3,7
  3915  1278  2A87               	goto	l2329
  3916  1279  3001               	movlw	1
  3917  127A  00A8               	movwf	??___llmod
  3918  127B                     u3565:	
  3919  127B  1003               	clrc
  3920  127C  0DA0               	rlf	___llmod@divisor,f
  3921  127D  0DA1               	rlf	___llmod@divisor+1,f
  3922  127E  0DA2               	rlf	___llmod@divisor+2,f
  3923  127F  0DA3               	rlf	___llmod@divisor+3,f
  3924  1280  0BA8               	decfsz	??___llmod,f
  3925  1281  2A7B               	goto	u3565
  3926  1282  3001               	movlw	1
  3927  1283  00A8               	movwf	??___llmod
  3928  1284  0828               	movf	??___llmod,w
  3929  1285  07A9               	addwf	___llmod@counter,f
  3930  1286  2A77               	goto	l2327
  3931  1287                     l2329:	
  3932  1287  0823               	movf	___llmod@divisor+3,w
  3933  1288  0227               	subwf	___llmod@dividend+3,w
  3934  1289  1D03               	skipz
  3935  128A  2A95               	goto	u3585
  3936  128B  0822               	movf	___llmod@divisor+2,w
  3937  128C  0226               	subwf	___llmod@dividend+2,w
  3938  128D  1D03               	skipz
  3939  128E  2A95               	goto	u3585
  3940  128F  0821               	movf	___llmod@divisor+1,w
  3941  1290  0225               	subwf	___llmod@dividend+1,w
  3942  1291  1D03               	skipz
  3943  1292  2A95               	goto	u3585
  3944  1293  0820               	movf	___llmod@divisor,w
  3945  1294  0224               	subwf	___llmod@dividend,w
  3946  1295                     u3585:	
  3947  1295  1C03               	skipc
  3948  1296  2AA5               	goto	l2333
  3949  1297  0820               	movf	___llmod@divisor,w
  3950  1298  02A4               	subwf	___llmod@dividend,f
  3951  1299  0821               	movf	___llmod@divisor+1,w
  3952  129A  1C03               	skipc
  3953  129B  0F21               	incfsz	___llmod@divisor+1,w
  3954  129C  02A5               	subwf	___llmod@dividend+1,f
  3955  129D  0822               	movf	___llmod@divisor+2,w
  3956  129E  1C03               	skipc
  3957  129F  0F22               	incfsz	___llmod@divisor+2,w
  3958  12A0  02A6               	subwf	___llmod@dividend+2,f
  3959  12A1  0823               	movf	___llmod@divisor+3,w
  3960  12A2  1C03               	skipc
  3961  12A3  0F23               	incfsz	___llmod@divisor+3,w
  3962  12A4  02A7               	subwf	___llmod@dividend+3,f
  3963  12A5                     l2333:	
  3964  12A5  3001               	movlw	1
  3965  12A6                     u3595:	
  3966  12A6  1003               	clrc
  3967  12A7  0CA3               	rrf	___llmod@divisor+3,f
  3968  12A8  0CA2               	rrf	___llmod@divisor+2,f
  3969  12A9  0CA1               	rrf	___llmod@divisor+1,f
  3970  12AA  0CA0               	rrf	___llmod@divisor,f
  3971  12AB  3EFF               	addlw	-1
  3972  12AC  1D03               	skipz
  3973  12AD  2AA6               	goto	u3595
  3974  12AE  3001               	movlw	1
  3975  12AF  02A9               	subwf	___llmod@counter,f
  3976  12B0  1D03               	btfss	3,2
  3977  12B1  2A87               	goto	l2329
  3978  12B2                     l2337:	
  3979  12B2  0827               	movf	___llmod@dividend+3,w
  3980  12B3  00A3               	movwf	?___llmod+3
  3981  12B4  0826               	movf	___llmod@dividend+2,w
  3982  12B5  00A2               	movwf	?___llmod+2
  3983  12B6  0825               	movf	___llmod@dividend+1,w
  3984  12B7  00A1               	movwf	?___llmod+1
  3985  12B8  0824               	movf	___llmod@dividend,w
  3986  12B9  00A0               	movwf	?___llmod
  3987  12BA  0008               	return
  3988  12BB                     __end_of___llmod:	
  3989                           
  3990                           	psect	text14
  3991  13CE                     __ptext14:	
  3992 ;; *************** function ___lldiv *****************
  3993 ;; Defined at:
  3994 ;;		line 6 in file "E:\software\pic\XC8\sources\common\lldiv.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;  divisor         4    0[COMMON] unsigned long 
  3997 ;;  dividend        4    4[COMMON] unsigned long 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  quotient        4    9[COMMON] unsigned long 
  4000 ;;  counter         1   13[COMMON] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  4    0[COMMON] unsigned long 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4010 ;;      Params:         8       0       0       0       0
  4011 ;;      Locals:         5       0       0       0       0
  4012 ;;      Temps:          1       0       0       0       0
  4013 ;;      Totals:        14       0       0       0       0
  4014 ;;Total ram usage:       14 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_sprintf
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function ___lldiv
  4025  13CE                     ___lldiv:	
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4029  13CE  3000               	movlw	0
  4030  13CF  00FC               	movwf	___lldiv@quotient+3
  4031  13D0  3000               	movlw	0
  4032  13D1  00FB               	movwf	___lldiv@quotient+2
  4033  13D2  3000               	movlw	0
  4034  13D3  00FA               	movwf	___lldiv@quotient+1
  4035  13D4  3000               	movlw	0
  4036  13D5  00F9               	movwf	___lldiv@quotient
  4037  13D6  0873               	movf	___lldiv@divisor+3,w
  4038  13D7  0472               	iorwf	___lldiv@divisor+2,w
  4039  13D8  0471               	iorwf	___lldiv@divisor+1,w
  4040  13D9  0470               	iorwf	___lldiv@divisor,w
  4041  13DA  1903               	skipnz
  4042  13DB  2C23               	goto	l2317
  4043  13DC  01FD               	clrf	___lldiv@counter
  4044  13DD  0AFD               	incf	___lldiv@counter,f
  4045  13DE                     l2303:	
  4046  13DE  1BF3               	btfsc	___lldiv@divisor+3,7
  4047  13DF  2BEE               	goto	l2305
  4048  13E0  3001               	movlw	1
  4049  13E1  00F8               	movwf	??___lldiv
  4050  13E2                     u3495:	
  4051  13E2  1003               	clrc
  4052  13E3  0DF0               	rlf	___lldiv@divisor,f
  4053  13E4  0DF1               	rlf	___lldiv@divisor+1,f
  4054  13E5  0DF2               	rlf	___lldiv@divisor+2,f
  4055  13E6  0DF3               	rlf	___lldiv@divisor+3,f
  4056  13E7  0BF8               	decfsz	??___lldiv,f
  4057  13E8  2BE2               	goto	u3495
  4058  13E9  3001               	movlw	1
  4059  13EA  00F8               	movwf	??___lldiv
  4060  13EB  0878               	movf	??___lldiv,w
  4061  13EC  07FD               	addwf	___lldiv@counter,f
  4062  13ED  2BDE               	goto	l2303
  4063  13EE                     l2305:	
  4064  13EE  3001               	movlw	1
  4065  13EF  00F8               	movwf	??___lldiv
  4066  13F0                     u3515:	
  4067  13F0  1003               	clrc
  4068  13F1  0DF9               	rlf	___lldiv@quotient,f
  4069  13F2  0DFA               	rlf	___lldiv@quotient+1,f
  4070  13F3  0DFB               	rlf	___lldiv@quotient+2,f
  4071  13F4  0DFC               	rlf	___lldiv@quotient+3,f
  4072  13F5  0BF8               	decfsz	??___lldiv,f
  4073  13F6  2BF0               	goto	u3515
  4074  13F7  0873               	movf	___lldiv@divisor+3,w
  4075  13F8  0277               	subwf	___lldiv@dividend+3,w
  4076  13F9  1D03               	skipz
  4077  13FA  2C05               	goto	u3525
  4078  13FB  0872               	movf	___lldiv@divisor+2,w
  4079  13FC  0276               	subwf	___lldiv@dividend+2,w
  4080  13FD  1D03               	skipz
  4081  13FE  2C05               	goto	u3525
  4082  13FF  0871               	movf	___lldiv@divisor+1,w
  4083  1400  0275               	subwf	___lldiv@dividend+1,w
  4084  1401  1D03               	skipz
  4085  1402  2C05               	goto	u3525
  4086  1403  0870               	movf	___lldiv@divisor,w
  4087  1404  0274               	subwf	___lldiv@dividend,w
  4088  1405                     u3525:	
  4089  1405  1C03               	skipc
  4090  1406  2C16               	goto	l2313
  4091  1407  0870               	movf	___lldiv@divisor,w
  4092  1408  02F4               	subwf	___lldiv@dividend,f
  4093  1409  0871               	movf	___lldiv@divisor+1,w
  4094  140A  1C03               	skipc
  4095  140B  0F71               	incfsz	___lldiv@divisor+1,w
  4096  140C  02F5               	subwf	___lldiv@dividend+1,f
  4097  140D  0872               	movf	___lldiv@divisor+2,w
  4098  140E  1C03               	skipc
  4099  140F  0F72               	incfsz	___lldiv@divisor+2,w
  4100  1410  02F6               	subwf	___lldiv@dividend+2,f
  4101  1411  0873               	movf	___lldiv@divisor+3,w
  4102  1412  1C03               	skipc
  4103  1413  0F73               	incfsz	___lldiv@divisor+3,w
  4104  1414  02F7               	subwf	___lldiv@dividend+3,f
  4105  1415  1479               	bsf	___lldiv@quotient,0
  4106  1416                     l2313:	
  4107  1416  3001               	movlw	1
  4108  1417                     u3535:	
  4109  1417  1003               	clrc
  4110  1418  0CF3               	rrf	___lldiv@divisor+3,f
  4111  1419  0CF2               	rrf	___lldiv@divisor+2,f
  4112  141A  0CF1               	rrf	___lldiv@divisor+1,f
  4113  141B  0CF0               	rrf	___lldiv@divisor,f
  4114  141C  3EFF               	addlw	-1
  4115  141D  1D03               	skipz
  4116  141E  2C17               	goto	u3535
  4117  141F  3001               	movlw	1
  4118  1420  02FD               	subwf	___lldiv@counter,f
  4119  1421  1D03               	btfss	3,2
  4120  1422  2BEE               	goto	l2305
  4121  1423                     l2317:	
  4122  1423  087C               	movf	___lldiv@quotient+3,w
  4123  1424  00F3               	movwf	?___lldiv+3
  4124  1425  087B               	movf	___lldiv@quotient+2,w
  4125  1426  00F2               	movwf	?___lldiv+2
  4126  1427  087A               	movf	___lldiv@quotient+1,w
  4127  1428  00F1               	movwf	?___lldiv+1
  4128  1429  0879               	movf	___lldiv@quotient,w
  4129  142A  00F0               	movwf	?___lldiv
  4130  142B  0008               	return
  4131  142C                     __end_of___lldiv:	
  4132                           
  4133                           	psect	text15
  4134  1498                     __ptext15:	
  4135 ;; *************** function ___fttol *****************
  4136 ;; Defined at:
  4137 ;;		line 44 in file "E:\software\pic\XC8\sources\common\fttol.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  f1              3   32[BANK0 ] float 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  lval            4   41[BANK0 ] unsigned long 
  4142 ;;  exp1            1   45[BANK0 ] unsigned char 
  4143 ;;  sign1           1   40[BANK0 ] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  4   32[BANK0 ] long 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4153 ;;      Params:         0       4       0       0       0
  4154 ;;      Locals:         0       6       0       0       0
  4155 ;;      Temps:          0       4       0       0       0
  4156 ;;      Totals:         0      14       0       0       0
  4157 ;;Total ram usage:       14 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_sprintf
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function ___fttol
  4168  1498                     ___fttol:	
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4172  1498  1283               	bcf	3,5	;RP0=0, select bank0
  4173  1499  1303               	bcf	3,6	;RP1=0, select bank0
  4174  149A  0840               	movf	___fttol@f1,w
  4175  149B  00C4               	movwf	??___fttol
  4176  149C  0841               	movf	___fttol@f1+1,w
  4177  149D  00C5               	movwf	??___fttol+1
  4178  149E  0842               	movf	___fttol@f1+2,w
  4179  149F  00C6               	movwf	??___fttol+2
  4180  14A0  1003               	clrc
  4181  14A1  0D45               	rlf	??___fttol+1,w
  4182  14A2  0D46               	rlf	??___fttol+2,w
  4183  14A3  00C7               	movwf	??___fttol+3
  4184  14A4  0847               	movf	??___fttol+3,w
  4185  14A5  00CD               	movwf	___fttol@exp1
  4186  14A6  084D               	movf	___fttol@exp1,w
  4187  14A7  1D03               	btfss	3,2
  4188  14A8  2CB2               	goto	l2261
  4189  14A9  3000               	movlw	0
  4190  14AA  00C3               	movwf	?___fttol+3
  4191  14AB  3000               	movlw	0
  4192  14AC  00C2               	movwf	?___fttol+2
  4193  14AD  3000               	movlw	0
  4194  14AE  00C1               	movwf	?___fttol+1
  4195  14AF  3000               	movlw	0
  4196  14B0  00C0               	movwf	?___fttol
  4197  14B1  0008               	return
  4198  14B2                     l2261:	
  4199  14B2  0840               	movf	___fttol@f1,w
  4200  14B3  00C4               	movwf	??___fttol
  4201  14B4  0841               	movf	___fttol@f1+1,w
  4202  14B5  00C5               	movwf	??___fttol+1
  4203  14B6  0842               	movf	___fttol@f1+2,w
  4204  14B7  00C6               	movwf	??___fttol+2
  4205  14B8  3017               	movlw	23
  4206  14B9                     u3395:	
  4207  14B9  1003               	clrc
  4208  14BA  0CC6               	rrf	??___fttol+2,f
  4209  14BB  0CC5               	rrf	??___fttol+1,f
  4210  14BC  0CC4               	rrf	??___fttol,f
  4211  14BD  3EFF               	addlw	-1
  4212  14BE  1D03               	skipz
  4213  14BF  2CB9               	goto	u3395
  4214  14C0  0844               	movf	??___fttol,w
  4215  14C1  00C7               	movwf	??___fttol+3
  4216  14C2  0847               	movf	??___fttol+3,w
  4217  14C3  00C8               	movwf	___fttol@sign1
  4218  14C4  17C1               	bsf	___fttol@f1+1,7
  4219  14C5  30FF               	movlw	255
  4220  14C6  05C0               	andwf	___fttol@f1,f
  4221  14C7  30FF               	movlw	255
  4222  14C8  05C1               	andwf	___fttol@f1+1,f
  4223  14C9  3000               	movlw	0
  4224  14CA  05C2               	andwf	___fttol@f1+2,f
  4225  14CB  0840               	movf	___fttol@f1,w
  4226  14CC  00C9               	movwf	___fttol@lval
  4227  14CD  0841               	movf	___fttol@f1+1,w
  4228  14CE  00CA               	movwf	___fttol@lval+1
  4229  14CF  0842               	movf	___fttol@f1+2,w
  4230  14D0  00CB               	movwf	___fttol@lval+2
  4231  14D1  01CC               	clrf	___fttol@lval+3
  4232  14D2  308E               	movlw	142
  4233  14D3  02CD               	subwf	___fttol@exp1,f
  4234  14D4  1FCD               	btfss	___fttol@exp1,7
  4235  14D5  2CF4               	goto	l2281
  4236  14D6  084D               	movf	___fttol@exp1,w
  4237  14D7  3A80               	xorlw	128
  4238  14D8  3E8F               	addlw	143
  4239  14D9  1803               	skipnc
  4240  14DA  2CE4               	goto	l2279
  4241  14DB  3000               	movlw	0
  4242  14DC  00C3               	movwf	?___fttol+3
  4243  14DD  3000               	movlw	0
  4244  14DE  00C2               	movwf	?___fttol+2
  4245  14DF  3000               	movlw	0
  4246  14E0  00C1               	movwf	?___fttol+1
  4247  14E1  3000               	movlw	0
  4248  14E2  00C0               	movwf	?___fttol
  4249  14E3  0008               	return
  4250  14E4                     l2279:	
  4251  14E4  3001               	movlw	1
  4252  14E5                     u3425:	
  4253  14E5  1003               	clrc
  4254  14E6  0CCC               	rrf	___fttol@lval+3,f
  4255  14E7  0CCB               	rrf	___fttol@lval+2,f
  4256  14E8  0CCA               	rrf	___fttol@lval+1,f
  4257  14E9  0CC9               	rrf	___fttol@lval,f
  4258  14EA  3EFF               	addlw	-1
  4259  14EB  1D03               	skipz
  4260  14EC  2CE5               	goto	u3425
  4261  14ED  3001               	movlw	1
  4262  14EE  00C4               	movwf	??___fttol
  4263  14EF  0844               	movf	??___fttol,w
  4264  14F0  07CD               	addwf	___fttol@exp1,f
  4265  14F1  1903               	btfsc	3,2
  4266  14F2  2D0F               	goto	l2289
  4267  14F3  2CE4               	goto	l2279
  4268  14F4                     l2281:	
  4269  14F4  3018               	movlw	24
  4270  14F5  024D               	subwf	___fttol@exp1,w
  4271  14F6  1C03               	skipc
  4272  14F7  2D0C               	goto	l584
  4273  14F8  3000               	movlw	0
  4274  14F9  00C3               	movwf	?___fttol+3
  4275  14FA  3000               	movlw	0
  4276  14FB  00C2               	movwf	?___fttol+2
  4277  14FC  3000               	movlw	0
  4278  14FD  00C1               	movwf	?___fttol+1
  4279  14FE  3000               	movlw	0
  4280  14FF  00C0               	movwf	?___fttol
  4281  1500  0008               	return
  4282  1501                     l2287:	
  4283  1501  3001               	movlw	1
  4284  1502  00C4               	movwf	??___fttol
  4285  1503                     u3455:	
  4286  1503  1003               	clrc
  4287  1504  0DC9               	rlf	___fttol@lval,f
  4288  1505  0DCA               	rlf	___fttol@lval+1,f
  4289  1506  0DCB               	rlf	___fttol@lval+2,f
  4290  1507  0DCC               	rlf	___fttol@lval+3,f
  4291  1508  0BC4               	decfsz	??___fttol,f
  4292  1509  2D03               	goto	u3455
  4293  150A  3001               	movlw	1
  4294  150B  02CD               	subwf	___fttol@exp1,f
  4295  150C                     l584:	
  4296  150C  084D               	movf	___fttol@exp1,w
  4297  150D  1D03               	btfss	3,2
  4298  150E  2D01               	goto	l2287
  4299  150F                     l2289:	
  4300  150F  0848               	movf	___fttol@sign1,w
  4301  1510  1903               	btfsc	3,2
  4302  1511  2D1D               	goto	l2293
  4303  1512  09C9               	comf	___fttol@lval,f
  4304  1513  09CA               	comf	___fttol@lval+1,f
  4305  1514  09CB               	comf	___fttol@lval+2,f
  4306  1515  09CC               	comf	___fttol@lval+3,f
  4307  1516  0AC9               	incf	___fttol@lval,f
  4308  1517  1903               	skipnz
  4309  1518  0ACA               	incf	___fttol@lval+1,f
  4310  1519  1903               	skipnz
  4311  151A  0ACB               	incf	___fttol@lval+2,f
  4312  151B  1903               	skipnz
  4313  151C  0ACC               	incf	___fttol@lval+3,f
  4314  151D                     l2293:	
  4315  151D  084C               	movf	___fttol@lval+3,w
  4316  151E  00C3               	movwf	?___fttol+3
  4317  151F  084B               	movf	___fttol@lval+2,w
  4318  1520  00C2               	movwf	?___fttol+2
  4319  1521  084A               	movf	___fttol@lval+1,w
  4320  1522  00C1               	movwf	?___fttol+1
  4321  1523  0849               	movf	___fttol@lval,w
  4322  1524  00C0               	movwf	?___fttol
  4323  1525  0008               	return
  4324  1526                     __end_of___fttol:	
  4325                           
  4326                           	psect	text16
  4327  115F                     __ptext16:	
  4328 ;; *************** function ___ftsub *****************
  4329 ;; Defined at:
  4330 ;;		line 18 in file "E:\software\pic\XC8\sources\common\ftsub.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  f2              3   52[BANK0 ] float 
  4333 ;;  f1              3   55[BANK0 ] float 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  3   52[BANK0 ] float 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4345 ;;      Params:         0       6       0       0       0
  4346 ;;      Locals:         0       0       0       0       0
  4347 ;;      Temps:          0       0       0       0       0
  4348 ;;      Totals:         0       6       0       0       0
  4349 ;;Total ram usage:        6 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    2
  4352 ;; This function calls:
  4353 ;;		___ftadd
  4354 ;; This function is called by:
  4355 ;;		_sprintf
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function ___ftsub
  4361  115F                     ___ftsub:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4365  115F  1283               	bcf	3,5	;RP0=0, select bank0
  4366  1160  1303               	bcf	3,6	;RP1=0, select bank0
  4367  1161  0856               	movf	___ftsub@f2+2,w
  4368  1162  0455               	iorwf	___ftsub@f2+1,w
  4369  1163  0454               	iorwf	___ftsub@f2,w
  4370  1164  1903               	skipnz
  4371  1165  2968               	goto	l2251
  4372  1166  3080               	movlw	128
  4373  1167  06D6               	xorwf	___ftsub@f2+2,f
  4374  1168                     l2251:	
  4375  1168  0857               	movf	___ftsub@f1,w
  4376  1169  00C7               	movwf	___ftadd@f1
  4377  116A  0858               	movf	___ftsub@f1+1,w
  4378  116B  00C8               	movwf	___ftadd@f1+1
  4379  116C  0859               	movf	___ftsub@f1+2,w
  4380  116D  00C9               	movwf	___ftadd@f1+2
  4381  116E  0854               	movf	___ftsub@f2,w
  4382  116F  00CA               	movwf	___ftadd@f2
  4383  1170  0855               	movf	___ftsub@f2+1,w
  4384  1171  00CB               	movwf	___ftadd@f2+1
  4385  1172  0856               	movf	___ftsub@f2+2,w
  4386  1173  00CC               	movwf	___ftadd@f2+2
  4387  1174  160A  118A  25E9   	fcall	___ftadd
  4388  1177  1283               	bcf	3,5	;RP0=0, select bank0
  4389  1178  1303               	bcf	3,6	;RP1=0, select bank0
  4390  1179  0847               	movf	?___ftadd,w
  4391  117A  00D4               	movwf	?___ftsub
  4392  117B  0848               	movf	?___ftadd+1,w
  4393  117C  00D5               	movwf	?___ftsub+1
  4394  117D  0849               	movf	?___ftadd+2,w
  4395  117E  00D6               	movwf	?___ftsub+2
  4396  117F  0008               	return
  4397  1180                     __end_of___ftsub:	
  4398                           
  4399                           	psect	text17
  4400  15E9                     __ptext17:	
  4401 ;; *************** function ___ftadd *****************
  4402 ;; Defined at:
  4403 ;;		line 86 in file "E:\software\pic\XC8\sources\common\ftadd.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  f1              3   39[BANK0 ] float 
  4406 ;;  f2              3   42[BANK0 ] float 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  exp1            1   51[BANK0 ] unsigned char 
  4409 ;;  exp2            1   50[BANK0 ] unsigned char 
  4410 ;;  sign            1   49[BANK0 ] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  3   39[BANK0 ] float 
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4420 ;;      Params:         0       6       0       0       0
  4421 ;;      Locals:         0       3       0       0       0
  4422 ;;      Temps:          0       4       0       0       0
  4423 ;;      Totals:         0      13       0       0       0
  4424 ;;Total ram usage:       13 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    1
  4427 ;; This function calls:
  4428 ;;		___ftpack
  4429 ;; This function is called by:
  4430 ;;		_sprintf
  4431 ;;		___ftsub
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           
  4436                           ;psect for function ___ftadd
  4437  15E9                     ___ftadd:	
  4438                           
  4439                           ;incstack = 0
  4440                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4441  15E9  1283               	bcf	3,5	;RP0=0, select bank0
  4442  15EA  1303               	bcf	3,6	;RP1=0, select bank0
  4443  15EB  0847               	movf	___ftadd@f1,w
  4444  15EC  00CD               	movwf	??___ftadd
  4445  15ED  0848               	movf	___ftadd@f1+1,w
  4446  15EE  00CE               	movwf	??___ftadd+1
  4447  15EF  0849               	movf	___ftadd@f1+2,w
  4448  15F0  00CF               	movwf	??___ftadd+2
  4449  15F1  1003               	clrc
  4450  15F2  0D4E               	rlf	??___ftadd+1,w
  4451  15F3  0D4F               	rlf	??___ftadd+2,w
  4452  15F4  00D0               	movwf	??___ftadd+3
  4453  15F5  0850               	movf	??___ftadd+3,w
  4454  15F6  00D3               	movwf	___ftadd@exp1
  4455  15F7  084A               	movf	___ftadd@f2,w
  4456  15F8  00CD               	movwf	??___ftadd
  4457  15F9  084B               	movf	___ftadd@f2+1,w
  4458  15FA  00CE               	movwf	??___ftadd+1
  4459  15FB  084C               	movf	___ftadd@f2+2,w
  4460  15FC  00CF               	movwf	??___ftadd+2
  4461  15FD  1003               	clrc
  4462  15FE  0D4E               	rlf	??___ftadd+1,w
  4463  15FF  0D4F               	rlf	??___ftadd+2,w
  4464  1600  00D0               	movwf	??___ftadd+3
  4465  1601  0850               	movf	??___ftadd+3,w
  4466  1602  00D2               	movwf	___ftadd@exp2
  4467  1603  0853               	movf	___ftadd@exp1,w
  4468  1604  1903               	btfsc	3,2
  4469  1605  2E12               	goto	l1883
  4470  1606  0852               	movf	___ftadd@exp2,w
  4471  1607  0253               	subwf	___ftadd@exp1,w
  4472  1608  1803               	skipnc
  4473  1609  2E19               	goto	l1887
  4474  160A  0353               	decf	___ftadd@exp1,w
  4475  160B  3AFF               	xorlw	255
  4476  160C  0752               	addwf	___ftadd@exp2,w
  4477  160D  00CD               	movwf	??___ftadd
  4478  160E  3019               	movlw	25
  4479  160F  024D               	subwf	??___ftadd,w
  4480  1610  1C03               	skipc
  4481  1611  2E19               	goto	l1887
  4482  1612                     l1883:	
  4483  1612  084A               	movf	___ftadd@f2,w
  4484  1613  00C7               	movwf	?___ftadd
  4485  1614  084B               	movf	___ftadd@f2+1,w
  4486  1615  00C8               	movwf	?___ftadd+1
  4487  1616  084C               	movf	___ftadd@f2+2,w
  4488  1617  00C9               	movwf	?___ftadd+2
  4489  1618  0008               	return
  4490  1619                     l1887:	
  4491  1619  0852               	movf	___ftadd@exp2,w
  4492  161A  1903               	btfsc	3,2
  4493  161B  0008               	return
  4494  161C  0853               	movf	___ftadd@exp1,w
  4495  161D  0252               	subwf	___ftadd@exp2,w
  4496  161E  1803               	skipnc
  4497  161F  2E28               	goto	l1893
  4498  1620  0352               	decf	___ftadd@exp2,w
  4499  1621  3AFF               	xorlw	255
  4500  1622  0753               	addwf	___ftadd@exp1,w
  4501  1623  00CD               	movwf	??___ftadd
  4502  1624  3019               	movlw	25
  4503  1625  024D               	subwf	??___ftadd,w
  4504  1626  1803               	btfsc	3,0
  4505  1627  0008               	return
  4506  1628                     l1893:	
  4507  1628  3006               	movlw	6
  4508  1629  00CD               	movwf	??___ftadd
  4509  162A  084D               	movf	??___ftadd,w
  4510  162B  00D1               	movwf	___ftadd@sign
  4511  162C  1BC9               	btfsc	___ftadd@f1+2,7
  4512  162D  17D1               	bsf	___ftadd@sign,7
  4513  162E  1BCC               	btfsc	___ftadd@f2+2,7
  4514  162F  1751               	bsf	___ftadd@sign,6
  4515  1630  17C8               	bsf	___ftadd@f1+1,7
  4516  1631  30FF               	movlw	255
  4517  1632  05C7               	andwf	___ftadd@f1,f
  4518  1633  30FF               	movlw	255
  4519  1634  05C8               	andwf	___ftadd@f1+1,f
  4520  1635  3000               	movlw	0
  4521  1636  05C9               	andwf	___ftadd@f1+2,f
  4522  1637  17CB               	bsf	___ftadd@f2+1,7
  4523  1638  30FF               	movlw	255
  4524  1639  05CA               	andwf	___ftadd@f2,f
  4525  163A  30FF               	movlw	255
  4526  163B  05CB               	andwf	___ftadd@f2+1,f
  4527  163C  3000               	movlw	0
  4528  163D  05CC               	andwf	___ftadd@f2+2,f
  4529  163E  0852               	movf	___ftadd@exp2,w
  4530  163F  0253               	subwf	___ftadd@exp1,w
  4531  1640  1803               	skipnc
  4532  1641  2E68               	goto	l1915
  4533  1642                     l1905:	
  4534  1642  3001               	movlw	1
  4535  1643                     u2635:	
  4536  1643  1003               	clrc
  4537  1644  0DCA               	rlf	___ftadd@f2,f
  4538  1645  0DCB               	rlf	___ftadd@f2+1,f
  4539  1646  0DCC               	rlf	___ftadd@f2+2,f
  4540  1647  3EFF               	addlw	-1
  4541  1648  1D03               	skipz
  4542  1649  2E43               	goto	u2635
  4543  164A  3001               	movlw	1
  4544  164B  02D2               	subwf	___ftadd@exp2,f
  4545  164C  0852               	movf	___ftadd@exp2,w
  4546  164D  0653               	xorwf	___ftadd@exp1,w
  4547  164E  1903               	skipnz
  4548  164F  2E63               	goto	l1913
  4549  1650  3001               	movlw	1
  4550  1651  02D1               	subwf	___ftadd@sign,f
  4551  1652  0851               	movf	___ftadd@sign,w
  4552  1653  3907               	andlw	7
  4553  1654  1903               	btfsc	3,2
  4554  1655  2E63               	goto	l1913
  4555  1656  2E42               	goto	l1905
  4556  1657                     l1911:	
  4557  1657  3001               	movlw	1
  4558  1658                     u2665:	
  4559  1658  1003               	clrc
  4560  1659  0CC9               	rrf	___ftadd@f1+2,f
  4561  165A  0CC8               	rrf	___ftadd@f1+1,f
  4562  165B  0CC7               	rrf	___ftadd@f1,f
  4563  165C  3EFF               	addlw	-1
  4564  165D  1D03               	skipz
  4565  165E  2E58               	goto	u2665
  4566  165F  3001               	movlw	1
  4567  1660  00CD               	movwf	??___ftadd
  4568  1661  084D               	movf	??___ftadd,w
  4569  1662  07D3               	addwf	___ftadd@exp1,f
  4570  1663                     l1913:	
  4571  1663  0853               	movf	___ftadd@exp1,w
  4572  1664  0652               	xorwf	___ftadd@exp2,w
  4573  1665  1903               	btfsc	3,2
  4574  1666  2E91               	goto	l507
  4575  1667  2E57               	goto	l1911
  4576  1668                     l1915:	
  4577  1668  0853               	movf	___ftadd@exp1,w
  4578  1669  0252               	subwf	___ftadd@exp2,w
  4579  166A  1803               	skipnc
  4580  166B  2E91               	goto	l507
  4581  166C                     l1917:	
  4582  166C  3001               	movlw	1
  4583  166D                     u2695:	
  4584  166D  1003               	clrc
  4585  166E  0DC7               	rlf	___ftadd@f1,f
  4586  166F  0DC8               	rlf	___ftadd@f1+1,f
  4587  1670  0DC9               	rlf	___ftadd@f1+2,f
  4588  1671  3EFF               	addlw	-1
  4589  1672  1D03               	skipz
  4590  1673  2E6D               	goto	u2695
  4591  1674  3001               	movlw	1
  4592  1675  02D3               	subwf	___ftadd@exp1,f
  4593  1676  0852               	movf	___ftadd@exp2,w
  4594  1677  0653               	xorwf	___ftadd@exp1,w
  4595  1678  1903               	skipnz
  4596  1679  2E8D               	goto	l1925
  4597  167A  3001               	movlw	1
  4598  167B  02D1               	subwf	___ftadd@sign,f
  4599  167C  0851               	movf	___ftadd@sign,w
  4600  167D  3907               	andlw	7
  4601  167E  1903               	btfsc	3,2
  4602  167F  2E8D               	goto	l1925
  4603  1680  2E6C               	goto	l1917
  4604  1681                     l1923:	
  4605  1681  3001               	movlw	1
  4606  1682                     u2725:	
  4607  1682  1003               	clrc
  4608  1683  0CCC               	rrf	___ftadd@f2+2,f
  4609  1684  0CCB               	rrf	___ftadd@f2+1,f
  4610  1685  0CCA               	rrf	___ftadd@f2,f
  4611  1686  3EFF               	addlw	-1
  4612  1687  1D03               	skipz
  4613  1688  2E82               	goto	u2725
  4614  1689  3001               	movlw	1
  4615  168A  00CD               	movwf	??___ftadd
  4616  168B  084D               	movf	??___ftadd,w
  4617  168C  07D2               	addwf	___ftadd@exp2,f
  4618  168D                     l1925:	
  4619  168D  0853               	movf	___ftadd@exp1,w
  4620  168E  0652               	xorwf	___ftadd@exp2,w
  4621  168F  1D03               	skipz
  4622  1690  2E81               	goto	l1923
  4623  1691                     l507:	
  4624  1691  1FD1               	btfss	___ftadd@sign,7
  4625  1692  2EA3               	goto	l1929
  4626  1693  30FF               	movlw	255
  4627  1694  06C7               	xorwf	___ftadd@f1,f
  4628  1695  30FF               	movlw	255
  4629  1696  06C8               	xorwf	___ftadd@f1+1,f
  4630  1697  30FF               	movlw	255
  4631  1698  06C9               	xorwf	___ftadd@f1+2,f
  4632  1699  3001               	movlw	1
  4633  169A  07C7               	addwf	___ftadd@f1,f
  4634  169B  3000               	movlw	0
  4635  169C  1803               	skipnc
  4636  169D  3001               	movlw	1
  4637  169E  07C8               	addwf	___ftadd@f1+1,f
  4638  169F  3000               	movlw	0
  4639  16A0  1803               	skipnc
  4640  16A1  3001               	movlw	1
  4641  16A2  07C9               	addwf	___ftadd@f1+2,f
  4642  16A3                     l1929:	
  4643  16A3  1F51               	btfss	___ftadd@sign,6
  4644  16A4  2EB5               	goto	l1933
  4645  16A5  30FF               	movlw	255
  4646  16A6  06CA               	xorwf	___ftadd@f2,f
  4647  16A7  30FF               	movlw	255
  4648  16A8  06CB               	xorwf	___ftadd@f2+1,f
  4649  16A9  30FF               	movlw	255
  4650  16AA  06CC               	xorwf	___ftadd@f2+2,f
  4651  16AB  3001               	movlw	1
  4652  16AC  07CA               	addwf	___ftadd@f2,f
  4653  16AD  3000               	movlw	0
  4654  16AE  1803               	skipnc
  4655  16AF  3001               	movlw	1
  4656  16B0  07CB               	addwf	___ftadd@f2+1,f
  4657  16B1  3000               	movlw	0
  4658  16B2  1803               	skipnc
  4659  16B3  3001               	movlw	1
  4660  16B4  07CC               	addwf	___ftadd@f2+2,f
  4661  16B5                     l1933:	
  4662  16B5  01D1               	clrf	___ftadd@sign
  4663  16B6  0847               	movf	___ftadd@f1,w
  4664  16B7  07CA               	addwf	___ftadd@f2,f
  4665  16B8  0848               	movf	___ftadd@f1+1,w
  4666  16B9  1103               	clrz
  4667  16BA  1803               	skipnc
  4668  16BB  0A48               	incf	___ftadd@f1+1,w
  4669  16BC  1D03               	btfss	3,2
  4670  16BD  07CB               	addwf	___ftadd@f2+1,f
  4671  16BE  0849               	movf	___ftadd@f1+2,w
  4672  16BF  1103               	clrz
  4673  16C0  1803               	skipnc
  4674  16C1  0A49               	incf	___ftadd@f1+2,w
  4675  16C2  1D03               	btfss	3,2
  4676  16C3  07CC               	addwf	___ftadd@f2+2,f
  4677  16C4  1FCC               	btfss	___ftadd@f2+2,7
  4678  16C5  2ED8               	goto	l1943
  4679  16C6  30FF               	movlw	255
  4680  16C7  06CA               	xorwf	___ftadd@f2,f
  4681  16C8  30FF               	movlw	255
  4682  16C9  06CB               	xorwf	___ftadd@f2+1,f
  4683  16CA  30FF               	movlw	255
  4684  16CB  06CC               	xorwf	___ftadd@f2+2,f
  4685  16CC  3001               	movlw	1
  4686  16CD  07CA               	addwf	___ftadd@f2,f
  4687  16CE  3000               	movlw	0
  4688  16CF  1803               	skipnc
  4689  16D0  3001               	movlw	1
  4690  16D1  07CB               	addwf	___ftadd@f2+1,f
  4691  16D2  3000               	movlw	0
  4692  16D3  1803               	skipnc
  4693  16D4  3001               	movlw	1
  4694  16D5  07CC               	addwf	___ftadd@f2+2,f
  4695  16D6  01D1               	clrf	___ftadd@sign
  4696  16D7  0AD1               	incf	___ftadd@sign,f
  4697  16D8                     l1943:	
  4698  16D8  084A               	movf	___ftadd@f2,w
  4699  16D9  00F0               	movwf	___ftpack@arg
  4700  16DA  084B               	movf	___ftadd@f2+1,w
  4701  16DB  00F1               	movwf	___ftpack@arg+1
  4702  16DC  084C               	movf	___ftadd@f2+2,w
  4703  16DD  00F2               	movwf	___ftpack@arg+2
  4704  16DE  0853               	movf	___ftadd@exp1,w
  4705  16DF  00CD               	movwf	??___ftadd
  4706  16E0  084D               	movf	??___ftadd,w
  4707  16E1  00F3               	movwf	___ftpack@exp
  4708  16E2  0851               	movf	___ftadd@sign,w
  4709  16E3  00CE               	movwf	??___ftadd+1
  4710  16E4  084E               	movf	??___ftadd+1,w
  4711  16E5  00F4               	movwf	___ftpack@sign
  4712  16E6  160A  118A  242C   	fcall	___ftpack
  4713  16E9  0870               	movf	?___ftpack,w
  4714  16EA  1283               	bcf	3,5	;RP0=0, select bank0
  4715  16EB  1303               	bcf	3,6	;RP1=0, select bank0
  4716  16EC  00C7               	movwf	?___ftadd
  4717  16ED  0871               	movf	?___ftpack+1,w
  4718  16EE  00C8               	movwf	?___ftadd+1
  4719  16EF  0872               	movf	?___ftpack+2,w
  4720  16F0  00C9               	movwf	?___ftadd+2
  4721  16F1  0008               	return
  4722  16F2                     __end_of___ftadd:	
  4723                           
  4724                           	psect	text18
  4725  142C                     __ptext18:	
  4726 ;; *************** function ___ftpack *****************
  4727 ;; Defined at:
  4728 ;;		line 62 in file "E:\software\pic\XC8\sources\common\float.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  arg             3    0[COMMON] unsigned um
  4731 ;;  exp             1    3[COMMON] unsigned char 
  4732 ;;  sign            1    4[COMMON] unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  3    0[COMMON] float 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4744 ;;      Params:         5       0       0       0       0
  4745 ;;      Locals:         0       0       0       0       0
  4746 ;;      Temps:          3       0       0       0       0
  4747 ;;      Totals:         8       0       0       0       0
  4748 ;;Total ram usage:        8 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		___ftadd
  4754 ;;		___ftmul
  4755 ;;		___lltoft
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function ___ftpack
  4761  142C                     ___ftpack:	
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4765  142C  0873               	movf	___ftpack@exp,w
  4766  142D  1903               	btfsc	3,2
  4767  142E  2C34               	goto	l1743
  4768  142F  0872               	movf	___ftpack@arg+2,w
  4769  1430  0471               	iorwf	___ftpack@arg+1,w
  4770  1431  0470               	iorwf	___ftpack@arg,w
  4771  1432  1D03               	skipz
  4772  1433  2C47               	goto	l1749
  4773  1434                     l1743:	
  4774  1434  3000               	movlw	0
  4775  1435  00F0               	movwf	?___ftpack
  4776  1436  3000               	movlw	0
  4777  1437  00F1               	movwf	?___ftpack+1
  4778  1438  3000               	movlw	0
  4779  1439  00F2               	movwf	?___ftpack+2
  4780  143A  0008               	return
  4781  143B                     l1747:	
  4782  143B  3001               	movlw	1
  4783  143C  00F5               	movwf	??___ftpack
  4784  143D  0875               	movf	??___ftpack,w
  4785  143E  07F3               	addwf	___ftpack@exp,f
  4786  143F  3001               	movlw	1
  4787  1440                     u2195:	
  4788  1440  1003               	clrc
  4789  1441  0CF2               	rrf	___ftpack@arg+2,f
  4790  1442  0CF1               	rrf	___ftpack@arg+1,f
  4791  1443  0CF0               	rrf	___ftpack@arg,f
  4792  1444  3EFF               	addlw	-1
  4793  1445  1D03               	skipz
  4794  1446  2C40               	goto	u2195
  4795  1447                     l1749:	
  4796  1447  30FE               	movlw	254
  4797  1448  0572               	andwf	___ftpack@arg+2,w
  4798  1449  1903               	btfsc	3,2
  4799  144A  2C62               	goto	l476
  4800  144B  2C3B               	goto	l1747
  4801  144C                     l1751:	
  4802  144C  3001               	movlw	1
  4803  144D  00F5               	movwf	??___ftpack
  4804  144E  0875               	movf	??___ftpack,w
  4805  144F  07F3               	addwf	___ftpack@exp,f
  4806  1450  3001               	movlw	1
  4807  1451  07F0               	addwf	___ftpack@arg,f
  4808  1452  3000               	movlw	0
  4809  1453  1803               	skipnc
  4810  1454  3001               	movlw	1
  4811  1455  07F1               	addwf	___ftpack@arg+1,f
  4812  1456  3000               	movlw	0
  4813  1457  1803               	skipnc
  4814  1458  3001               	movlw	1
  4815  1459  07F2               	addwf	___ftpack@arg+2,f
  4816  145A  3001               	movlw	1
  4817  145B                     u2215:	
  4818  145B  1003               	clrc
  4819  145C  0CF2               	rrf	___ftpack@arg+2,f
  4820  145D  0CF1               	rrf	___ftpack@arg+1,f
  4821  145E  0CF0               	rrf	___ftpack@arg,f
  4822  145F  3EFF               	addlw	-1
  4823  1460  1D03               	skipz
  4824  1461  2C5B               	goto	u2215
  4825  1462                     l476:	
  4826  1462  30FF               	movlw	255
  4827  1463  0572               	andwf	___ftpack@arg+2,w
  4828  1464  1903               	btfsc	3,2
  4829  1465  2C71               	goto	l1759
  4830  1466  2C4C               	goto	l1751
  4831  1467                     l1757:	
  4832  1467  3001               	movlw	1
  4833  1468  02F3               	subwf	___ftpack@exp,f
  4834  1469  3001               	movlw	1
  4835  146A                     u2235:	
  4836  146A  1003               	clrc
  4837  146B  0DF0               	rlf	___ftpack@arg,f
  4838  146C  0DF1               	rlf	___ftpack@arg+1,f
  4839  146D  0DF2               	rlf	___ftpack@arg+2,f
  4840  146E  3EFF               	addlw	-1
  4841  146F  1D03               	skipz
  4842  1470  2C6A               	goto	u2235
  4843  1471                     l1759:	
  4844  1471  1BF1               	btfsc	___ftpack@arg+1,7
  4845  1472  2C77               	goto	l483
  4846  1473  3002               	movlw	2
  4847  1474  0273               	subwf	___ftpack@exp,w
  4848  1475  1803               	skipnc
  4849  1476  2C67               	goto	l1757
  4850  1477                     l483:	
  4851  1477  1873               	btfsc	___ftpack@exp,0
  4852  1478  2C7F               	goto	l484
  4853  1479  30FF               	movlw	255
  4854  147A  05F0               	andwf	___ftpack@arg,f
  4855  147B  307F               	movlw	127
  4856  147C  05F1               	andwf	___ftpack@arg+1,f
  4857  147D  30FF               	movlw	255
  4858  147E  05F2               	andwf	___ftpack@arg+2,f
  4859  147F                     l484:	
  4860  147F  1003               	clrc
  4861  1480  0CF3               	rrf	___ftpack@exp,f
  4862  1481  0873               	movf	___ftpack@exp,w
  4863  1482  00F5               	movwf	??___ftpack
  4864  1483  01F6               	clrf	??___ftpack+1
  4865  1484  01F7               	clrf	??___ftpack+2
  4866  1485  3010               	movlw	16
  4867  1486                     u2275:	
  4868  1486  1003               	clrc
  4869  1487  0DF5               	rlf	??___ftpack,f
  4870  1488  0DF6               	rlf	??___ftpack+1,f
  4871  1489  0DF7               	rlf	??___ftpack+2,f
  4872  148A  3EFF               	addlw	-1
  4873  148B  1D03               	skipz
  4874  148C  2C86               	goto	u2275
  4875  148D  0875               	movf	??___ftpack,w
  4876  148E  04F0               	iorwf	___ftpack@arg,f
  4877  148F  0876               	movf	??___ftpack+1,w
  4878  1490  04F1               	iorwf	___ftpack@arg+1,f
  4879  1491  0877               	movf	??___ftpack+2,w
  4880  1492  04F2               	iorwf	___ftpack@arg+2,f
  4881  1493  0874               	movf	___ftpack@sign,w
  4882  1494  1903               	btfsc	3,2
  4883  1495  0008               	return
  4884  1496  17F2               	bsf	___ftpack@arg+2,7
  4885  1497  0008               	return
  4886  1498                     __end_of___ftpack:	
  4887                           
  4888                           	psect	text19
  4889  0802                     __ptext19:	
  4890 ;; *************** function ___ftneg *****************
  4891 ;; Defined at:
  4892 ;;		line 15 in file "E:\software\pic\XC8\sources\common\ftneg.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  f1              3    0[COMMON] float 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  3    0[COMMON] float 
  4899 ;; Registers used:
  4900 ;;		wreg
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4906 ;;      Params:         3       0       0       0       0
  4907 ;;      Locals:         0       0       0       0       0
  4908 ;;      Temps:          0       0       0       0       0
  4909 ;;      Totals:         3       0       0       0       0
  4910 ;;Total ram usage:        3 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_sprintf
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function ___ftneg
  4921  0802                     ___ftneg:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in ___ftneg: [wreg]
  4925  0802  0872               	movf	___ftneg@f1+2,w
  4926  0803  0471               	iorwf	___ftneg@f1+1,w
  4927  0804  0470               	iorwf	___ftneg@f1,w
  4928  0805  1903               	skipnz
  4929  0806  0008               	return
  4930  0807  3080               	movlw	128
  4931  0808  06F2               	xorwf	___ftneg@f1+2,f
  4932  0809  0008               	return
  4933  080A                     __end_of___ftneg:	
  4934                           
  4935                           	psect	text20
  4936  1371                     __ptext20:	
  4937 ;; *************** function ___ftge *****************
  4938 ;; Defined at:
  4939 ;;		line 4 in file "E:\software\pic\XC8\sources\common\ftge.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  ff1             3    0[COMMON] float 
  4942 ;;  ff2             3    3[COMMON] float 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;		None
  4945 ;; Return value:  Size  Location     Type
  4946 ;;		None               void
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4954 ;;      Params:         6       0       0       0       0
  4955 ;;      Locals:         0       0       0       0       0
  4956 ;;      Temps:          6       0       0       0       0
  4957 ;;      Totals:        12       0       0       0       0
  4958 ;;Total ram usage:       12 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_sprintf
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function ___ftge
  4969  1371                     ___ftge:	
  4970                           
  4971                           ;incstack = 0
  4972                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4973  1371  1FF2               	btfss	___ftge@ff1+2,7
  4974  1372  2B98               	goto	l2223
  4975  1373  3000               	movlw	0
  4976  1374  00F6               	movwf	??___ftge
  4977  1375  3000               	movlw	0
  4978  1376  00F7               	movwf	??___ftge+1
  4979  1377  3080               	movlw	128
  4980  1378  00F8               	movwf	??___ftge+2
  4981  1379  0970               	comf	___ftge@ff1,w
  4982  137A  00F9               	movwf	??___ftge+3
  4983  137B  0971               	comf	___ftge@ff1+1,w
  4984  137C  00FA               	movwf	??___ftge+4
  4985  137D  0972               	comf	___ftge@ff1+2,w
  4986  137E  00FB               	movwf	??___ftge+5
  4987  137F  0AF9               	incf	??___ftge+3,f
  4988  1380  1903               	skipnz
  4989  1381  0AFA               	incf	??___ftge+4,f
  4990  1382  1903               	skipnz
  4991  1383  0AFB               	incf	??___ftge+5,f
  4992  1384  0879               	movf	??___ftge+3,w
  4993  1385  07F6               	addwf	??___ftge,f
  4994  1386  087A               	movf	??___ftge+4,w
  4995  1387  1803               	skipnc
  4996  1388  0F7A               	incfsz	??___ftge+4,w
  4997  1389  2B8B               	goto	u3321
  4998  138A  2B8C               	goto	u3322
  4999  138B                     u3321:	
  5000  138B  07F7               	addwf	??___ftge+1,f
  5001  138C                     u3322:	
  5002  138C  087B               	movf	??___ftge+5,w
  5003  138D  1803               	skipnc
  5004  138E  0F7B               	incfsz	??___ftge+5,w
  5005  138F  2B91               	goto	u3323
  5006  1390  2B92               	goto	u3324
  5007  1391                     u3323:	
  5008  1391  07F8               	addwf	??___ftge+2,f
  5009  1392                     u3324:	
  5010  1392  0876               	movf	??___ftge,w
  5011  1393  00F0               	movwf	___ftge@ff1
  5012  1394  0877               	movf	??___ftge+1,w
  5013  1395  00F1               	movwf	___ftge@ff1+1
  5014  1396  0878               	movf	??___ftge+2,w
  5015  1397  00F2               	movwf	___ftge@ff1+2
  5016  1398                     l2223:	
  5017  1398  1FF5               	btfss	___ftge@ff2+2,7
  5018  1399  2BBF               	goto	l2227
  5019  139A  3000               	movlw	0
  5020  139B  00F6               	movwf	??___ftge
  5021  139C  3000               	movlw	0
  5022  139D  00F7               	movwf	??___ftge+1
  5023  139E  3080               	movlw	128
  5024  139F  00F8               	movwf	??___ftge+2
  5025  13A0  0973               	comf	___ftge@ff2,w
  5026  13A1  00F9               	movwf	??___ftge+3
  5027  13A2  0974               	comf	___ftge@ff2+1,w
  5028  13A3  00FA               	movwf	??___ftge+4
  5029  13A4  0975               	comf	___ftge@ff2+2,w
  5030  13A5  00FB               	movwf	??___ftge+5
  5031  13A6  0AF9               	incf	??___ftge+3,f
  5032  13A7  1903               	skipnz
  5033  13A8  0AFA               	incf	??___ftge+4,f
  5034  13A9  1903               	skipnz
  5035  13AA  0AFB               	incf	??___ftge+5,f
  5036  13AB  0879               	movf	??___ftge+3,w
  5037  13AC  07F6               	addwf	??___ftge,f
  5038  13AD  087A               	movf	??___ftge+4,w
  5039  13AE  1803               	skipnc
  5040  13AF  0F7A               	incfsz	??___ftge+4,w
  5041  13B0  2BB2               	goto	u3341
  5042  13B1  2BB3               	goto	u3342
  5043  13B2                     u3341:	
  5044  13B2  07F7               	addwf	??___ftge+1,f
  5045  13B3                     u3342:	
  5046  13B3  087B               	movf	??___ftge+5,w
  5047  13B4  1803               	skipnc
  5048  13B5  0F7B               	incfsz	??___ftge+5,w
  5049  13B6  2BB8               	goto	u3343
  5050  13B7  2BB9               	goto	u3344
  5051  13B8                     u3343:	
  5052  13B8  07F8               	addwf	??___ftge+2,f
  5053  13B9                     u3344:	
  5054  13B9  0876               	movf	??___ftge,w
  5055  13BA  00F3               	movwf	___ftge@ff2
  5056  13BB  0877               	movf	??___ftge+1,w
  5057  13BC  00F4               	movwf	___ftge@ff2+1
  5058  13BD  0878               	movf	??___ftge+2,w
  5059  13BE  00F5               	movwf	___ftge@ff2+2
  5060  13BF                     l2227:	
  5061  13BF  3080               	movlw	128
  5062  13C0  06F2               	xorwf	___ftge@ff1+2,f
  5063  13C1  3080               	movlw	128
  5064  13C2  06F5               	xorwf	___ftge@ff2+2,f
  5065  13C3  0875               	movf	___ftge@ff2+2,w
  5066  13C4  0272               	subwf	___ftge@ff1+2,w
  5067  13C5  1D03               	skipz
  5068  13C6  0008               	return
  5069  13C7  0874               	movf	___ftge@ff2+1,w
  5070  13C8  0271               	subwf	___ftge@ff1+1,w
  5071  13C9  1D03               	skipz
  5072  13CA  0008               	return
  5073  13CB  0873               	movf	___ftge@ff2,w
  5074  13CC  0270               	subwf	___ftge@ff1,w
  5075  13CD  0008               	return
  5076  13CE                     __end_of___ftge:	
  5077                           
  5078                           	psect	text21
  5079  1140                     __ptext21:	
  5080 ;; *************** function _Lcd_Write_String *****************
  5081 ;; Defined at:
  5082 ;;		line 95 in file "lcd.h"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  a               1    wreg     PTR unsigned char 
  5085 ;;		 -> main@line2(16), main@line1(16), 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  a               1    8[COMMON] PTR unsigned char 
  5088 ;;		 -> main@line2(16), main@line1(16), 
  5089 ;;  i               2    6[COMMON] int 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      void 
  5092 ;; Registers used:
  5093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5099 ;;      Params:         0       0       0       0       0
  5100 ;;      Locals:         3       0       0       0       0
  5101 ;;      Temps:          1       0       0       0       0
  5102 ;;      Totals:         4       0       0       0       0
  5103 ;;Total ram usage:        4 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    2
  5106 ;; This function calls:
  5107 ;;		_Lcd_Write_Char
  5108 ;; This function is called by:
  5109 ;;		_main
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _Lcd_Write_String
  5115  1140                     _Lcd_Write_String:	
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5119                           ;Lcd_Write_String@a stored from wreg
  5120  1140  00F8               	movwf	Lcd_Write_String@a
  5121                           
  5122                           ;lcd.h: 97: int i;
  5123                           ;lcd.h: 98: for(i=0;a[i]!='\0';i++)
  5124  1141  01F6               	clrf	Lcd_Write_String@i
  5125  1142  01F7               	clrf	Lcd_Write_String@i+1
  5126  1143                     l2391:	
  5127  1143  0876               	movf	Lcd_Write_String@i,w
  5128  1144  0778               	addwf	Lcd_Write_String@a,w
  5129  1145  00F5               	movwf	??_Lcd_Write_String
  5130  1146  0875               	movf	??_Lcd_Write_String,w
  5131  1147  0084               	movwf	4
  5132  1148  1383               	bcf	3,7	;select IRP bank0
  5133  1149  0800               	movf	0,w
  5134  114A  1903               	btfsc	3,2
  5135  114B  0008               	return
  5136                           
  5137                           ;lcd.h: 99: Lcd_Write_Char(a[i]);
  5138  114C  0876               	movf	Lcd_Write_String@i,w
  5139  114D  0778               	addwf	Lcd_Write_String@a,w
  5140  114E  00F5               	movwf	??_Lcd_Write_String
  5141  114F  0875               	movf	??_Lcd_Write_String,w
  5142  1150  0084               	movwf	4
  5143  1151  1383               	bcf	3,7	;select IRP bank0
  5144  1152  0800               	movf	0,w
  5145  1153  160A  118A  21A1  160A  118A  	fcall	_Lcd_Write_Char
  5146  1158  3001               	movlw	1
  5147  1159  07F6               	addwf	Lcd_Write_String@i,f
  5148  115A  1803               	skipnc
  5149  115B  0AF7               	incf	Lcd_Write_String@i+1,f
  5150  115C  3000               	movlw	0
  5151  115D  07F7               	addwf	Lcd_Write_String@i+1,f
  5152  115E  2943               	goto	l2391
  5153  115F                     __end_of_Lcd_Write_String:	
  5154                           
  5155                           	psect	text22
  5156  11A1                     __ptext22:	
  5157 ;; *************** function _Lcd_Write_Char *****************
  5158 ;; Defined at:
  5159 ;;		line 79 in file "lcd.h"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  a               1    wreg     unsigned char 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  a               1    4[COMMON] unsigned char 
  5164 ;;  y               1    3[COMMON] unsigned char 
  5165 ;;  temp            1    2[COMMON] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0, pclath, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5175 ;;      Params:         0       0       0       0       0
  5176 ;;      Locals:         3       0       0       0       0
  5177 ;;      Temps:          1       0       0       0       0
  5178 ;;      Totals:         4       0       0       0       0
  5179 ;;Total ram usage:        4 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    1
  5182 ;; This function calls:
  5183 ;;		_Lcd_Port
  5184 ;; This function is called by:
  5185 ;;		_Lcd_Write_String
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           
  5190                           ;psect for function _Lcd_Write_Char
  5191  11A1                     _Lcd_Write_Char:	
  5192                           
  5193                           ;incstack = 0
  5194                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5195                           ;Lcd_Write_Char@a stored from wreg
  5196  11A1  00F4               	movwf	Lcd_Write_Char@a
  5197                           
  5198                           ;lcd.h: 81: char temp,y;
  5199                           ;lcd.h: 82: temp = a & 0x0FU;
  5200  11A2  0874               	movf	Lcd_Write_Char@a,w
  5201  11A3  390F               	andlw	15
  5202  11A4  00F1               	movwf	??_Lcd_Write_Char
  5203  11A5  0871               	movf	??_Lcd_Write_Char,w
  5204  11A6  00F2               	movwf	Lcd_Write_Char@temp
  5205                           
  5206                           ;lcd.h: 83: y = a & 0xF0U;
  5207  11A7  0874               	movf	Lcd_Write_Char@a,w
  5208  11A8  39F0               	andlw	240
  5209  11A9  00F1               	movwf	??_Lcd_Write_Char
  5210  11AA  0871               	movf	??_Lcd_Write_Char,w
  5211  11AB  00F3               	movwf	Lcd_Write_Char@y
  5212                           
  5213                           ;lcd.h: 84: RC4 = 1;
  5214  11AC  1283               	bcf	3,5	;RP0=0, select bank0
  5215  11AD  1303               	bcf	3,6	;RP1=0, select bank0
  5216  11AE  1607               	bsf	7,4	;volatile
  5217                           
  5218                           ;lcd.h: 85: Lcd_Port((unsigned)y>>4);
  5219  11AF  0873               	movf	Lcd_Write_Char@y,w
  5220  11B0  00F1               	movwf	??_Lcd_Write_Char
  5221  11B1  3004               	movlw	4
  5222  11B2                     u2925:	
  5223  11B2  1003               	clrc
  5224  11B3  0CF1               	rrf	??_Lcd_Write_Char,f
  5225  11B4  3EFF               	addlw	-1
  5226  11B5  1D03               	skipz
  5227  11B6  29B2               	goto	u2925
  5228  11B7  0871               	movf	??_Lcd_Write_Char,w
  5229  11B8  160A  118A  210C  160A  118A  	fcall	_Lcd_Port
  5230                           
  5231                           ;lcd.h: 86: RC5 = 1;
  5232  11BD  1283               	bcf	3,5	;RP0=0, select bank0
  5233  11BE  1303               	bcf	3,6	;RP1=0, select bank0
  5234  11BF  1687               	bsf	7,5	;volatile
  5235                           
  5236                           ;lcd.h: 87: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5237  11C0  300D               	movlw	13
  5238  11C1  00F1               	movwf	??_Lcd_Write_Char
  5239  11C2                     u4337:	
  5240  11C2  0BF1               	decfsz	??_Lcd_Write_Char,f
  5241  11C3  29C2               	goto	u4337
  5242                           
  5243                           ;lcd.h: 88: RC5 = 0;
  5244  11C4  1283               	bcf	3,5	;RP0=0, select bank0
  5245  11C5  1303               	bcf	3,6	;RP1=0, select bank0
  5246  11C6  1287               	bcf	7,5	;volatile
  5247                           
  5248                           ;lcd.h: 89: Lcd_Port(temp);
  5249  11C7  0872               	movf	Lcd_Write_Char@temp,w
  5250  11C8  160A  118A  210C  160A  118A  	fcall	_Lcd_Port
  5251                           
  5252                           ;lcd.h: 90: RC5 = 1;
  5253  11CD  1283               	bcf	3,5	;RP0=0, select bank0
  5254  11CE  1303               	bcf	3,6	;RP1=0, select bank0
  5255  11CF  1687               	bsf	7,5	;volatile
  5256                           
  5257                           ;lcd.h: 91: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5258  11D0  300D               	movlw	13
  5259  11D1  00F1               	movwf	??_Lcd_Write_Char
  5260  11D2                     u4347:	
  5261  11D2  0BF1               	decfsz	??_Lcd_Write_Char,f
  5262  11D3  29D2               	goto	u4347
  5263                           
  5264                           ;lcd.h: 92: RC5 = 0;
  5265  11D4  1283               	bcf	3,5	;RP0=0, select bank0
  5266  11D5  1303               	bcf	3,6	;RP1=0, select bank0
  5267  11D6  1287               	bcf	7,5	;volatile
  5268  11D7  0008               	return
  5269  11D8                     __end_of_Lcd_Write_Char:	
  5270                           
  5271                           	psect	text23
  5272  11D8                     __ptext23:	
  5273 ;; *************** function _Lcd_Set_Cursor *****************
  5274 ;; Defined at:
  5275 ;;		line 39 in file "lcd.h"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  a               1    wreg     unsigned char 
  5278 ;;  b               1    4[COMMON] unsigned char 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  a               1    7[COMMON] unsigned char 
  5281 ;;  temp            1   10[COMMON] unsigned char 
  5282 ;;  y               1    9[COMMON] unsigned char 
  5283 ;;  z               1    8[COMMON] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0, pclath, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5293 ;;      Params:         1       0       0       0       0
  5294 ;;      Locals:         4       0       0       0       0
  5295 ;;      Temps:          2       0       0       0       0
  5296 ;;      Totals:         7       0       0       0       0
  5297 ;;Total ram usage:        7 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    2
  5300 ;; This function calls:
  5301 ;;		_Lcd_Cmd
  5302 ;; This function is called by:
  5303 ;;		_main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _Lcd_Set_Cursor
  5309  11D8                     _Lcd_Set_Cursor:	
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5313                           ;Lcd_Set_Cursor@a stored from wreg
  5314  11D8  00F7               	movwf	Lcd_Set_Cursor@a
  5315                           
  5316                           ;lcd.h: 41: char temp,z,y;
  5317                           ;lcd.h: 42: if(a == 1)
  5318  11D9  0377               	decf	Lcd_Set_Cursor@a,w
  5319  11DA  1D03               	btfss	3,2
  5320  11DB  29FD               	goto	l2365
  5321                           
  5322                           ;lcd.h: 43: {
  5323                           ;lcd.h: 44: temp = 0x80U + b - 1U;
  5324  11DC  0874               	movf	Lcd_Set_Cursor@b,w
  5325  11DD  3E7F               	addlw	127
  5326  11DE  00F5               	movwf	??_Lcd_Set_Cursor
  5327  11DF  0875               	movf	??_Lcd_Set_Cursor,w
  5328  11E0  00FA               	movwf	Lcd_Set_Cursor@temp
  5329                           
  5330                           ;lcd.h: 45: z = (unsigned)temp>>4;
  5331  11E1  087A               	movf	Lcd_Set_Cursor@temp,w
  5332  11E2  00F5               	movwf	??_Lcd_Set_Cursor
  5333  11E3  3004               	movlw	4
  5334  11E4                     u3645:	
  5335  11E4  1003               	clrc
  5336  11E5  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5337  11E6  3EFF               	addlw	-1
  5338  11E7  1D03               	skipz
  5339  11E8  29E4               	goto	u3645
  5340  11E9  0875               	movf	??_Lcd_Set_Cursor,w
  5341  11EA  00F6               	movwf	??_Lcd_Set_Cursor+1
  5342  11EB  0876               	movf	??_Lcd_Set_Cursor+1,w
  5343  11EC  00F8               	movwf	Lcd_Set_Cursor@z
  5344                           
  5345                           ;lcd.h: 46: y = temp & 0x0FU;
  5346  11ED  087A               	movf	Lcd_Set_Cursor@temp,w
  5347  11EE  390F               	andlw	15
  5348  11EF  00F5               	movwf	??_Lcd_Set_Cursor
  5349  11F0  0875               	movf	??_Lcd_Set_Cursor,w
  5350  11F1  00F9               	movwf	Lcd_Set_Cursor@y
  5351                           
  5352                           ;lcd.h: 47: Lcd_Cmd(z);
  5353  11F2  0878               	movf	Lcd_Set_Cursor@z,w
  5354  11F3  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5355                           
  5356                           ;lcd.h: 48: Lcd_Cmd(y);
  5357  11F8  0879               	movf	Lcd_Set_Cursor@y,w
  5358  11F9  160A  118A  2126   	fcall	_Lcd_Cmd
  5359                           
  5360                           ;lcd.h: 49: }
  5361  11FC  0008               	return
  5362  11FD                     l2365:	
  5363                           
  5364                           ;lcd.h: 50: else if(a == 2)
  5365  11FD  3002               	movlw	2
  5366  11FE  0677               	xorwf	Lcd_Set_Cursor@a,w
  5367  11FF  1D03               	btfss	3,2
  5368  1200  0008               	return
  5369                           
  5370                           ;lcd.h: 51: {
  5371                           ;lcd.h: 52: temp = 0xC0U + b - 1U;
  5372  1201  0874               	movf	Lcd_Set_Cursor@b,w
  5373  1202  3EBF               	addlw	191
  5374  1203  00F5               	movwf	??_Lcd_Set_Cursor
  5375  1204  0875               	movf	??_Lcd_Set_Cursor,w
  5376  1205  00FA               	movwf	Lcd_Set_Cursor@temp
  5377                           
  5378                           ;lcd.h: 53: z = (unsigned)temp>>4;
  5379  1206  087A               	movf	Lcd_Set_Cursor@temp,w
  5380  1207  00F5               	movwf	??_Lcd_Set_Cursor
  5381  1208  3004               	movlw	4
  5382  1209                     u3665:	
  5383  1209  1003               	clrc
  5384  120A  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5385  120B  3EFF               	addlw	-1
  5386  120C  1D03               	skipz
  5387  120D  2A09               	goto	u3665
  5388  120E  0875               	movf	??_Lcd_Set_Cursor,w
  5389  120F  00F6               	movwf	??_Lcd_Set_Cursor+1
  5390  1210  0876               	movf	??_Lcd_Set_Cursor+1,w
  5391  1211  00F8               	movwf	Lcd_Set_Cursor@z
  5392                           
  5393                           ;lcd.h: 54: y = temp & 0x0FU;
  5394  1212  087A               	movf	Lcd_Set_Cursor@temp,w
  5395  1213  390F               	andlw	15
  5396  1214  00F5               	movwf	??_Lcd_Set_Cursor
  5397  1215  0875               	movf	??_Lcd_Set_Cursor,w
  5398  1216  00F9               	movwf	Lcd_Set_Cursor@y
  5399                           
  5400                           ;lcd.h: 55: Lcd_Cmd(z);
  5401  1217  0878               	movf	Lcd_Set_Cursor@z,w
  5402  1218  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5403                           
  5404                           ;lcd.h: 56: Lcd_Cmd(y);
  5405  121D  0879               	movf	Lcd_Set_Cursor@y,w
  5406  121E  160A  118A  2126   	fcall	_Lcd_Cmd
  5407  1221  0008               	return
  5408  1222                     __end_of_Lcd_Set_Cursor:	
  5409                           
  5410                           	psect	text24
  5411  12BB                     __ptext24:	
  5412 ;; *************** function _Lcd_Init *****************
  5413 ;; Defined at:
  5414 ;;		line 60 in file "lcd.h"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  1    wreg      void 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0, pclath, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5428 ;;      Params:         0       0       0       0       0
  5429 ;;      Locals:         0       0       0       0       0
  5430 ;;      Temps:          2       0       0       0       0
  5431 ;;      Totals:         2       0       0       0       0
  5432 ;;Total ram usage:        2 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    2
  5435 ;; This function calls:
  5436 ;;		_Lcd_Cmd
  5437 ;;		_Lcd_Port
  5438 ;; This function is called by:
  5439 ;;		_main
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _Lcd_Init
  5445  12BB                     _Lcd_Init:	
  5446                           
  5447                           ;lcd.h: 62: Lcd_Port(0x00);
  5448                           
  5449                           ;incstack = 0
  5450                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5451  12BB  3000               	movlw	0
  5452  12BC  160A  118A  210C  160A  118A  	fcall	_Lcd_Port
  5453                           
  5454                           ;lcd.h: 63: _delay((unsigned long)((20)*(4000000/4000.0)));
  5455  12C1  301A               	movlw	26
  5456  12C2  00F5               	movwf	??_Lcd_Init+1
  5457  12C3  30F8               	movlw	248
  5458  12C4  00F4               	movwf	??_Lcd_Init
  5459  12C5                     u4357:	
  5460  12C5  0BF4               	decfsz	??_Lcd_Init,f
  5461  12C6  2AC5               	goto	u4357
  5462  12C7  0BF5               	decfsz	??_Lcd_Init+1,f
  5463  12C8  2AC5               	goto	u4357
  5464  12C9  0000               	nop
  5465                           
  5466                           ;lcd.h: 64: Lcd_Cmd(0x03);
  5467  12CA  3003               	movlw	3
  5468  12CB  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5469                           
  5470                           ;lcd.h: 65: _delay((unsigned long)((5)*(4000000/4000.0)));
  5471  12D0  3007               	movlw	7
  5472  12D1  00F5               	movwf	??_Lcd_Init+1
  5473  12D2  307D               	movlw	125
  5474  12D3  00F4               	movwf	??_Lcd_Init
  5475  12D4                     u4367:	
  5476  12D4  0BF4               	decfsz	??_Lcd_Init,f
  5477  12D5  2AD4               	goto	u4367
  5478  12D6  0BF5               	decfsz	??_Lcd_Init+1,f
  5479  12D7  2AD4               	goto	u4367
  5480                           
  5481                           ;lcd.h: 66: Lcd_Cmd(0x03);
  5482  12D8  3003               	movlw	3
  5483  12D9  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5484                           
  5485                           ;lcd.h: 67: _delay((unsigned long)((11)*(4000000/4000.0)));
  5486  12DE  300F               	movlw	15
  5487  12DF  00F5               	movwf	??_Lcd_Init+1
  5488  12E0  3047               	movlw	71
  5489  12E1  00F4               	movwf	??_Lcd_Init
  5490  12E2                     u4377:	
  5491  12E2  0BF4               	decfsz	??_Lcd_Init,f
  5492  12E3  2AE2               	goto	u4377
  5493  12E4  0BF5               	decfsz	??_Lcd_Init+1,f
  5494  12E5  2AE2               	goto	u4377
  5495  12E6  2AE7               	nop2
  5496                           
  5497                           ;lcd.h: 68: Lcd_Cmd(0x03);
  5498  12E7  3003               	movlw	3
  5499  12E8  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5500                           
  5501                           ;lcd.h: 70: Lcd_Cmd(0x02);
  5502  12ED  3002               	movlw	2
  5503  12EE  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5504                           
  5505                           ;lcd.h: 71: Lcd_Cmd(0x02);
  5506  12F3  3002               	movlw	2
  5507  12F4  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5508                           
  5509                           ;lcd.h: 72: Lcd_Cmd(0x08);
  5510  12F9  3008               	movlw	8
  5511  12FA  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5512                           
  5513                           ;lcd.h: 73: Lcd_Cmd(0x00);
  5514  12FF  3000               	movlw	0
  5515  1300  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5516                           
  5517                           ;lcd.h: 74: Lcd_Cmd(0x0C);
  5518  1305  300C               	movlw	12
  5519  1306  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5520                           
  5521                           ;lcd.h: 75: Lcd_Cmd(0x00);
  5522  130B  3000               	movlw	0
  5523  130C  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5524                           
  5525                           ;lcd.h: 76: Lcd_Cmd(0x06);
  5526  1311  3006               	movlw	6
  5527  1312  160A  118A  2126   	fcall	_Lcd_Cmd
  5528  1315  0008               	return
  5529  1316                     __end_of_Lcd_Init:	
  5530                           
  5531                           	psect	text25
  5532  10BD                     __ptext25:	
  5533 ;; *************** function _Lcd_Clear *****************
  5534 ;; Defined at:
  5535 ;;		line 32 in file "lcd.h"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0, pclath, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5549 ;;      Params:         0       0       0       0       0
  5550 ;;      Locals:         0       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0
  5552 ;;      Totals:         0       0       0       0       0
  5553 ;;Total ram usage:        0 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    2
  5556 ;; This function calls:
  5557 ;;		_Lcd_Cmd
  5558 ;; This function is called by:
  5559 ;;		_main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _Lcd_Clear
  5565  10BD                     _Lcd_Clear:	
  5566                           
  5567                           ;lcd.h: 34: Lcd_Cmd(0);
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5571  10BD  3000               	movlw	0
  5572  10BE  160A  118A  2126  160A  118A  	fcall	_Lcd_Cmd
  5573                           
  5574                           ;lcd.h: 35: Lcd_Cmd(1);
  5575  10C3  3001               	movlw	1
  5576  10C4  160A  118A  2126   	fcall	_Lcd_Cmd
  5577  10C7  0008               	return
  5578  10C8                     __end_of_Lcd_Clear:	
  5579                           ;lcd.h: 36: return;
  5580                           
  5581                           
  5582                           	psect	text26
  5583  1126                     __ptext26:	
  5584 ;; *************** function _Lcd_Cmd *****************
  5585 ;; Defined at:
  5586 ;;		line 23 in file "lcd.h"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  a               1    wreg     unsigned char 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  a               1    3[COMMON] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5600 ;;      Params:         0       0       0       0       0
  5601 ;;      Locals:         1       0       0       0       0
  5602 ;;      Temps:          2       0       0       0       0
  5603 ;;      Totals:         3       0       0       0       0
  5604 ;;Total ram usage:        3 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    1
  5607 ;; This function calls:
  5608 ;;		_Lcd_Port
  5609 ;; This function is called by:
  5610 ;;		_Lcd_Clear
  5611 ;;		_Lcd_Set_Cursor
  5612 ;;		_Lcd_Init
  5613 ;;		_Lcd_Shift_Right
  5614 ;;		_Lcd_Shift_Left
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _Lcd_Cmd
  5620  1126                     _Lcd_Cmd:	
  5621                           
  5622                           ;incstack = 0
  5623                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5624                           ;Lcd_Cmd@a stored from wreg
  5625  1126  00F3               	movwf	Lcd_Cmd@a
  5626                           
  5627                           ;lcd.h: 25: RC4 = 0;
  5628  1127  1283               	bcf	3,5	;RP0=0, select bank0
  5629  1128  1303               	bcf	3,6	;RP1=0, select bank0
  5630  1129  1207               	bcf	7,4	;volatile
  5631                           
  5632                           ;lcd.h: 26: Lcd_Port(a);
  5633  112A  0873               	movf	Lcd_Cmd@a,w
  5634  112B  160A  118A  210C  160A  118A  	fcall	_Lcd_Port
  5635                           
  5636                           ;lcd.h: 27: RC5 = 1;
  5637  1130  1283               	bcf	3,5	;RP0=0, select bank0
  5638  1131  1303               	bcf	3,6	;RP1=0, select bank0
  5639  1132  1687               	bsf	7,5	;volatile
  5640                           
  5641                           ;lcd.h: 28: _delay((unsigned long)((4)*(4000000/4000.0)));
  5642  1133  3006               	movlw	6
  5643  1134  00F2               	movwf	??_Lcd_Cmd+1
  5644  1135  3030               	movlw	48
  5645  1136  00F1               	movwf	??_Lcd_Cmd
  5646  1137                     u4387:	
  5647  1137  0BF1               	decfsz	??_Lcd_Cmd,f
  5648  1138  2937               	goto	u4387
  5649  1139  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5650  113A  2937               	goto	u4387
  5651  113B  0000               	nop
  5652                           
  5653                           ;lcd.h: 29: RC5 = 0;
  5654  113C  1283               	bcf	3,5	;RP0=0, select bank0
  5655  113D  1303               	bcf	3,6	;RP1=0, select bank0
  5656  113E  1287               	bcf	7,5	;volatile
  5657  113F  0008               	return
  5658  1140                     __end_of_Lcd_Cmd:	
  5659                           
  5660                           	psect	text27
  5661  110C                     __ptext27:	
  5662 ;; *************** function _Lcd_Port *****************
  5663 ;; Defined at:
  5664 ;;		line 1 in file "lcd.h"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  a               1    wreg     unsigned char 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;  a               1    0[COMMON] unsigned char 
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5678 ;;      Params:         0       0       0       0       0
  5679 ;;      Locals:         1       0       0       0       0
  5680 ;;      Temps:          0       0       0       0       0
  5681 ;;      Totals:         1       0       0       0       0
  5682 ;;Total ram usage:        1 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_Lcd_Cmd
  5688 ;;		_Lcd_Init
  5689 ;;		_Lcd_Write_Char
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           
  5694                           ;psect for function _Lcd_Port
  5695  110C                     _Lcd_Port:	
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _Lcd_Port: [wreg]
  5699                           ;Lcd_Port@a stored from wreg
  5700  110C  00F0               	movwf	Lcd_Port@a
  5701                           
  5702                           ;lcd.h: 3: if(a & 1)
  5703  110D  1C70               	btfss	Lcd_Port@a,0
  5704  110E  2913               	goto	l27
  5705                           
  5706                           ;lcd.h: 4: RC6 = 1;
  5707  110F  1283               	bcf	3,5	;RP0=0, select bank0
  5708  1110  1303               	bcf	3,6	;RP1=0, select bank0
  5709  1111  1707               	bsf	7,6	;volatile
  5710  1112  2916               	goto	l28
  5711  1113                     l27:	
  5712                           
  5713                           ;lcd.h: 5: else
  5714                           ;lcd.h: 6: RC6 = 0;
  5715  1113  1283               	bcf	3,5	;RP0=0, select bank0
  5716  1114  1303               	bcf	3,6	;RP1=0, select bank0
  5717  1115  1307               	bcf	7,6	;volatile
  5718  1116                     l28:	
  5719                           
  5720                           ;lcd.h: 8: if(a & 2)
  5721  1116  1CF0               	btfss	Lcd_Port@a,1
  5722  1117  291A               	goto	l29
  5723                           
  5724                           ;lcd.h: 9: RC7 = 1;
  5725  1118  1787               	bsf	7,7	;volatile
  5726  1119  291B               	goto	l30
  5727  111A                     l29:	
  5728                           
  5729                           ;lcd.h: 10: else
  5730                           ;lcd.h: 11: RC7 = 0;
  5731  111A  1387               	bcf	7,7	;volatile
  5732  111B                     l30:	
  5733                           
  5734                           ;lcd.h: 13: if(a & 4)
  5735  111B  1D70               	btfss	Lcd_Port@a,2
  5736  111C  291F               	goto	l31
  5737                           
  5738                           ;lcd.h: 14: RB6 = 1;
  5739  111D  1706               	bsf	6,6	;volatile
  5740  111E  2920               	goto	l32
  5741  111F                     l31:	
  5742                           
  5743                           ;lcd.h: 15: else
  5744                           ;lcd.h: 16: RB6 = 0;
  5745  111F  1306               	bcf	6,6	;volatile
  5746  1120                     l32:	
  5747                           
  5748                           ;lcd.h: 18: if(a & 8)
  5749  1120  1DF0               	btfss	Lcd_Port@a,3
  5750  1121  2924               	goto	l33
  5751                           
  5752                           ;lcd.h: 19: RB7 = 1;
  5753  1122  1786               	bsf	6,7	;volatile
  5754  1123  0008               	return
  5755  1124                     l33:	
  5756                           
  5757                           ;lcd.h: 20: else
  5758                           ;lcd.h: 21: RB7 = 0;
  5759  1124  1386               	bcf	6,7	;volatile
  5760  1125  0008               	return
  5761  1126                     __end_of_Lcd_Port:	
  5762  007E                     btemp	set	126	;btemp
  5763  007E                     wtemp0	set	126
  5764                           
  5765                           	psect	text1_split_1
  5766  00BF                     l132:	
  5767                           ;doprnt.c: 662: case 'f':
  5768                           
  5769                           ;doprnt.c: 638: goto alldone;
  5770                           
  5771                           ;doprnt.c: 637: case 0:
  5772                           
  5773                           
  5774                           ;doprnt.c: 663: flag |= 0x400;
  5775  00BF  152F               	bsf	(sprintf@flag^(0+128)+1),2
  5776                           
  5777                           ;doprnt.c: 698: case 'i':
  5778                           ;doprnt.c: 699: break;
  5779                           
  5780                           ;doprnt.c: 697: case 'd':
  5781                           
  5782                           ;doprnt.c: 664: break;
  5783  00C0  28DF               	goto	l2443
  5784  00C1                     l2441:	
  5785                           ;doprnt.c: 822: }
  5786                           
  5787                           ;doprnt.c: 813: continue;
  5788                           
  5789                           ;doprnt.c: 802: default:
  5790                           
  5791  00C1  3001               	movlw	1
  5792  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  5793  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  5794  00C4  07DA               	addwf	sprintf@f,f
  5795  00C5  30FF               	movlw	-1
  5796  00C6  075A               	addwf	sprintf@f,w
  5797  00C7  0084               	movwf	4
  5798  00C8  160A  118A  2000  120A  118A  	fcall	stringdir
  5799  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  5800  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  5801  00CF  00B8               	movwf	sprintf@c^(0+128)
  5802                           
  5803                           ; Switch size 1, requested type "space"
  5804                           ; Number of cases is 4, Range of values is 0 to 105
  5805                           ; switch strategies available:
  5806                           ; Name         Instructions Cycles
  5807                           ; simple_byte           13     7 (average)
  5808                           ; jumptable            260     6 (fixed)
  5809                           ;	Chosen strategy is simple_byte
  5810  00D0  3A00               	xorlw	0	; case 0
  5811  00D1  1903               	skipnz
  5812  00D2  2FDF               	goto	L15
  5813  00D3  3A64               	xorlw	100	; case 100
  5814  00D4  1903               	skipnz
  5815  00D5  28DF               	goto	l2443
  5816  00D6  3A02               	xorlw	2	; case 102
  5817  00D7  1903               	skipnz
  5818  00D8  28BF               	goto	l132
  5819  00D9  3A0F               	xorlw	15	; case 105
  5820  00DA  1903               	skipnz
  5821  00DB  28DF               	goto	l2443
  5822  00DC                     L13:	
  5823  00DC  160A  118A  2EFD   	goto	l2707
  5824  00DF                     l2443:	
  5825                           
  5826                           ;doprnt.c: 825: if(flag & (0x700)) {
  5827  00DF  3000               	movlw	0
  5828  00E0  052E               	andwf	sprintf@flag^(0+128),w
  5829  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  5830  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  5831  00E3  00E0               	movwf	??_sprintf
  5832  00E4  3007               	movlw	7
  5833  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  5834  00E6  1303               	bcf	3,6	;RP1=0, select bank1
  5835  00E7  052F               	andwf	(sprintf@flag+1)^(0+128),w
  5836  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  5837  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  5838  00EA  00E1               	movwf	??_sprintf+1
  5839  00EB  0860               	movf	??_sprintf,w
  5840  00EC  0461               	iorwf	??_sprintf+1,w
  5841  00ED  1903               	btfsc	3,2
  5842  00EE  2F1B               	goto	l2615
  5843                           
  5844                           ;doprnt.c: 827: if(flag & 0x1000)
  5845  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  5846  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  5847  00F1  1E2F               	btfss	(sprintf@flag+1)^(0+128),4
  5848  00F2  28F7               	goto	l2449
  5849                           
  5850                           ;doprnt.c: 829: prec = 6;
  5851  00F3  3006               	movlw	6
  5852  00F4  00B5               	movwf	sprintf@prec^(0+128)
  5853  00F5  3000               	movlw	0
  5854  00F6  00B6               	movwf	(sprintf@prec^(0+128)+1)
  5855  00F7                     l2449:	
  5856                           
  5857                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5858  00F7  0823               	movf	sprintf@ap^(0+128),w
  5859  00F8  0084               	movwf	4
  5860  00F9  1383               	bcf	3,7	;select IRP bank0
  5861  00FA  0800               	movf	0,w
  5862  00FB  00B2               	movwf	sprintf@fval^(0+128)
  5863  00FC  0A84               	incf	4,f
  5864  00FD  0800               	movf	0,w
  5865  00FE  00B3               	movwf	(sprintf@fval+1)^(0+128)
  5866  00FF  0A84               	incf	4,f
  5867  0100  0800               	movf	0,w
  5868  0101  00B4               	movwf	(sprintf@fval+2)^(0+128)
  5869  0102  3003               	movlw	3
  5870  0103  1283               	bcf	3,5	;RP0=0, select bank0
  5871  0104  1303               	bcf	3,6	;RP1=0, select bank0
  5872  0105  00E0               	movwf	??_sprintf
  5873  0106  0860               	movf	??_sprintf,w
  5874  0107  1683               	bsf	3,5	;RP0=1, select bank1
  5875  0108  1303               	bcf	3,6	;RP1=0, select bank1
  5876  0109  07A3               	addwf	sprintf@ap^(0+128),f
  5877                           
  5878                           ;doprnt.c: 831: if(fval < 0.0) {
  5879  010A  0832               	movf	sprintf@fval^(0+128),w
  5880  010B  00F0               	movwf	___ftge@ff1
  5881  010C  0833               	movf	(sprintf@fval+1)^(0+128),w
  5882  010D  00F1               	movwf	___ftge@ff1+1
  5883  010E  0834               	movf	(sprintf@fval+2)^(0+128),w
  5884  010F  00F2               	movwf	___ftge@ff1+2
  5885  0110  3000               	movlw	0
  5886  0111  00F3               	movwf	___ftge@ff2
  5887  0112  3000               	movlw	0
  5888  0113  00F4               	movwf	___ftge@ff2+1
  5889  0114  3000               	movlw	0
  5890  0115  00F5               	movwf	___ftge@ff2+2
  5891  0116  160A  118A  2371  120A  118A  	fcall	___ftge
  5892  011B  1803               	btfsc	3,0
  5893  011C  2936               	goto	l2459
  5894                           
  5895                           ;doprnt.c: 832: fval = -fval;
  5896  011D  1683               	bsf	3,5	;RP0=1, select bank1
  5897  011E  1303               	bcf	3,6	;RP1=0, select bank1
  5898  011F  0832               	movf	sprintf@fval^(0+128),w
  5899  0120  00F0               	movwf	___ftneg@f1
  5900  0121  0833               	movf	(sprintf@fval+1)^(0+128),w
  5901  0122  00F1               	movwf	___ftneg@f1+1
  5902  0123  0834               	movf	(sprintf@fval+2)^(0+128),w
  5903  0124  00F2               	movwf	___ftneg@f1+2
  5904  0125  120A  158A  2002  120A  118A  	fcall	___ftneg
  5905  012A  0870               	movf	?___ftneg,w
  5906  012B  1683               	bsf	3,5	;RP0=1, select bank1
  5907  012C  1303               	bcf	3,6	;RP1=0, select bank1
  5908  012D  00B2               	movwf	sprintf@fval^(0+128)
  5909  012E  0871               	movf	?___ftneg+1,w
  5910  012F  00B3               	movwf	(sprintf@fval+1)^(0+128)
  5911  0130  0872               	movf	?___ftneg+2,w
  5912  0131  00B4               	movwf	(sprintf@fval+2)^(0+128)
  5913                           
  5914                           ;doprnt.c: 833: flag |= 0x03;
  5915  0132  3003               	movlw	3
  5916  0133  04AE               	iorwf	sprintf@flag^(0+128),f
  5917  0134  3000               	movlw	0
  5918  0135  04AF               	iorwf	(sprintf@flag+1)^(0+128),f
  5919  0136                     l2459:	
  5920                           
  5921                           ;doprnt.c: 834: }
  5922                           ;doprnt.c: 835: exp = 0;
  5923  0136  1683               	bsf	3,5	;RP0=1, select bank1
  5924  0137  1303               	bcf	3,6	;RP1=0, select bank1
  5925  0138  01AC               	clrf	sprintf@exp^(0+128)
  5926  0139  01AD               	clrf	(sprintf@exp+1)^(0+128)
  5927                           
  5928                           ;doprnt.c: 836: if( fval!=0) {
  5929  013A  0834               	movf	(sprintf@fval+2)^(0+128),w
  5930  013B  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  5931  013C  0432               	iorwf	sprintf@fval^(0+128),w
  5932  013D  1903               	skipnz
  5933  013E  2A2A               	goto	l2487
  5934                           
  5935                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5936  013F  30B2               	movlw	low (sprintf@fval| 0)
  5937  0140  0084               	movwf	4
  5938  0141  1383               	bcf	3,7	;select IRP bank1
  5939  0142  0800               	movf	0,w
  5940  0143  1283               	bcf	3,5	;RP0=0, select bank0
  5941  0144  1303               	bcf	3,6	;RP1=0, select bank0
  5942  0145  00E0               	movwf	??_sprintf
  5943  0146  0A84               	incf	4,f
  5944  0147  0800               	movf	0,w
  5945  0148  00E1               	movwf	??_sprintf+1
  5946  0149  0A84               	incf	4,f
  5947  014A  0800               	movf	0,w
  5948  014B  00E2               	movwf	??_sprintf+2
  5949  014C  0A84               	incf	4,f
  5950  014D  0800               	movf	0,w
  5951  014E  00E3               	movwf	??_sprintf+3
  5952  014F  300F               	movlw	15
  5953  0150                     u3775:	
  5954  0150  1003               	clrc
  5955  0151  0CE3               	rrf	??_sprintf+3,f
  5956  0152  0CE2               	rrf	??_sprintf+2,f
  5957  0153  0CE1               	rrf	??_sprintf+1,f
  5958  0154  0CE0               	rrf	??_sprintf,f
  5959  0155  3EFF               	addlw	-1
  5960  0156  1D03               	skipz
  5961  0157  2950               	goto	u3775
  5962  0158  30FF               	movlw	255
  5963  0159  0560               	andwf	??_sprintf,w
  5964  015A  00E4               	movwf	??_sprintf+4
  5965  015B  3000               	movlw	0
  5966  015C  0561               	andwf	??_sprintf+1,w
  5967  015D  00E5               	movwf	??_sprintf+5
  5968  015E  0864               	movf	??_sprintf+4,w
  5969  015F  3E82               	addlw	130
  5970  0160  1683               	bsf	3,5	;RP0=1, select bank1
  5971  0161  1303               	bcf	3,6	;RP1=0, select bank1
  5972  0162  00AC               	movwf	sprintf@exp^(0+128)
  5973  0163  1283               	bcf	3,5	;RP0=0, select bank0
  5974  0164  1303               	bcf	3,6	;RP1=0, select bank0
  5975  0165  0865               	movf	??_sprintf+5,w
  5976  0166  1803               	skipnc
  5977  0167  3E01               	addlw	1
  5978  0168  3EFF               	addlw	255
  5979  0169  1683               	bsf	3,5	;RP0=1, select bank1
  5980  016A  1303               	bcf	3,6	;RP1=0, select bank1
  5981  016B  00AD               	movwf	(sprintf@exp+1)^(0+128)
  5982                           
  5983                           ;doprnt.c: 838: exp--;
  5984  016C  30FF               	movlw	255
  5985  016D  07AC               	addwf	sprintf@exp^(0+128),f
  5986  016E  1803               	skipnc
  5987  016F  0AAD               	incf	(sprintf@exp+1)^(0+128),f
  5988  0170  30FF               	movlw	255
  5989  0171  07AD               	addwf	(sprintf@exp+1)^(0+128),f
  5990                           
  5991                           ;doprnt.c: 839: exp *= 3;
  5992  0172  3003               	movlw	3
  5993  0173  00F0               	movwf	___wmul@multiplier
  5994  0174  3000               	movlw	0
  5995  0175  00F1               	movwf	___wmul@multiplier+1
  5996  0176  082D               	movf	(sprintf@exp+1)^(0+128),w
  5997  0177  00F3               	movwf	___wmul@multiplicand+1
  5998  0178  082C               	movf	sprintf@exp^(0+128),w
  5999  0179  00F2               	movwf	___wmul@multiplicand
  6000  017A  160A  118A  2180  120A  118A  	fcall	___wmul
  6001  017F  0871               	movf	?___wmul+1,w
  6002  0180  1683               	bsf	3,5	;RP0=1, select bank1
  6003  0181  1303               	bcf	3,6	;RP1=0, select bank1
  6004  0182  00AD               	movwf	(sprintf@exp+1)^(0+128)
  6005  0183  0870               	movf	?___wmul,w
  6006  0184  00AC               	movwf	sprintf@exp^(0+128)
  6007                           
  6008                           ;doprnt.c: 840: exp /= 10;
  6009  0185  300A               	movlw	10
  6010  0186  00F7               	movwf	___awdiv@divisor
  6011  0187  3000               	movlw	0
  6012  0188  00F8               	movwf	___awdiv@divisor+1
  6013  0189  082D               	movf	(sprintf@exp+1)^(0+128),w
  6014  018A  00FA               	movwf	___awdiv@dividend+1
  6015  018B  082C               	movf	sprintf@exp^(0+128),w
  6016  018C  00F9               	movwf	___awdiv@dividend
  6017  018D  160A  118A  2316  120A  118A  	fcall	___awdiv
  6018  0192  0878               	movf	?___awdiv+1,w
  6019  0193  1683               	bsf	3,5	;RP0=1, select bank1
  6020  0194  1303               	bcf	3,6	;RP1=0, select bank1
  6021  0195  00AD               	movwf	(sprintf@exp+1)^(0+128)
  6022  0196  0877               	movf	?___awdiv,w
  6023  0197  00AC               	movwf	sprintf@exp^(0+128)
  6024                           
  6025                           ;doprnt.c: 841: if(exp < 0)
  6026  0198  1FAD               	btfss	(sprintf@exp+1)^(0+128),7
  6027  0199  29A0               	goto	l2475
  6028                           
  6029                           ;doprnt.c: 842: exp--;
  6030  019A  30FF               	movlw	255
  6031  019B  07AC               	addwf	sprintf@exp^(0+128),f
  6032  019C  1803               	skipnc
  6033  019D  0AAD               	incf	(sprintf@exp+1)^(0+128),f
  6034  019E  30FF               	movlw	255
  6035  019F  07AD               	addwf	(sprintf@exp+1)^(0+128),f
  6036  01A0                     l2475:	
  6037                           
  6038                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6039  01A0  032C               	decf	sprintf@exp^(0+128),w
  6040  01A1  3AFF               	xorlw	255
  6041  01A2  120A  158A  2565  120A  118A  	fcall	_scale
  6042  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  6043  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  6044  01A9  0837               	movf	?_scale,w
  6045  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  6046  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  6047  01AC  00A4               	movwf	sprintf@tmpval^(0+128)
  6048  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  6049  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  6050  01AF  0838               	movf	?_scale+1,w
  6051  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  6052  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  6053  01B2  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  6054  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  6055  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  6056  01B5  0839               	movf	?_scale+2,w
  6057  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  6058  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  6059  01B8  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  6060                           
  6061                           ;doprnt.c: 847: tmpval.integ *= fval;
  6062  01B9  0832               	movf	sprintf@fval^(0+128),w
  6063  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  6064  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  6065  01BC  00A7               	movwf	___ftmul@f1
  6066  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  6067  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  6068  01BF  0833               	movf	(sprintf@fval+1)^(0+128),w
  6069  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  6070  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  6071  01C2  00A8               	movwf	___ftmul@f1+1
  6072  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6073  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6074  01C5  0834               	movf	(sprintf@fval+2)^(0+128),w
  6075  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  6076  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  6077  01C8  00A9               	movwf	___ftmul@f1+2
  6078  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  6079  01CA  1303               	bcf	3,6	;RP1=0, select bank1
  6080  01CB  0824               	movf	sprintf@tmpval^(0+128),w
  6081  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  6082  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  6083  01CE  00AA               	movwf	___ftmul@f2
  6084  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  6085  01D0  1303               	bcf	3,6	;RP1=0, select bank1
  6086  01D1  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  6087  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  6088  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  6089  01D4  00AB               	movwf	___ftmul@f2+1
  6090  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  6091  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  6092  01D7  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  6093  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  6094  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  6095  01DA  00AC               	movwf	___ftmul@f2+2
  6096  01DB  120A  158A  2035  120A  118A  	fcall	___ftmul
  6097  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  6098  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  6099  01E2  0827               	movf	?___ftmul,w
  6100  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  6101  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  6102  01E5  00A4               	movwf	sprintf@tmpval^(0+128)
  6103  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  6104  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  6105  01E8  0828               	movf	?___ftmul+1,w
  6106  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  6107  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  6108  01EB  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  6109  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  6110  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  6111  01EE  0829               	movf	?___ftmul+2,w
  6112  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  6113  01F0  1303               	bcf	3,6	;RP1=0, select bank1
  6114  01F1  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  6115                           
  6116                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6117  01F2  0824               	movf	sprintf@tmpval^(0+128),w
  6118  01F3  00F0               	movwf	___ftge@ff1
  6119  01F4  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  6120  01F5  00F1               	movwf	___ftge@ff1+1
  6121  01F6  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  6122  01F7  00F2               	movwf	___ftge@ff1+2
  6123  01F8  3000               	movlw	0
  6124  01F9  00F3               	movwf	___ftge@ff2
  6125  01FA  3080               	movlw	128
  6126  01FB  00F4               	movwf	___ftge@ff2+1
  6127  01FC  303F               	movlw	63
  6128  01FD  00F5               	movwf	___ftge@ff2+2
  6129  01FE  160A  118A  2371  120A  118A  	fcall	___ftge
  6130  0203  1803               	btfsc	3,0
  6131  0204  2A0D               	goto	l2483
  6132                           
  6133                           ;doprnt.c: 849: exp--;
  6134  0205  30FF               	movlw	255
  6135  0206  1683               	bsf	3,5	;RP0=1, select bank1
  6136  0207  1303               	bcf	3,6	;RP1=0, select bank1
  6137  0208  07AC               	addwf	sprintf@exp^(0+128),f
  6138  0209  1803               	skipnc
  6139  020A  0AAD               	incf	(sprintf@exp+1)^(0+128),f
  6140  020B  30FF               	movlw	255
  6141  020C  2A29               	goto	L2
  6142  020D                     l2483:	
  6143                           
  6144                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6145  020D  1683               	bsf	3,5	;RP0=1, select bank1
  6146  020E  1303               	bcf	3,6	;RP1=0, select bank1
  6147  020F  0824               	movf	sprintf@tmpval^(0+128),w
  6148  0210  00F0               	movwf	___ftge@ff1
  6149  0211  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  6150  0212  00F1               	movwf	___ftge@ff1+1
  6151  0213  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  6152  0214  00F2               	movwf	___ftge@ff1+2
  6153  0215  3000               	movlw	0
  6154  0216  00F3               	movwf	___ftge@ff2
  6155  0217  3020               	movlw	32
  6156  0218  00F4               	movwf	___ftge@ff2+1
  6157  0219  3041               	movlw	65
  6158  021A  00F5               	movwf	___ftge@ff2+2
  6159  021B  160A  118A  2371  120A  118A  	fcall	___ftge
  6160  0220  1C03               	btfss	3,0
  6161  0221  2A2A               	goto	l2487
  6162                           
  6163                           ;doprnt.c: 851: exp++;
  6164  0222  3001               	movlw	1
  6165  0223  1683               	bsf	3,5	;RP0=1, select bank1
  6166  0224  1303               	bcf	3,6	;RP1=0, select bank1
  6167  0225  07AC               	addwf	sprintf@exp^(0+128),f
  6168  0226  1803               	skipnc
  6169  0227  0AAD               	incf	(sprintf@exp+1)^(0+128),f
  6170  0228  3000               	movlw	0
  6171  0229                     L2:	
  6172  0229  07AD               	addwf	(sprintf@exp+1)^(0+128),f
  6173  022A                     l2487:	
  6174                           
  6175                           ;doprnt.c: 852: }
  6176                           ;doprnt.c: 1112: if(prec <= 12)
  6177  022A  1683               	bsf	3,5	;RP0=1, select bank1
  6178  022B  1303               	bcf	3,6	;RP1=0, select bank1
  6179  022C  0836               	movf	(sprintf@prec+1)^(0+128),w
  6180  022D  3A80               	xorlw	128
  6181  022E  00FF               	movwf	127
  6182  022F  3080               	movlw	128
  6183  0230  027F               	subwf	127,w
  6184  0231  1D03               	skipz
  6185  0232  2A35               	goto	u3815
  6186  0233  300D               	movlw	13
  6187  0234  0235               	subwf	sprintf@prec^(0+128),w
  6188  0235                     u3815:	
  6189  0235  1803               	skipnc
  6190  0236  2A70               	goto	l2491
  6191                           
  6192                           ;doprnt.c: 1113: fval += fround(prec);
  6193  0237  1683               	bsf	3,5	;RP0=1, select bank1
  6194  0238  1303               	bcf	3,6	;RP1=0, select bank1
  6195  0239  0835               	movf	sprintf@prec^(0+128),w
  6196  023A  120A  158A  23CB  120A  118A  	fcall	_fround
  6197  023F  1283               	bcf	3,5	;RP0=0, select bank0
  6198  0240  1303               	bcf	3,6	;RP1=0, select bank0
  6199  0241  0837               	movf	?_fround,w
  6200  0242  00C7               	movwf	___ftadd@f1
  6201  0243  0838               	movf	?_fround+1,w
  6202  0244  00C8               	movwf	___ftadd@f1+1
  6203  0245  0839               	movf	?_fround+2,w
  6204  0246  00C9               	movwf	___ftadd@f1+2
  6205  0247  1683               	bsf	3,5	;RP0=1, select bank1
  6206  0248  1303               	bcf	3,6	;RP1=0, select bank1
  6207  0249  0832               	movf	sprintf@fval^(0+128),w
  6208  024A  1283               	bcf	3,5	;RP0=0, select bank0
  6209  024B  1303               	bcf	3,6	;RP1=0, select bank0
  6210  024C  00CA               	movwf	___ftadd@f2
  6211  024D  1683               	bsf	3,5	;RP0=1, select bank1
  6212  024E  1303               	bcf	3,6	;RP1=0, select bank1
  6213  024F  0833               	movf	(sprintf@fval+1)^(0+128),w
  6214  0250  1283               	bcf	3,5	;RP0=0, select bank0
  6215  0251  1303               	bcf	3,6	;RP1=0, select bank0
  6216  0252  00CB               	movwf	___ftadd@f2+1
  6217  0253  1683               	bsf	3,5	;RP0=1, select bank1
  6218  0254  1303               	bcf	3,6	;RP1=0, select bank1
  6219  0255  0834               	movf	(sprintf@fval+2)^(0+128),w
  6220  0256  1283               	bcf	3,5	;RP0=0, select bank0
  6221  0257  1303               	bcf	3,6	;RP1=0, select bank0
  6222  0258  00CC               	movwf	___ftadd@f2+2
  6223  0259  160A  118A  25E9  120A  118A  	fcall	___ftadd
  6224  025E  1283               	bcf	3,5	;RP0=0, select bank0
  6225  025F  1303               	bcf	3,6	;RP1=0, select bank0
  6226  0260  0847               	movf	?___ftadd,w
  6227  0261  1683               	bsf	3,5	;RP0=1, select bank1
  6228  0262  1303               	bcf	3,6	;RP1=0, select bank1
  6229  0263  00B2               	movwf	sprintf@fval^(0+128)
  6230  0264  1283               	bcf	3,5	;RP0=0, select bank0
  6231  0265  1303               	bcf	3,6	;RP1=0, select bank0
  6232  0266  0848               	movf	?___ftadd+1,w
  6233  0267  1683               	bsf	3,5	;RP0=1, select bank1
  6234  0268  1303               	bcf	3,6	;RP1=0, select bank1
  6235  0269  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6236  026A  1283               	bcf	3,5	;RP0=0, select bank0
  6237  026B  1303               	bcf	3,6	;RP1=0, select bank0
  6238  026C  0849               	movf	?___ftadd+2,w
  6239  026D  1683               	bsf	3,5	;RP0=1, select bank1
  6240  026E  1303               	bcf	3,6	;RP1=0, select bank1
  6241  026F  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6242  0270                     l2491:	
  6243                           
  6244                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6245  0270  1683               	bsf	3,5	;RP0=1, select bank1
  6246  0271  1303               	bcf	3,6	;RP1=0, select bank1
  6247  0272  082D               	movf	(sprintf@exp+1)^(0+128),w
  6248  0273  3A80               	xorlw	128
  6249  0274  00FF               	movwf	127
  6250  0275  3080               	movlw	128
  6251  0276  027F               	subwf	127,w
  6252  0277  1D03               	skipz
  6253  0278  2A7B               	goto	u3825
  6254  0279  300A               	movlw	10
  6255  027A  022C               	subwf	sprintf@exp^(0+128),w
  6256  027B                     u3825:	
  6257  027B  1803               	skipnc
  6258  027C  2AAE               	goto	l2499
  6259  027D  1683               	bsf	3,5	;RP0=1, select bank1
  6260  027E  1303               	bcf	3,6	;RP1=0, select bank1
  6261  027F  0834               	movf	(sprintf@fval+2)^(0+128),w
  6262  0280  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6263  0281  0432               	iorwf	sprintf@fval^(0+128),w
  6264  0282  1903               	skipnz
  6265  0283  2B07               	goto	l2513
  6266  0284  0832               	movf	sprintf@fval^(0+128),w
  6267  0285  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0286  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0287  00C0               	movwf	___fttol@f1
  6270  0288  1683               	bsf	3,5	;RP0=1, select bank1
  6271  0289  1303               	bcf	3,6	;RP1=0, select bank1
  6272  028A  0833               	movf	(sprintf@fval+1)^(0+128),w
  6273  028B  1283               	bcf	3,5	;RP0=0, select bank0
  6274  028C  1303               	bcf	3,6	;RP1=0, select bank0
  6275  028D  00C1               	movwf	___fttol@f1+1
  6276  028E  1683               	bsf	3,5	;RP0=1, select bank1
  6277  028F  1303               	bcf	3,6	;RP1=0, select bank1
  6278  0290  0834               	movf	(sprintf@fval+2)^(0+128),w
  6279  0291  1283               	bcf	3,5	;RP0=0, select bank0
  6280  0292  1303               	bcf	3,6	;RP1=0, select bank0
  6281  0293  00C2               	movwf	___fttol@f1+2
  6282  0294  160A  118A  2498  120A  118A  	fcall	___fttol
  6283  0299  1283               	bcf	3,5	;RP0=0, select bank0
  6284  029A  1303               	bcf	3,6	;RP1=0, select bank0
  6285  029B  0843               	movf	?___fttol+3,w
  6286  029C  0442               	iorwf	?___fttol+2,w
  6287  029D  0441               	iorwf	?___fttol+1,w
  6288  029E  0440               	iorwf	?___fttol,w
  6289  029F  1D03               	skipz
  6290  02A0  2B07               	goto	l2513
  6291  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  6292  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  6293  02A3  082D               	movf	(sprintf@exp+1)^(0+128),w
  6294  02A4  3A80               	xorlw	128
  6295  02A5  00FF               	movwf	127
  6296  02A6  3080               	movlw	128
  6297  02A7  027F               	subwf	127,w
  6298  02A8  1D03               	skipz
  6299  02A9  2AAC               	goto	u3855
  6300  02AA  3002               	movlw	2
  6301  02AB  022C               	subwf	sprintf@exp^(0+128),w
  6302  02AC                     u3855:	
  6303  02AC  1C03               	skipc
  6304  02AD  2B07               	goto	l2513
  6305  02AE                     l2499:	
  6306                           
  6307                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6308  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  6309  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  6310  02B0  0824               	movf	sprintf@tmpval^(0+128),w
  6311  02B1  00F0               	movwf	___ftge@ff1
  6312  02B2  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  6313  02B3  00F1               	movwf	___ftge@ff1+1
  6314  02B4  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  6315  02B5  00F2               	movwf	___ftge@ff1+2
  6316  02B6  3070               	movlw	112
  6317  02B7  00F3               	movwf	___ftge@ff2
  6318  02B8  3089               	movlw	137
  6319  02B9  00F4               	movwf	___ftge@ff2+1
  6320  02BA  3040               	movlw	64
  6321  02BB  00F5               	movwf	___ftge@ff2+2
  6322  02BC  160A  118A  2371  120A  118A  	fcall	___ftge
  6323  02C1  1803               	btfsc	3,0
  6324  02C2  2AC5               	goto	l2503
  6325                           
  6326                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6327  02C3  30F7               	movlw	247
  6328  02C4  2AC6               	goto	L3
  6329  02C5                     l2503:	
  6330                           ;doprnt.c: 1122: }else{
  6331                           
  6332                           
  6333                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6334  02C5  30F8               	movlw	248
  6335  02C6                     L3:	
  6336  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  6337  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  6338  02C8  07AC               	addwf	sprintf@exp^(0+128),f
  6339  02C9  1803               	skipnc
  6340  02CA  0AAD               	incf	(sprintf@exp+1)^(0+128),f
  6341  02CB  30FF               	movlw	255
  6342  02CC  07AD               	addwf	(sprintf@exp+1)^(0+128),f
  6343                           
  6344                           ;doprnt.c: 1124: }
  6345                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6346  02CD  082C               	movf	sprintf@exp^(0+128),w
  6347  02CE  120A  158A  2565  120A  118A  	fcall	_scale
  6348  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  6349  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  6350  02D5  0837               	movf	?_scale,w
  6351  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  6352  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  6353  02D8  00A4               	movwf	sprintf@tmpval^(0+128)
  6354  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  6355  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  6356  02DB  0838               	movf	?_scale+1,w
  6357  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  6358  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  6359  02DE  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  6360  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  6361  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  6362  02E1  0839               	movf	?_scale+2,w
  6363  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  6364  02E3  1303               	bcf	3,6	;RP1=0, select bank1
  6365  02E4  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  6366                           
  6367                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6368  02E5  0832               	movf	sprintf@fval^(0+128),w
  6369  02E6  00F0               	movwf	__tdiv_to_l_@f1
  6370  02E7  0833               	movf	(sprintf@fval+1)^(0+128),w
  6371  02E8  00F1               	movwf	__tdiv_to_l_@f1+1
  6372  02E9  0834               	movf	(sprintf@fval+2)^(0+128),w
  6373  02EA  00F2               	movwf	__tdiv_to_l_@f1+2
  6374  02EB  0824               	movf	sprintf@tmpval^(0+128),w
  6375  02EC  00F3               	movwf	__tdiv_to_l_@f2
  6376  02ED  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  6377  02EE  00F4               	movwf	__tdiv_to_l_@f2+1
  6378  02EF  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  6379  02F0  00F5               	movwf	__tdiv_to_l_@f2+2
  6380  02F1  160A  118A  2526  120A  118A  	fcall	__tdiv_to_l_
  6381  02F6  0873               	movf	?__tdiv_to_l_+3,w
  6382  02F7  1683               	bsf	3,5	;RP0=1, select bank1
  6383  02F8  1303               	bcf	3,6	;RP1=0, select bank1
  6384  02F9  00AB               	movwf	(sprintf@val+3)^(0+128)
  6385  02FA  0872               	movf	?__tdiv_to_l_+2,w
  6386  02FB  00AA               	movwf	(sprintf@val+2)^(0+128)
  6387  02FC  0871               	movf	?__tdiv_to_l_+1,w
  6388  02FD  00A9               	movwf	(sprintf@val+1)^(0+128)
  6389  02FE  0870               	movf	?__tdiv_to_l_,w
  6390  02FF  00A8               	movwf	sprintf@val^(0+128)
  6391                           
  6392                           ;doprnt.c: 1129: fval = 0.0;
  6393  0300  3000               	movlw	0
  6394  0301  00B2               	movwf	sprintf@fval^(0+128)
  6395  0302  3000               	movlw	0
  6396  0303  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6397  0304  3000               	movlw	0
  6398  0305  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6399                           
  6400                           ;doprnt.c: 1130: } else {
  6401  0306  2B76               	goto	l2517
  6402  0307                     l2513:	
  6403                           
  6404                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6405  0307  1683               	bsf	3,5	;RP0=1, select bank1
  6406  0308  1303               	bcf	3,6	;RP1=0, select bank1
  6407  0309  0832               	movf	sprintf@fval^(0+128),w
  6408  030A  1283               	bcf	3,5	;RP0=0, select bank0
  6409  030B  1303               	bcf	3,6	;RP1=0, select bank0
  6410  030C  00C0               	movwf	___fttol@f1
  6411  030D  1683               	bsf	3,5	;RP0=1, select bank1
  6412  030E  1303               	bcf	3,6	;RP1=0, select bank1
  6413  030F  0833               	movf	(sprintf@fval+1)^(0+128),w
  6414  0310  1283               	bcf	3,5	;RP0=0, select bank0
  6415  0311  1303               	bcf	3,6	;RP1=0, select bank0
  6416  0312  00C1               	movwf	___fttol@f1+1
  6417  0313  1683               	bsf	3,5	;RP0=1, select bank1
  6418  0314  1303               	bcf	3,6	;RP1=0, select bank1
  6419  0315  0834               	movf	(sprintf@fval+2)^(0+128),w
  6420  0316  1283               	bcf	3,5	;RP0=0, select bank0
  6421  0317  1303               	bcf	3,6	;RP1=0, select bank0
  6422  0318  00C2               	movwf	___fttol@f1+2
  6423  0319  160A  118A  2498  120A  118A  	fcall	___fttol
  6424  031E  1283               	bcf	3,5	;RP0=0, select bank0
  6425  031F  1303               	bcf	3,6	;RP1=0, select bank0
  6426  0320  0843               	movf	?___fttol+3,w
  6427  0321  1683               	bsf	3,5	;RP0=1, select bank1
  6428  0322  1303               	bcf	3,6	;RP1=0, select bank1
  6429  0323  00AB               	movwf	(sprintf@val+3)^(0+128)
  6430  0324  1283               	bcf	3,5	;RP0=0, select bank0
  6431  0325  1303               	bcf	3,6	;RP1=0, select bank0
  6432  0326  0842               	movf	?___fttol+2,w
  6433  0327  1683               	bsf	3,5	;RP0=1, select bank1
  6434  0328  1303               	bcf	3,6	;RP1=0, select bank1
  6435  0329  00AA               	movwf	(sprintf@val+2)^(0+128)
  6436  032A  1283               	bcf	3,5	;RP0=0, select bank0
  6437  032B  1303               	bcf	3,6	;RP1=0, select bank0
  6438  032C  0841               	movf	?___fttol+1,w
  6439  032D  1683               	bsf	3,5	;RP0=1, select bank1
  6440  032E  1303               	bcf	3,6	;RP1=0, select bank1
  6441  032F  00A9               	movwf	(sprintf@val+1)^(0+128)
  6442  0330  1283               	bcf	3,5	;RP0=0, select bank0
  6443  0331  1303               	bcf	3,6	;RP1=0, select bank0
  6444  0332  0840               	movf	?___fttol,w
  6445  0333  1683               	bsf	3,5	;RP0=1, select bank1
  6446  0334  1303               	bcf	3,6	;RP1=0, select bank1
  6447  0335  00A8               	movwf	sprintf@val^(0+128)
  6448                           
  6449                           ;doprnt.c: 1132: fval -= (double)val;
  6450  0336  082B               	movf	(sprintf@val+3)^(0+128),w
  6451  0337  00FB               	movwf	___lltoft@c+3
  6452  0338  082A               	movf	(sprintf@val+2)^(0+128),w
  6453  0339  00FA               	movwf	___lltoft@c+2
  6454  033A  0829               	movf	(sprintf@val+1)^(0+128),w
  6455  033B  00F9               	movwf	___lltoft@c+1
  6456  033C  0828               	movf	sprintf@val^(0+128),w
  6457  033D  00F8               	movwf	___lltoft@c
  6458  033E  120A  158A  200A  120A  118A  	fcall	___lltoft
  6459  0343  0878               	movf	?___lltoft,w
  6460  0344  1283               	bcf	3,5	;RP0=0, select bank0
  6461  0345  1303               	bcf	3,6	;RP1=0, select bank0
  6462  0346  00D4               	movwf	___ftsub@f2
  6463  0347  0879               	movf	?___lltoft+1,w
  6464  0348  00D5               	movwf	___ftsub@f2+1
  6465  0349  087A               	movf	?___lltoft+2,w
  6466  034A  00D6               	movwf	___ftsub@f2+2
  6467  034B  1683               	bsf	3,5	;RP0=1, select bank1
  6468  034C  1303               	bcf	3,6	;RP1=0, select bank1
  6469  034D  0832               	movf	sprintf@fval^(0+128),w
  6470  034E  1283               	bcf	3,5	;RP0=0, select bank0
  6471  034F  1303               	bcf	3,6	;RP1=0, select bank0
  6472  0350  00D7               	movwf	___ftsub@f1
  6473  0351  1683               	bsf	3,5	;RP0=1, select bank1
  6474  0352  1303               	bcf	3,6	;RP1=0, select bank1
  6475  0353  0833               	movf	(sprintf@fval+1)^(0+128),w
  6476  0354  1283               	bcf	3,5	;RP0=0, select bank0
  6477  0355  1303               	bcf	3,6	;RP1=0, select bank0
  6478  0356  00D8               	movwf	___ftsub@f1+1
  6479  0357  1683               	bsf	3,5	;RP0=1, select bank1
  6480  0358  1303               	bcf	3,6	;RP1=0, select bank1
  6481  0359  0834               	movf	(sprintf@fval+2)^(0+128),w
  6482  035A  1283               	bcf	3,5	;RP0=0, select bank0
  6483  035B  1303               	bcf	3,6	;RP1=0, select bank0
  6484  035C  00D9               	movwf	___ftsub@f1+2
  6485  035D  160A  118A  215F  120A  118A  	fcall	___ftsub
  6486  0362  1283               	bcf	3,5	;RP0=0, select bank0
  6487  0363  1303               	bcf	3,6	;RP1=0, select bank0
  6488  0364  0854               	movf	?___ftsub,w
  6489  0365  1683               	bsf	3,5	;RP0=1, select bank1
  6490  0366  1303               	bcf	3,6	;RP1=0, select bank1
  6491  0367  00B2               	movwf	sprintf@fval^(0+128)
  6492  0368  1283               	bcf	3,5	;RP0=0, select bank0
  6493  0369  1303               	bcf	3,6	;RP1=0, select bank0
  6494  036A  0855               	movf	?___ftsub+1,w
  6495  036B  1683               	bsf	3,5	;RP0=1, select bank1
  6496  036C  1303               	bcf	3,6	;RP1=0, select bank1
  6497  036D  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6498  036E  1283               	bcf	3,5	;RP0=0, select bank0
  6499  036F  1303               	bcf	3,6	;RP1=0, select bank0
  6500  0370  0856               	movf	?___ftsub+2,w
  6501  0371  1683               	bsf	3,5	;RP0=1, select bank1
  6502  0372  1303               	bcf	3,6	;RP1=0, select bank1
  6503  0373  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6504                           
  6505                           ;doprnt.c: 1133: exp = 0;
  6506  0374  01AC               	clrf	sprintf@exp^(0+128)
  6507  0375  01AD               	clrf	(sprintf@exp+1)^(0+128)
  6508  0376                     l2517:	
  6509                           
  6510                           ;doprnt.c: 1134: }
  6511                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6512  0376  01B8               	clrf	sprintf@c^(0+128)
  6513  0377  0AB8               	incf	sprintf@c^(0+128),f
  6514  0378  300A               	movlw	10
  6515  0379  0638               	xorwf	sprintf@c^(0+128),w
  6516  037A  1903               	btfsc	3,2
  6517  037B  2BCC               	goto	l2529
  6518  037C                     l2523:	
  6519                           
  6520                           ;doprnt.c: 1137: if(val < dpowers[c])
  6521  037C  0838               	movf	sprintf@c^(0+128),w
  6522  037D  1283               	bcf	3,5	;RP0=0, select bank0
  6523  037E  1303               	bcf	3,6	;RP1=0, select bank0
  6524  037F  00E0               	movwf	??_sprintf
  6525  0380  3001               	movlw	1
  6526  0381                     u3885:	
  6527  0381  1003               	clrc
  6528  0382  0DE0               	rlf	??_sprintf,f
  6529  0383  3EFF               	addlw	-1
  6530  0384  1D03               	skipz
  6531  0385  2B81               	goto	u3885
  6532  0386  1003               	clrc
  6533  0387  0D60               	rlf	??_sprintf,w
  6534  0388  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6535  0389  0084               	movwf	4
  6536  038A  160A  118A  2000  120A  118A  	fcall	stringdir
  6537  038F  00E1               	movwf	??_sprintf+1
  6538  0390  160A  118A  2000  120A  118A  	fcall	stringdir
  6539  0395  00E2               	movwf	??_sprintf+2
  6540  0396  160A  118A  2000  120A  118A  	fcall	stringdir
  6541  039B  00E3               	movwf	??_sprintf+3
  6542  039C  160A  118A  2000  120A  118A  	fcall	stringdir
  6543  03A1  00E4               	movwf	??_sprintf+4
  6544  03A2  0864               	movf	??_sprintf+4,w
  6545  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  6546  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  6547  03A5  022B               	subwf	(sprintf@val+3)^(0+128),w
  6548  03A6  1D03               	skipz
  6549  03A7  2BBE               	goto	u3895
  6550  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  6551  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  6552  03AA  0863               	movf	??_sprintf+3,w
  6553  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  6554  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  6555  03AD  022A               	subwf	(sprintf@val+2)^(0+128),w
  6556  03AE  1D03               	skipz
  6557  03AF  2BBE               	goto	u3895
  6558  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  6559  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  6560  03B2  0862               	movf	??_sprintf+2,w
  6561  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  6562  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  6563  03B5  0229               	subwf	(sprintf@val+1)^(0+128),w
  6564  03B6  1D03               	skipz
  6565  03B7  2BBE               	goto	u3895
  6566  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  6567  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  6568  03BA  0861               	movf	??_sprintf+1,w
  6569  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  6570  03BC  1303               	bcf	3,6	;RP1=0, select bank1
  6571  03BD  0228               	subwf	sprintf@val^(0+128),w
  6572  03BE                     u3895:	
  6573  03BE  1C03               	btfss	3,0
  6574  03BF  2BCC               	goto	l2529
  6575                           
  6576                           ;doprnt.c: 1138: break;
  6577  03C0  3001               	movlw	1
  6578  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6579  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  6580  03C3  00E0               	movwf	??_sprintf
  6581  03C4  0860               	movf	??_sprintf,w
  6582  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  6583  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  6584  03C7  07B8               	addwf	sprintf@c^(0+128),f
  6585  03C8  300A               	movlw	10
  6586  03C9  0638               	xorwf	sprintf@c^(0+128),w
  6587  03CA  1D03               	btfss	3,2
  6588  03CB  2B7C               	goto	l2523
  6589  03CC                     l2529:	
  6590                           
  6591                           ;doprnt.c: 1142: width -= prec + c + exp;
  6592  03CC  0835               	movf	sprintf@prec^(0+128),w
  6593  03CD  0738               	addwf	sprintf@c^(0+128),w
  6594  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  6595  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  6596  03D0  00E0               	movwf	??_sprintf
  6597  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  6598  03D2  1303               	bcf	3,6	;RP1=0, select bank1
  6599  03D3  0836               	movf	(sprintf@prec+1)^(0+128),w
  6600  03D4  1803               	skipnc
  6601  03D5  0A36               	incf	(sprintf@prec+1)^(0+128),w
  6602  03D6  3E00               	addlw	0
  6603  03D7  1BB8               	btfsc	sprintf@c^(0+128),7
  6604  03D8  3EFF               	addlw	255
  6605  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  6606  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  6607  03DB  00E1               	movwf	??_sprintf+1
  6608  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  6609  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  6610  03DE  082C               	movf	sprintf@exp^(0+128),w
  6611  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  6612  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  6613  03E1  0760               	addwf	??_sprintf,w
  6614  03E2  00E2               	movwf	??_sprintf+2
  6615  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  6616  03E4  1303               	bcf	3,6	;RP1=0, select bank1
  6617  03E5  082D               	movf	(sprintf@exp+1)^(0+128),w
  6618  03E6  1803               	skipnc
  6619  03E7  0A2D               	incf	(sprintf@exp+1)^(0+128),w
  6620  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  6621  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  6622  03EA  0761               	addwf	??_sprintf+1,w
  6623  03EB  00E3               	movwf	??_sprintf+3
  6624  03EC  0862               	movf	??_sprintf+2,w
  6625  03ED  1683               	bsf	3,5	;RP0=1, select bank1
  6626  03EE  1303               	bcf	3,6	;RP1=0, select bank1
  6627  03EF  02B0               	subwf	sprintf@width^(0+128),f
  6628  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  6629  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  6630  03F2  0863               	movf	??_sprintf+3,w
  6631  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  6632  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  6633  03F5  1C03               	skipc
  6634  03F6  03B1               	decf	(sprintf@width+1)^(0+128),f
  6635  03F7  02B1               	subwf	(sprintf@width+1)^(0+128),f
  6636                           
  6637                           ;doprnt.c: 1143: if(
  6638                           ;doprnt.c: 1147: prec)
  6639  03F8  0835               	movf	sprintf@prec^(0+128),w
  6640  03F9  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  6641  03FA  1903               	btfsc	3,2
  6642  03FB  2C02               	goto	l2533
  6643                           
  6644                           ;doprnt.c: 1148: width--;
  6645  03FC  30FF               	movlw	255
  6646  03FD  07B0               	addwf	sprintf@width^(0+128),f
  6647  03FE  1803               	skipnc
  6648  03FF  0AB1               	incf	(sprintf@width+1)^(0+128),f
  6649  0400  30FF               	movlw	255
  6650  0401  07B1               	addwf	(sprintf@width+1)^(0+128),f
  6651  0402                     l2533:	
  6652                           
  6653                           ;doprnt.c: 1149: if(flag & 0x03)
  6654  0402  3003               	movlw	3
  6655  0403  052E               	andwf	sprintf@flag^(0+128),w
  6656  0404  1283               	bcf	3,5	;RP0=0, select bank0
  6657  0405  1303               	bcf	3,6	;RP1=0, select bank0
  6658  0406  00E0               	movwf	??_sprintf
  6659  0407  3000               	movlw	0
  6660  0408  1683               	bsf	3,5	;RP0=1, select bank1
  6661  0409  1303               	bcf	3,6	;RP1=0, select bank1
  6662  040A  052F               	andwf	(sprintf@flag+1)^(0+128),w
  6663  040B  1283               	bcf	3,5	;RP0=0, select bank0
  6664  040C  1303               	bcf	3,6	;RP1=0, select bank0
  6665  040D  00E1               	movwf	??_sprintf+1
  6666  040E  0860               	movf	??_sprintf,w
  6667  040F  0461               	iorwf	??_sprintf+1,w
  6668  0410  1903               	btfsc	3,2
  6669  0411  2C1A               	goto	l2537
  6670                           
  6671                           ;doprnt.c: 1150: width--;
  6672  0412  30FF               	movlw	255
  6673  0413  1683               	bsf	3,5	;RP0=1, select bank1
  6674  0414  1303               	bcf	3,6	;RP1=0, select bank1
  6675  0415  07B0               	addwf	sprintf@width^(0+128),f
  6676  0416  1803               	skipnc
  6677  0417  0AB1               	incf	(sprintf@width+1)^(0+128),f
  6678  0418  30FF               	movlw	255
  6679  0419  07B1               	addwf	(sprintf@width+1)^(0+128),f
  6680  041A                     l2537:	
  6681                           
  6682                           ;doprnt.c: 1153: if(flag & 0x04) {
  6683  041A  1683               	bsf	3,5	;RP0=1, select bank1
  6684  041B  1303               	bcf	3,6	;RP1=0, select bank1
  6685  041C  1D2E               	btfss	sprintf@flag^(0+128),2
  6686  041D  2C7F               	goto	l2559
  6687                           
  6688                           ;doprnt.c: 1157: if(flag & 0x03)
  6689  041E  3003               	movlw	3
  6690  041F  052E               	andwf	sprintf@flag^(0+128),w
  6691  0420  1283               	bcf	3,5	;RP0=0, select bank0
  6692  0421  1303               	bcf	3,6	;RP1=0, select bank0
  6693  0422  00E0               	movwf	??_sprintf
  6694  0423  3000               	movlw	0
  6695  0424  1683               	bsf	3,5	;RP0=1, select bank1
  6696  0425  1303               	bcf	3,6	;RP1=0, select bank1
  6697  0426  052F               	andwf	(sprintf@flag+1)^(0+128),w
  6698  0427  1283               	bcf	3,5	;RP0=0, select bank0
  6699  0428  1303               	bcf	3,6	;RP1=0, select bank0
  6700  0429  00E1               	movwf	??_sprintf+1
  6701  042A  0860               	movf	??_sprintf,w
  6702  042B  0461               	iorwf	??_sprintf+1,w
  6703  042C  1903               	btfsc	3,2
  6704  042D  2C3F               	goto	l2551
  6705                           
  6706                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  6707  042E  302D               	movlw	45
  6708  042F  00E0               	movwf	??_sprintf
  6709  0430  1683               	bsf	3,5	;RP0=1, select bank1
  6710  0431  1303               	bcf	3,6	;RP1=0, select bank1
  6711  0432  0837               	movf	sprintf@sp^(0+128),w
  6712  0433  0084               	movwf	4
  6713  0434  1283               	bcf	3,5	;RP0=0, select bank0
  6714  0435  1303               	bcf	3,6	;RP1=0, select bank0
  6715  0436  0860               	movf	??_sprintf,w
  6716  0437  1383               	bcf	3,7	;select IRP bank0
  6717  0438  0080               	movwf	0
  6718  0439  3001               	movlw	1
  6719  043A  00E0               	movwf	??_sprintf
  6720  043B  0860               	movf	??_sprintf,w
  6721  043C  1683               	bsf	3,5	;RP0=1, select bank1
  6722  043D  1303               	bcf	3,6	;RP1=0, select bank1
  6723  043E  07B7               	addwf	sprintf@sp^(0+128),f
  6724  043F                     l2551:	
  6725                           ;doprnt.c: 1168: while(width > 0) {
  6726                           
  6727  043F  1683               	bsf	3,5	;RP0=1, select bank1
  6728  0440  1303               	bcf	3,6	;RP1=0, select bank1
  6729  0441  0831               	movf	(sprintf@width+1)^(0+128),w
  6730  0442  3A80               	xorlw	128
  6731  0443  00FF               	movwf	127
  6732  0444  3080               	movlw	128
  6733  0445  027F               	subwf	127,w
  6734  0446  1D03               	skipz
  6735  0447  2C4A               	goto	u3955
  6736  0448  3001               	movlw	1
  6737  0449  0230               	subwf	sprintf@width^(0+128),w
  6738  044A                     u3955:	
  6739  044A  1C03               	btfss	3,0
  6740  044B  2CAF               	goto	l171
  6741                           
  6742                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  6743  044C  3030               	movlw	48
  6744  044D  1283               	bcf	3,5	;RP0=0, select bank0
  6745  044E  1303               	bcf	3,6	;RP1=0, select bank0
  6746  044F  00E0               	movwf	??_sprintf
  6747  0450  1683               	bsf	3,5	;RP0=1, select bank1
  6748  0451  1303               	bcf	3,6	;RP1=0, select bank1
  6749  0452  0837               	movf	sprintf@sp^(0+128),w
  6750  0453  0084               	movwf	4
  6751  0454  1283               	bcf	3,5	;RP0=0, select bank0
  6752  0455  1303               	bcf	3,6	;RP1=0, select bank0
  6753  0456  0860               	movf	??_sprintf,w
  6754  0457  1383               	bcf	3,7	;select IRP bank0
  6755  0458  0080               	movwf	0
  6756  0459  3001               	movlw	1
  6757  045A  00E0               	movwf	??_sprintf
  6758  045B  0860               	movf	??_sprintf,w
  6759  045C  1683               	bsf	3,5	;RP0=1, select bank1
  6760  045D  1303               	bcf	3,6	;RP1=0, select bank1
  6761  045E  07B7               	addwf	sprintf@sp^(0+128),f
  6762                           
  6763                           ;doprnt.c: 1170: width--;
  6764  045F  30FF               	movlw	255
  6765  0460  07B0               	addwf	sprintf@width^(0+128),f
  6766  0461  1803               	skipnc
  6767  0462  0AB1               	incf	(sprintf@width+1)^(0+128),f
  6768  0463  30FF               	movlw	255
  6769  0464  07B1               	addwf	(sprintf@width+1)^(0+128),f
  6770  0465  2C3F               	goto	l2551
  6771  0466                     l2553:	
  6772                           ;doprnt.c: 1175: {
  6773                           ;doprnt.c: 1180: while(width > 0) {
  6774                           
  6775                           ;doprnt.c: 1171: }
  6776                           ;doprnt.c: 1173: } else
  6777                           
  6778                           
  6779                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  6780  0466  3020               	movlw	32
  6781  0467  1283               	bcf	3,5	;RP0=0, select bank0
  6782  0468  1303               	bcf	3,6	;RP1=0, select bank0
  6783  0469  00E0               	movwf	??_sprintf
  6784  046A  1683               	bsf	3,5	;RP0=1, select bank1
  6785  046B  1303               	bcf	3,6	;RP1=0, select bank1
  6786  046C  0837               	movf	sprintf@sp^(0+128),w
  6787  046D  0084               	movwf	4
  6788  046E  1283               	bcf	3,5	;RP0=0, select bank0
  6789  046F  1303               	bcf	3,6	;RP1=0, select bank0
  6790  0470  0860               	movf	??_sprintf,w
  6791  0471  1383               	bcf	3,7	;select IRP bank0
  6792  0472  0080               	movwf	0
  6793  0473  3001               	movlw	1
  6794  0474  00E0               	movwf	??_sprintf
  6795  0475  0860               	movf	??_sprintf,w
  6796  0476  1683               	bsf	3,5	;RP0=1, select bank1
  6797  0477  1303               	bcf	3,6	;RP1=0, select bank1
  6798  0478  07B7               	addwf	sprintf@sp^(0+128),f
  6799                           
  6800                           ;doprnt.c: 1182: width--;
  6801  0479  30FF               	movlw	255
  6802  047A  07B0               	addwf	sprintf@width^(0+128),f
  6803  047B  1803               	skipnc
  6804  047C  0AB1               	incf	(sprintf@width+1)^(0+128),f
  6805  047D  30FF               	movlw	255
  6806  047E  07B1               	addwf	(sprintf@width+1)^(0+128),f
  6807  047F                     l2559:	
  6808  047F  1683               	bsf	3,5	;RP0=1, select bank1
  6809  0480  1303               	bcf	3,6	;RP1=0, select bank1
  6810  0481  0831               	movf	(sprintf@width+1)^(0+128),w
  6811  0482  3A80               	xorlw	128
  6812  0483  00FF               	movwf	127
  6813  0484  3080               	movlw	128
  6814  0485  027F               	subwf	127,w
  6815  0486  1D03               	skipz
  6816  0487  2C8A               	goto	u3965
  6817  0488  3001               	movlw	1
  6818  0489  0230               	subwf	sprintf@width^(0+128),w
  6819  048A                     u3965:	
  6820  048A  1803               	skipnc
  6821  048B  2C66               	goto	l2553
  6822                           
  6823                           ;doprnt.c: 1183: }
  6824                           ;doprnt.c: 1188: if(flag & 0x03)
  6825  048C  3003               	movlw	3
  6826  048D  1683               	bsf	3,5	;RP0=1, select bank1
  6827  048E  1303               	bcf	3,6	;RP1=0, select bank1
  6828  048F  052E               	andwf	sprintf@flag^(0+128),w
  6829  0490  1283               	bcf	3,5	;RP0=0, select bank0
  6830  0491  1303               	bcf	3,6	;RP1=0, select bank0
  6831  0492  00E0               	movwf	??_sprintf
  6832  0493  3000               	movlw	0
  6833  0494  1683               	bsf	3,5	;RP0=1, select bank1
  6834  0495  1303               	bcf	3,6	;RP1=0, select bank1
  6835  0496  052F               	andwf	(sprintf@flag+1)^(0+128),w
  6836  0497  1283               	bcf	3,5	;RP0=0, select bank0
  6837  0498  1303               	bcf	3,6	;RP1=0, select bank0
  6838  0499  00E1               	movwf	??_sprintf+1
  6839  049A  0860               	movf	??_sprintf,w
  6840  049B  0461               	iorwf	??_sprintf+1,w
  6841  049C  1903               	btfsc	3,2
  6842  049D  2CAF               	goto	l171
  6843                           
  6844                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6845  049E  302D               	movlw	45
  6846  049F                     L4:	
  6847  049F  00E0               	movwf	??_sprintf
  6848  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  6849  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  6850  04A2  0837               	movf	sprintf@sp^(0+128),w
  6851  04A3  0084               	movwf	4
  6852  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  6853  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  6854  04A6  0860               	movf	??_sprintf,w
  6855  04A7  1383               	bcf	3,7	;select IRP bank0
  6856  04A8  0080               	movwf	0
  6857  04A9  3001               	movlw	1
  6858  04AA  00E0               	movwf	??_sprintf
  6859  04AB  0860               	movf	??_sprintf,w
  6860  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  6861  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  6862  04AE  07B7               	addwf	sprintf@sp^(0+128),f
  6863  04AF                     l171:	
  6864  04AF  30FF               	movlw	255
  6865  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  6866  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  6867  04B2  00E0               	movwf	??_sprintf
  6868  04B3  0860               	movf	??_sprintf,w
  6869  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  6870  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  6871  04B6  07B8               	addwf	sprintf@c^(0+128),f
  6872  04B7  0A38               	incf	sprintf@c^(0+128),w
  6873  04B8  1903               	btfsc	3,2
  6874  04B9  2D56               	goto	l2579
  6875                           
  6876                           ;doprnt.c: 1200: {
  6877                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6878                           
  6879                           ;doprnt.c: 1195: }
  6880                           ;doprnt.c: 1196: while(c--) {
  6881  04BA  0838               	movf	sprintf@c^(0+128),w
  6882  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  6883  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  6884  04BD  00E0               	movwf	??_sprintf
  6885  04BE  3001               	movlw	1
  6886  04BF                     u3985:	
  6887  04BF  1003               	clrc
  6888  04C0  0DE0               	rlf	??_sprintf,f
  6889  04C1  3EFF               	addlw	-1
  6890  04C2  1D03               	skipz
  6891  04C3  2CBF               	goto	u3985
  6892  04C4  1003               	clrc
  6893  04C5  0D60               	rlf	??_sprintf,w
  6894  04C6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6895  04C7  0084               	movwf	4
  6896  04C8  160A  118A  2000  120A  118A  	fcall	stringdir
  6897  04CD  00F0               	movwf	___lldiv@divisor
  6898  04CE  160A  118A  2000  120A  118A  	fcall	stringdir
  6899  04D3  00F1               	movwf	___lldiv@divisor+1
  6900  04D4  160A  118A  2000  120A  118A  	fcall	stringdir
  6901  04D9  00F2               	movwf	___lldiv@divisor+2
  6902  04DA  160A  118A  2000  120A  118A  	fcall	stringdir
  6903  04DF  00F3               	movwf	___lldiv@divisor+3
  6904  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  6905  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  6906  04E2  082B               	movf	(sprintf@val+3)^(0+128),w
  6907  04E3  00F7               	movwf	___lldiv@dividend+3
  6908  04E4  082A               	movf	(sprintf@val+2)^(0+128),w
  6909  04E5  00F6               	movwf	___lldiv@dividend+2
  6910  04E6  0829               	movf	(sprintf@val+1)^(0+128),w
  6911  04E7  00F5               	movwf	___lldiv@dividend+1
  6912  04E8  0828               	movf	sprintf@val^(0+128),w
  6913  04E9  00F4               	movwf	___lldiv@dividend
  6914  04EA  160A  118A  23CE  120A  118A  	fcall	___lldiv
  6915  04EF  0873               	movf	?___lldiv+3,w
  6916  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  6917  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  6918  04F2  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  6919  04F3  0872               	movf	?___lldiv+2,w
  6920  04F4  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  6921  04F5  0871               	movf	?___lldiv+1,w
  6922  04F6  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  6923  04F7  0870               	movf	?___lldiv,w
  6924  04F8  00A4               	movwf	sprintf@tmpval^(0+128)
  6925                           
  6926                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6927  04F9  3000               	movlw	0
  6928  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  6929  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  6930  04FC  00A3               	movwf	___llmod@divisor+3
  6931  04FD  3000               	movlw	0
  6932  04FE  00A2               	movwf	___llmod@divisor+2
  6933  04FF  3000               	movlw	0
  6934  0500  00A1               	movwf	___llmod@divisor+1
  6935  0501  300A               	movlw	10
  6936  0502  00A0               	movwf	___llmod@divisor
  6937  0503  1683               	bsf	3,5	;RP0=1, select bank1
  6938  0504  1303               	bcf	3,6	;RP1=0, select bank1
  6939  0505  0827               	movf	(sprintf@tmpval+3)^(0+128),w
  6940  0506  1283               	bcf	3,5	;RP0=0, select bank0
  6941  0507  1303               	bcf	3,6	;RP1=0, select bank0
  6942  0508  00A7               	movwf	___llmod@dividend+3
  6943  0509  1683               	bsf	3,5	;RP0=1, select bank1
  6944  050A  1303               	bcf	3,6	;RP1=0, select bank1
  6945  050B  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  6946  050C  1283               	bcf	3,5	;RP0=0, select bank0
  6947  050D  1303               	bcf	3,6	;RP1=0, select bank0
  6948  050E  00A6               	movwf	___llmod@dividend+2
  6949  050F  1683               	bsf	3,5	;RP0=1, select bank1
  6950  0510  1303               	bcf	3,6	;RP1=0, select bank1
  6951  0511  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  6952  0512  1283               	bcf	3,5	;RP0=0, select bank0
  6953  0513  1303               	bcf	3,6	;RP1=0, select bank0
  6954  0514  00A5               	movwf	___llmod@dividend+1
  6955  0515  1683               	bsf	3,5	;RP0=1, select bank1
  6956  0516  1303               	bcf	3,6	;RP1=0, select bank1
  6957  0517  0824               	movf	sprintf@tmpval^(0+128),w
  6958  0518  1283               	bcf	3,5	;RP0=0, select bank0
  6959  0519  1303               	bcf	3,6	;RP1=0, select bank0
  6960  051A  00A4               	movwf	___llmod@dividend
  6961  051B  160A  118A  226D  120A  118A  	fcall	___llmod
  6962  0520  1283               	bcf	3,5	;RP0=0, select bank0
  6963  0521  1303               	bcf	3,6	;RP1=0, select bank0
  6964  0522  0823               	movf	?___llmod+3,w
  6965  0523  1683               	bsf	3,5	;RP0=1, select bank1
  6966  0524  1303               	bcf	3,6	;RP1=0, select bank1
  6967  0525  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  6968  0526  1283               	bcf	3,5	;RP0=0, select bank0
  6969  0527  1303               	bcf	3,6	;RP1=0, select bank0
  6970  0528  0822               	movf	?___llmod+2,w
  6971  0529  1683               	bsf	3,5	;RP0=1, select bank1
  6972  052A  1303               	bcf	3,6	;RP1=0, select bank1
  6973  052B  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  6974  052C  1283               	bcf	3,5	;RP0=0, select bank0
  6975  052D  1303               	bcf	3,6	;RP1=0, select bank0
  6976  052E  0821               	movf	?___llmod+1,w
  6977  052F  1683               	bsf	3,5	;RP0=1, select bank1
  6978  0530  1303               	bcf	3,6	;RP1=0, select bank1
  6979  0531  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  6980  0532  1283               	bcf	3,5	;RP0=0, select bank0
  6981  0533  1303               	bcf	3,6	;RP1=0, select bank0
  6982  0534  0820               	movf	?___llmod,w
  6983  0535  1683               	bsf	3,5	;RP0=1, select bank1
  6984  0536  1303               	bcf	3,6	;RP1=0, select bank1
  6985  0537  00A4               	movwf	sprintf@tmpval^(0+128)
  6986                           
  6987                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6988  0538  0824               	movf	sprintf@tmpval^(0+128),w
  6989  0539  3E30               	addlw	48
  6990  053A  1283               	bcf	3,5	;RP0=0, select bank0
  6991  053B  1303               	bcf	3,6	;RP1=0, select bank0
  6992  053C  2C9F               	goto	L4
  6993  053D                     l2573:	
  6994                           ;doprnt.c: 1204: }
  6995                           ;doprnt.c: 1206: }
  6996                           ;doprnt.c: 1207: while(exp > 0) {
  6997                           
  6998                           
  6999                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  7000  053D  3030               	movlw	48
  7001  053E  1283               	bcf	3,5	;RP0=0, select bank0
  7002  053F  1303               	bcf	3,6	;RP1=0, select bank0
  7003  0540  00E0               	movwf	??_sprintf
  7004  0541  1683               	bsf	3,5	;RP0=1, select bank1
  7005  0542  1303               	bcf	3,6	;RP1=0, select bank1
  7006  0543  0837               	movf	sprintf@sp^(0+128),w
  7007  0544  0084               	movwf	4
  7008  0545  1283               	bcf	3,5	;RP0=0, select bank0
  7009  0546  1303               	bcf	3,6	;RP1=0, select bank0
  7010  0547  0860               	movf	??_sprintf,w
  7011  0548  1383               	bcf	3,7	;select IRP bank0
  7012  0549  0080               	movwf	0
  7013  054A  3001               	movlw	1
  7014  054B  00E0               	movwf	??_sprintf
  7015  054C  0860               	movf	??_sprintf,w
  7016  054D  1683               	bsf	3,5	;RP0=1, select bank1
  7017  054E  1303               	bcf	3,6	;RP1=0, select bank1
  7018  054F  07B7               	addwf	sprintf@sp^(0+128),f
  7019                           
  7020                           ;doprnt.c: 1209: exp--;
  7021  0550  30FF               	movlw	255
  7022  0551  07AC               	addwf	sprintf@exp^(0+128),f
  7023  0552  1803               	skipnc
  7024  0553  0AAD               	incf	(sprintf@exp+1)^(0+128),f
  7025  0554  30FF               	movlw	255
  7026  0555  07AD               	addwf	(sprintf@exp+1)^(0+128),f
  7027  0556                     l2579:	
  7028  0556  082D               	movf	(sprintf@exp+1)^(0+128),w
  7029  0557  3A80               	xorlw	128
  7030  0558  00FF               	movwf	127
  7031  0559  3080               	movlw	128
  7032  055A  027F               	subwf	127,w
  7033  055B  1D03               	skipz
  7034  055C  2D5F               	goto	u4005
  7035  055D  3001               	movlw	1
  7036  055E  022C               	subwf	sprintf@exp^(0+128),w
  7037  055F                     u4005:	
  7038  055F  1803               	skipnc
  7039  0560  2D3D               	goto	l2573
  7040                           
  7041                           ;doprnt.c: 1210: }
  7042                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7043  0561  1683               	bsf	3,5	;RP0=1, select bank1
  7044  0562  1303               	bcf	3,6	;RP1=0, select bank1
  7045  0563  0836               	movf	(sprintf@prec+1)^(0+128),w
  7046  0564  3A80               	xorlw	128
  7047  0565  00FF               	movwf	127
  7048  0566  3080               	movlw	128
  7049  0567  027F               	subwf	127,w
  7050  0568  1D03               	skipz
  7051  0569  2D6C               	goto	u4015
  7052  056A  3009               	movlw	9
  7053  056B  0235               	subwf	sprintf@prec^(0+128),w
  7054  056C                     u4015:	
  7055  056C  1C03               	skipc
  7056  056D  2D70               	goto	l2585
  7057                           
  7058                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7059  056E  3008               	movlw	8
  7060  056F  2D73               	goto	L5
  7061  0570                     l2585:	
  7062                           
  7063                           ;doprnt.c: 1213: else
  7064                           ;doprnt.c: 1214: c = prec;
  7065  0570  1683               	bsf	3,5	;RP0=1, select bank1
  7066  0571  1303               	bcf	3,6	;RP1=0, select bank1
  7067  0572  0835               	movf	sprintf@prec^(0+128),w
  7068  0573                     L5:	
  7069  0573  1283               	bcf	3,5	;RP0=0, select bank0
  7070  0574  1303               	bcf	3,6	;RP1=0, select bank0
  7071  0575  00E0               	movwf	??_sprintf
  7072  0576  0860               	movf	??_sprintf,w
  7073  0577  1683               	bsf	3,5	;RP0=1, select bank1
  7074  0578  1303               	bcf	3,6	;RP1=0, select bank1
  7075  0579  00B8               	movwf	sprintf@c^(0+128)
  7076                           
  7077                           ;doprnt.c: 1215: prec -= c;
  7078  057A  0838               	movf	sprintf@c^(0+128),w
  7079  057B  1283               	bcf	3,5	;RP0=0, select bank0
  7080  057C  1303               	bcf	3,6	;RP1=0, select bank0
  7081  057D  00E0               	movwf	??_sprintf
  7082  057E  01E1               	clrf	??_sprintf+1
  7083  057F  1BE0               	btfsc	??_sprintf,7
  7084  0580  03E1               	decf	??_sprintf+1,f
  7085  0581  0860               	movf	??_sprintf,w
  7086  0582  1683               	bsf	3,5	;RP0=1, select bank1
  7087  0583  1303               	bcf	3,6	;RP1=0, select bank1
  7088  0584  02B5               	subwf	sprintf@prec^(0+128),f
  7089  0585  1283               	bcf	3,5	;RP0=0, select bank0
  7090  0586  1303               	bcf	3,6	;RP1=0, select bank0
  7091  0587  0861               	movf	??_sprintf+1,w
  7092  0588  1683               	bsf	3,5	;RP0=1, select bank1
  7093  0589  1303               	bcf	3,6	;RP1=0, select bank1
  7094  058A  1C03               	skipc
  7095  058B  03B6               	decf	(sprintf@prec+1)^(0+128),f
  7096  058C  02B6               	subwf	(sprintf@prec+1)^(0+128),f
  7097                           
  7098                           ;doprnt.c: 1219: if(c)
  7099  058D  0838               	movf	sprintf@c^(0+128),w
  7100  058E  1903               	btfsc	3,2
  7101  058F  2DA3               	goto	l2593
  7102                           
  7103                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  7104  0590  302E               	movlw	46
  7105  0591  1283               	bcf	3,5	;RP0=0, select bank0
  7106  0592  1303               	bcf	3,6	;RP1=0, select bank0
  7107  0593  00E0               	movwf	??_sprintf
  7108  0594  1683               	bsf	3,5	;RP0=1, select bank1
  7109  0595  1303               	bcf	3,6	;RP1=0, select bank1
  7110  0596  0837               	movf	sprintf@sp^(0+128),w
  7111  0597  0084               	movwf	4
  7112  0598  1283               	bcf	3,5	;RP0=0, select bank0
  7113  0599  1303               	bcf	3,6	;RP1=0, select bank0
  7114  059A  0860               	movf	??_sprintf,w
  7115  059B  1383               	bcf	3,7	;select IRP bank0
  7116  059C  0080               	movwf	0
  7117  059D  3001               	movlw	1
  7118  059E  00E0               	movwf	??_sprintf
  7119  059F  0860               	movf	??_sprintf,w
  7120  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  7121  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  7122  05A2  07B7               	addwf	sprintf@sp^(0+128),f
  7123  05A3                     l2593:	
  7124                           
  7125                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7126  05A3  0838               	movf	sprintf@c^(0+128),w
  7127  05A4  120A  158A  2565  120A  118A  	fcall	_scale
  7128  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  7129  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  7130  05AB  0837               	movf	?_scale,w
  7131  05AC  1683               	bsf	3,5	;RP0=1, select bank1
  7132  05AD  1303               	bcf	3,6	;RP1=0, select bank1
  7133  05AE  00A0               	movwf	_sprintf$562^(0+128)
  7134  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  7135  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  7136  05B1  0838               	movf	?_scale+1,w
  7137  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  7138  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  7139  05B4  00A1               	movwf	(_sprintf$562+1)^(0+128)
  7140  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  7141  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  7142  05B7  0839               	movf	?_scale+2,w
  7143  05B8  1683               	bsf	3,5	;RP0=1, select bank1
  7144  05B9  1303               	bcf	3,6	;RP1=0, select bank1
  7145  05BA  00A2               	movwf	(_sprintf$562+2)^(0+128)
  7146                           
  7147                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7148  05BB  0820               	movf	_sprintf$562^(0+128),w
  7149  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  7150  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  7151  05BE  00AA               	movwf	___ftmul@f2
  7152  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  7153  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  7154  05C1  0821               	movf	(_sprintf$562+1)^(0+128),w
  7155  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  7156  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  7157  05C4  00AB               	movwf	___ftmul@f2+1
  7158  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  7159  05C6  1303               	bcf	3,6	;RP1=0, select bank1
  7160  05C7  0822               	movf	(_sprintf$562+2)^(0+128),w
  7161  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  7162  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  7163  05CA  00AC               	movwf	___ftmul@f2+2
  7164  05CB  1683               	bsf	3,5	;RP0=1, select bank1
  7165  05CC  1303               	bcf	3,6	;RP1=0, select bank1
  7166  05CD  0832               	movf	sprintf@fval^(0+128),w
  7167  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  7168  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  7169  05D0  00A7               	movwf	___ftmul@f1
  7170  05D1  1683               	bsf	3,5	;RP0=1, select bank1
  7171  05D2  1303               	bcf	3,6	;RP1=0, select bank1
  7172  05D3  0833               	movf	(sprintf@fval+1)^(0+128),w
  7173  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  7174  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  7175  05D6  00A8               	movwf	___ftmul@f1+1
  7176  05D7  1683               	bsf	3,5	;RP0=1, select bank1
  7177  05D8  1303               	bcf	3,6	;RP1=0, select bank1
  7178  05D9  0834               	movf	(sprintf@fval+2)^(0+128),w
  7179  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  7180  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  7181  05DC  00A9               	movwf	___ftmul@f1+2
  7182  05DD  120A  158A  2035  120A  118A  	fcall	___ftmul
  7183  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  7184  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  7185  05E4  0827               	movf	?___ftmul,w
  7186  05E5  00C0               	movwf	___fttol@f1
  7187  05E6  0828               	movf	?___ftmul+1,w
  7188  05E7  00C1               	movwf	___fttol@f1+1
  7189  05E8  0829               	movf	?___ftmul+2,w
  7190  05E9  00C2               	movwf	___fttol@f1+2
  7191  05EA  160A  118A  2498  120A  118A  	fcall	___fttol
  7192  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  7193  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  7194  05F1  0843               	movf	?___fttol+3,w
  7195  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  7196  05F3  1303               	bcf	3,6	;RP1=0, select bank1
  7197  05F4  00AB               	movwf	(sprintf@val+3)^(0+128)
  7198  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  7199  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  7200  05F7  0842               	movf	?___fttol+2,w
  7201  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  7202  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  7203  05FA  00AA               	movwf	(sprintf@val+2)^(0+128)
  7204  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  7205  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  7206  05FD  0841               	movf	?___fttol+1,w
  7207  05FE  1683               	bsf	3,5	;RP0=1, select bank1
  7208  05FF  1303               	bcf	3,6	;RP1=0, select bank1
  7209  0600  00A9               	movwf	(sprintf@val+1)^(0+128)
  7210  0601  1283               	bcf	3,5	;RP0=0, select bank0
  7211  0602  1303               	bcf	3,6	;RP1=0, select bank0
  7212  0603  0840               	movf	?___fttol,w
  7213  0604                     L6:	
  7214  0604  1683               	bsf	3,5	;RP0=1, select bank1
  7215  0605  1303               	bcf	3,6	;RP1=0, select bank1
  7216  0606  00A8               	movwf	sprintf@val^(0+128)
  7217  0607  30FF               	movlw	255
  7218  0608  1283               	bcf	3,5	;RP0=0, select bank0
  7219  0609  1303               	bcf	3,6	;RP1=0, select bank0
  7220  060A  00E0               	movwf	??_sprintf
  7221  060B  0860               	movf	??_sprintf,w
  7222  060C  1683               	bsf	3,5	;RP0=1, select bank1
  7223  060D  1303               	bcf	3,6	;RP1=0, select bank1
  7224  060E  07B8               	addwf	sprintf@c^(0+128),f
  7225  060F  0A38               	incf	sprintf@c^(0+128),w
  7226  0610  1903               	btfsc	3,2
  7227  0611  2F16               	goto	l2613
  7228                           
  7229                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7230                           
  7231                           ;doprnt.c: 1228: while(c--) {
  7232  0612  0838               	movf	sprintf@c^(0+128),w
  7233  0613  1283               	bcf	3,5	;RP0=0, select bank0
  7234  0614  1303               	bcf	3,6	;RP1=0, select bank0
  7235  0615  00E0               	movwf	??_sprintf
  7236  0616  3001               	movlw	1
  7237  0617                     u4035:	
  7238  0617  1003               	clrc
  7239  0618  0DE0               	rlf	??_sprintf,f
  7240  0619  3EFF               	addlw	-1
  7241  061A  1D03               	skipz
  7242  061B  2E17               	goto	u4035
  7243  061C  1003               	clrc
  7244  061D  0D60               	rlf	??_sprintf,w
  7245  061E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  7246  061F  0084               	movwf	4
  7247  0620  160A  118A  2000  120A  118A  	fcall	stringdir
  7248  0625  00F0               	movwf	___lldiv@divisor
  7249  0626  160A  118A  2000  120A  118A  	fcall	stringdir
  7250  062B  00F1               	movwf	___lldiv@divisor+1
  7251  062C  160A  118A  2000  120A  118A  	fcall	stringdir
  7252  0631  00F2               	movwf	___lldiv@divisor+2
  7253  0632  160A  118A  2000  120A  118A  	fcall	stringdir
  7254  0637  00F3               	movwf	___lldiv@divisor+3
  7255  0638  1683               	bsf	3,5	;RP0=1, select bank1
  7256  0639  1303               	bcf	3,6	;RP1=0, select bank1
  7257  063A  082B               	movf	(sprintf@val+3)^(0+128),w
  7258  063B  00F7               	movwf	___lldiv@dividend+3
  7259  063C  082A               	movf	(sprintf@val+2)^(0+128),w
  7260  063D  00F6               	movwf	___lldiv@dividend+2
  7261  063E  0829               	movf	(sprintf@val+1)^(0+128),w
  7262  063F  00F5               	movwf	___lldiv@dividend+1
  7263  0640  0828               	movf	sprintf@val^(0+128),w
  7264  0641  00F4               	movwf	___lldiv@dividend
  7265  0642  160A  118A  23CE  120A  118A  	fcall	___lldiv
  7266  0647  0873               	movf	?___lldiv+3,w
  7267  0648  1683               	bsf	3,5	;RP0=1, select bank1
  7268  0649  1303               	bcf	3,6	;RP1=0, select bank1
  7269  064A  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  7270  064B  0872               	movf	?___lldiv+2,w
  7271  064C  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  7272  064D  0871               	movf	?___lldiv+1,w
  7273  064E  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  7274  064F  0870               	movf	?___lldiv,w
  7275  0650  00A4               	movwf	sprintf@tmpval^(0+128)
  7276                           
  7277                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7278  0651  3000               	movlw	0
  7279  0652  1283               	bcf	3,5	;RP0=0, select bank0
  7280  0653  1303               	bcf	3,6	;RP1=0, select bank0
  7281  0654  00A3               	movwf	___llmod@divisor+3
  7282  0655  3000               	movlw	0
  7283  0656  00A2               	movwf	___llmod@divisor+2
  7284  0657  3000               	movlw	0
  7285  0658  00A1               	movwf	___llmod@divisor+1
  7286  0659  300A               	movlw	10
  7287  065A  00A0               	movwf	___llmod@divisor
  7288  065B  1683               	bsf	3,5	;RP0=1, select bank1
  7289  065C  1303               	bcf	3,6	;RP1=0, select bank1
  7290  065D  0827               	movf	(sprintf@tmpval+3)^(0+128),w
  7291  065E  1283               	bcf	3,5	;RP0=0, select bank0
  7292  065F  1303               	bcf	3,6	;RP1=0, select bank0
  7293  0660  00A7               	movwf	___llmod@dividend+3
  7294  0661  1683               	bsf	3,5	;RP0=1, select bank1
  7295  0662  1303               	bcf	3,6	;RP1=0, select bank1
  7296  0663  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  7297  0664  1283               	bcf	3,5	;RP0=0, select bank0
  7298  0665  1303               	bcf	3,6	;RP1=0, select bank0
  7299  0666  00A6               	movwf	___llmod@dividend+2
  7300  0667  1683               	bsf	3,5	;RP0=1, select bank1
  7301  0668  1303               	bcf	3,6	;RP1=0, select bank1
  7302  0669  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  7303  066A  1283               	bcf	3,5	;RP0=0, select bank0
  7304  066B  1303               	bcf	3,6	;RP1=0, select bank0
  7305  066C  00A5               	movwf	___llmod@dividend+1
  7306  066D  1683               	bsf	3,5	;RP0=1, select bank1
  7307  066E  1303               	bcf	3,6	;RP1=0, select bank1
  7308  066F  0824               	movf	sprintf@tmpval^(0+128),w
  7309  0670  1283               	bcf	3,5	;RP0=0, select bank0
  7310  0671  1303               	bcf	3,6	;RP1=0, select bank0
  7311  0672  00A4               	movwf	___llmod@dividend
  7312  0673  160A  118A  226D  120A  118A  	fcall	___llmod
  7313  0678  1283               	bcf	3,5	;RP0=0, select bank0
  7314  0679  1303               	bcf	3,6	;RP1=0, select bank0
  7315  067A  0823               	movf	?___llmod+3,w
  7316  067B  1683               	bsf	3,5	;RP0=1, select bank1
  7317  067C  1303               	bcf	3,6	;RP1=0, select bank1
  7318  067D  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  7319  067E  1283               	bcf	3,5	;RP0=0, select bank0
  7320  067F  1303               	bcf	3,6	;RP1=0, select bank0
  7321  0680  0822               	movf	?___llmod+2,w
  7322  0681  1683               	bsf	3,5	;RP0=1, select bank1
  7323  0682  1303               	bcf	3,6	;RP1=0, select bank1
  7324  0683  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  7325  0684  1283               	bcf	3,5	;RP0=0, select bank0
  7326  0685  1303               	bcf	3,6	;RP1=0, select bank0
  7327  0686  0821               	movf	?___llmod+1,w
  7328  0687  1683               	bsf	3,5	;RP0=1, select bank1
  7329  0688  1303               	bcf	3,6	;RP1=0, select bank1
  7330  0689  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  7331  068A  1283               	bcf	3,5	;RP0=0, select bank0
  7332  068B  1303               	bcf	3,6	;RP1=0, select bank0
  7333  068C  0820               	movf	?___llmod,w
  7334  068D  1683               	bsf	3,5	;RP0=1, select bank1
  7335  068E  1303               	bcf	3,6	;RP1=0, select bank1
  7336  068F  00A4               	movwf	sprintf@tmpval^(0+128)
  7337                           
  7338                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7339  0690  0824               	movf	sprintf@tmpval^(0+128),w
  7340  0691  3E30               	addlw	48
  7341  0692  1283               	bcf	3,5	;RP0=0, select bank0
  7342  0693  1303               	bcf	3,6	;RP1=0, select bank0
  7343  0694  00E0               	movwf	??_sprintf
  7344  0695  1683               	bsf	3,5	;RP0=1, select bank1
  7345  0696  1303               	bcf	3,6	;RP1=0, select bank1
  7346  0697  0837               	movf	sprintf@sp^(0+128),w
  7347  0698  0084               	movwf	4
  7348  0699  1283               	bcf	3,5	;RP0=0, select bank0
  7349  069A  1303               	bcf	3,6	;RP1=0, select bank0
  7350  069B  0860               	movf	??_sprintf,w
  7351  069C  1383               	bcf	3,7	;select IRP bank0
  7352  069D  0080               	movwf	0
  7353  069E  3001               	movlw	1
  7354  069F  00E0               	movwf	??_sprintf
  7355  06A0  0860               	movf	??_sprintf,w
  7356  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  7357  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  7358  06A3  07B7               	addwf	sprintf@sp^(0+128),f
  7359                           
  7360                           ;doprnt.c: 1232: val %= dpowers[c];
  7361  06A4  0838               	movf	sprintf@c^(0+128),w
  7362  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  7363  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  7364  06A7  00E0               	movwf	??_sprintf
  7365  06A8  3001               	movlw	1
  7366  06A9                     u4045:	
  7367  06A9  1003               	clrc
  7368  06AA  0DE0               	rlf	??_sprintf,f
  7369  06AB  3EFF               	addlw	-1
  7370  06AC  1D03               	skipz
  7371  06AD  2EA9               	goto	u4045
  7372  06AE  1003               	clrc
  7373  06AF  0D60               	rlf	??_sprintf,w
  7374  06B0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  7375  06B1  0084               	movwf	4
  7376  06B2  160A  118A  2000  120A  118A  	fcall	stringdir
  7377  06B7  00A0               	movwf	___llmod@divisor
  7378  06B8  160A  118A  2000  120A  118A  	fcall	stringdir
  7379  06BD  00A1               	movwf	___llmod@divisor+1
  7380  06BE  160A  118A  2000  120A  118A  	fcall	stringdir
  7381  06C3  00A2               	movwf	___llmod@divisor+2
  7382  06C4  160A  118A  2000  120A  118A  	fcall	stringdir
  7383  06C9  00A3               	movwf	___llmod@divisor+3
  7384  06CA  1683               	bsf	3,5	;RP0=1, select bank1
  7385  06CB  1303               	bcf	3,6	;RP1=0, select bank1
  7386  06CC  082B               	movf	(sprintf@val+3)^(0+128),w
  7387  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  7388  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  7389  06CF  00A7               	movwf	___llmod@dividend+3
  7390  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  7391  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  7392  06D2  082A               	movf	(sprintf@val+2)^(0+128),w
  7393  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  7394  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  7395  06D5  00A6               	movwf	___llmod@dividend+2
  7396  06D6  1683               	bsf	3,5	;RP0=1, select bank1
  7397  06D7  1303               	bcf	3,6	;RP1=0, select bank1
  7398  06D8  0829               	movf	(sprintf@val+1)^(0+128),w
  7399  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  7400  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  7401  06DB  00A5               	movwf	___llmod@dividend+1
  7402  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  7403  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  7404  06DE  0828               	movf	sprintf@val^(0+128),w
  7405  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  7406  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  7407  06E1  00A4               	movwf	___llmod@dividend
  7408  06E2  160A  118A  226D  120A  118A  	fcall	___llmod
  7409  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  7410  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  7411  06E9  0823               	movf	?___llmod+3,w
  7412  06EA  1683               	bsf	3,5	;RP0=1, select bank1
  7413  06EB  1303               	bcf	3,6	;RP1=0, select bank1
  7414  06EC  00AB               	movwf	(sprintf@val+3)^(0+128)
  7415  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  7416  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  7417  06EF  0822               	movf	?___llmod+2,w
  7418  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  7419  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  7420  06F2  00AA               	movwf	(sprintf@val+2)^(0+128)
  7421  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  7422  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  7423  06F5  0821               	movf	?___llmod+1,w
  7424  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  7425  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  7426  06F8  00A9               	movwf	(sprintf@val+1)^(0+128)
  7427  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  7428  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  7429  06FB  0820               	movf	?___llmod,w
  7430  06FC  2E04               	goto	L6
  7431  06FD                     l2607:	
  7432                           ;doprnt.c: 1233: }
  7433                           ;doprnt.c: 1235: while(prec) {
  7434                           
  7435                           
  7436                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7437  06FD  3030               	movlw	48
  7438  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  7439  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  7440  0700  00E0               	movwf	??_sprintf
  7441  0701  1683               	bsf	3,5	;RP0=1, select bank1
  7442  0702  1303               	bcf	3,6	;RP1=0, select bank1
  7443  0703  0837               	movf	sprintf@sp^(0+128),w
  7444  0704  0084               	movwf	4
  7445  0705  1283               	bcf	3,5	;RP0=0, select bank0
  7446  0706  1303               	bcf	3,6	;RP1=0, select bank0
  7447  0707  0860               	movf	??_sprintf,w
  7448  0708  1383               	bcf	3,7	;select IRP bank0
  7449  0709  0080               	movwf	0
  7450  070A  3001               	movlw	1
  7451  070B  00E0               	movwf	??_sprintf
  7452  070C  0860               	movf	??_sprintf,w
  7453  070D  1683               	bsf	3,5	;RP0=1, select bank1
  7454  070E  1303               	bcf	3,6	;RP1=0, select bank1
  7455  070F  07B7               	addwf	sprintf@sp^(0+128),f
  7456                           
  7457                           ;doprnt.c: 1237: prec--;
  7458  0710  30FF               	movlw	255
  7459  0711  07B5               	addwf	sprintf@prec^(0+128),f
  7460  0712  1803               	skipnc
  7461  0713  0AB6               	incf	(sprintf@prec+1)^(0+128),f
  7462  0714  30FF               	movlw	255
  7463  0715  07B6               	addwf	(sprintf@prec+1)^(0+128),f
  7464  0716                     l2613:	
  7465  0716  0835               	movf	sprintf@prec^(0+128),w
  7466  0717  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  7467  0718  1903               	btfsc	3,2
  7468  0719  28DC               	goto	L13
  7469  071A  2EFD               	goto	l2607
  7470  071B                     l2615:	
  7471                           ;doprnt.c: 1238: }
  7472                           ;doprnt.c: 1245: continue;
  7473                           
  7474                           
  7475                           ;doprnt.c: 1246: }
  7476                           ;doprnt.c: 1253: {
  7477                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7478  071B  1683               	bsf	3,5	;RP0=1, select bank1
  7479  071C  1303               	bcf	3,6	;RP1=0, select bank1
  7480  071D  0823               	movf	sprintf@ap^(0+128),w
  7481  071E  0084               	movwf	4
  7482  071F  1383               	bcf	3,7	;select IRP bank0
  7483  0720  0800               	movf	0,w
  7484  0721  1283               	bcf	3,5	;RP0=0, select bank0
  7485  0722  1303               	bcf	3,6	;RP1=0, select bank0
  7486  0723  00E0               	movwf	??_sprintf
  7487  0724  0A84               	incf	4,f
  7488  0725  0800               	movf	0,w
  7489  0726  00E1               	movwf	??_sprintf+1
  7490  0727  0860               	movf	??_sprintf,w
  7491  0728  1683               	bsf	3,5	;RP0=1, select bank1
  7492  0729  1303               	bcf	3,6	;RP1=0, select bank1
  7493  072A  00A8               	movwf	sprintf@val^(0+128)
  7494  072B  1283               	bcf	3,5	;RP0=0, select bank0
  7495  072C  1303               	bcf	3,6	;RP1=0, select bank0
  7496  072D  0861               	movf	??_sprintf+1,w
  7497  072E  1683               	bsf	3,5	;RP0=1, select bank1
  7498  072F  1303               	bcf	3,6	;RP1=0, select bank1
  7499  0730  00A9               	movwf	(sprintf@val+1)^(0+128)
  7500  0731  3000               	movlw	0
  7501  0732  1BA9               	btfsc	(sprintf@val+1)^(0+128),7
  7502  0733  30FF               	movlw	255
  7503  0734  00AA               	movwf	(sprintf@val+2)^(0+128)
  7504  0735  00AB               	movwf	(sprintf@val+3)^(0+128)
  7505  0736  3002               	movlw	2
  7506  0737  1283               	bcf	3,5	;RP0=0, select bank0
  7507  0738  1303               	bcf	3,6	;RP1=0, select bank0
  7508  0739  00E0               	movwf	??_sprintf
  7509  073A  0860               	movf	??_sprintf,w
  7510  073B  1683               	bsf	3,5	;RP0=1, select bank1
  7511  073C  1303               	bcf	3,6	;RP1=0, select bank1
  7512  073D  07A3               	addwf	sprintf@ap^(0+128),f
  7513                           
  7514                           ;doprnt.c: 1261: if((long)val < 0) {
  7515  073E  1FAB               	btfss	(sprintf@val+3)^(0+128),7
  7516  073F  2F4F               	goto	l2625
  7517                           
  7518                           ;doprnt.c: 1262: flag |= 0x03;
  7519  0740  3003               	movlw	3
  7520  0741  04AE               	iorwf	sprintf@flag^(0+128),f
  7521  0742  3000               	movlw	0
  7522  0743  04AF               	iorwf	(sprintf@flag+1)^(0+128),f
  7523                           
  7524                           ;doprnt.c: 1263: val = -val;
  7525  0744  09A8               	comf	sprintf@val^(0+128),f
  7526  0745  09A9               	comf	(sprintf@val+1)^(0+128),f
  7527  0746  09AA               	comf	(sprintf@val+2)^(0+128),f
  7528  0747  09AB               	comf	(sprintf@val+3)^(0+128),f
  7529  0748  0AA8               	incf	sprintf@val^(0+128),f
  7530  0749  1903               	skipnz
  7531  074A  0AA9               	incf	(sprintf@val+1)^(0+128),f
  7532  074B  1903               	skipnz
  7533  074C  0AAA               	incf	(sprintf@val+2)^(0+128),f
  7534  074D  1903               	skipnz
  7535  074E  0AAB               	incf	(sprintf@val+3)^(0+128),f
  7536  074F                     l2625:	
  7537                           
  7538                           ;doprnt.c: 1264: }
  7539                           ;doprnt.c: 1266: }
  7540                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7541  074F  0835               	movf	sprintf@prec^(0+128),w
  7542  0750  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  7543  0751  1D03               	btfss	3,2
  7544  0752  2F5F               	goto	l2631
  7545  0753  082B               	movf	(sprintf@val+3)^(0+128),w
  7546  0754  042A               	iorwf	(sprintf@val+2)^(0+128),w
  7547  0755  0429               	iorwf	(sprintf@val+1)^(0+128),w
  7548  0756  0428               	iorwf	sprintf@val^(0+128),w
  7549  0757  1D03               	skipz
  7550  0758  2F5F               	goto	l2631
  7551                           
  7552                           ;doprnt.c: 1291: prec++;
  7553  0759  3001               	movlw	1
  7554  075A  07B5               	addwf	sprintf@prec^(0+128),f
  7555  075B  1803               	skipnc
  7556  075C  0AB6               	incf	(sprintf@prec+1)^(0+128),f
  7557  075D  3000               	movlw	0
  7558  075E  07B6               	addwf	(sprintf@prec+1)^(0+128),f
  7559  075F                     l2631:	
  7560                           
  7561                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7562  075F  01B8               	clrf	sprintf@c^(0+128)
  7563  0760  0AB8               	incf	sprintf@c^(0+128),f
  7564  0761  300A               	movlw	10
  7565  0762  0638               	xorwf	sprintf@c^(0+128),w
  7566  0763  1903               	btfsc	3,2
  7567  0764  2FB5               	goto	l2643
  7568  0765                     l2637:	
  7569                           
  7570                           ;doprnt.c: 1306: if(val < dpowers[c])
  7571  0765  0838               	movf	sprintf@c^(0+128),w
  7572  0766  1283               	bcf	3,5	;RP0=0, select bank0
  7573  0767  1303               	bcf	3,6	;RP1=0, select bank0
  7574  0768  00E0               	movwf	??_sprintf
  7575  0769  3001               	movlw	1
  7576  076A                     u4115:	
  7577  076A  1003               	clrc
  7578  076B  0DE0               	rlf	??_sprintf,f
  7579  076C  3EFF               	addlw	-1
  7580  076D  1D03               	skipz
  7581  076E  2F6A               	goto	u4115
  7582  076F  1003               	clrc
  7583  0770  0D60               	rlf	??_sprintf,w
  7584  0771  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  7585  0772  0084               	movwf	4
  7586  0773  160A  118A  2000  120A  118A  	fcall	stringdir
  7587  0778  00E1               	movwf	??_sprintf+1
  7588  0779  160A  118A  2000  120A  118A  	fcall	stringdir
  7589  077E  00E2               	movwf	??_sprintf+2
  7590  077F  160A  118A  2000  120A  118A  	fcall	stringdir
  7591  0784  00E3               	movwf	??_sprintf+3
  7592  0785  160A  118A  2000  120A  118A  	fcall	stringdir
  7593  078A  00E4               	movwf	??_sprintf+4
  7594  078B  0864               	movf	??_sprintf+4,w
  7595  078C  1683               	bsf	3,5	;RP0=1, select bank1
  7596  078D  1303               	bcf	3,6	;RP1=0, select bank1
  7597  078E  022B               	subwf	(sprintf@val+3)^(0+128),w
  7598  078F  1D03               	skipz
  7599  0790  2FA7               	goto	u4125
  7600  0791  1283               	bcf	3,5	;RP0=0, select bank0
  7601  0792  1303               	bcf	3,6	;RP1=0, select bank0
  7602  0793  0863               	movf	??_sprintf+3,w
  7603  0794  1683               	bsf	3,5	;RP0=1, select bank1
  7604  0795  1303               	bcf	3,6	;RP1=0, select bank1
  7605  0796  022A               	subwf	(sprintf@val+2)^(0+128),w
  7606  0797  1D03               	skipz
  7607  0798  2FA7               	goto	u4125
  7608  0799  1283               	bcf	3,5	;RP0=0, select bank0
  7609  079A  1303               	bcf	3,6	;RP1=0, select bank0
  7610  079B  0862               	movf	??_sprintf+2,w
  7611  079C  1683               	bsf	3,5	;RP0=1, select bank1
  7612  079D  1303               	bcf	3,6	;RP1=0, select bank1
  7613  079E  0229               	subwf	(sprintf@val+1)^(0+128),w
  7614  079F  1D03               	skipz
  7615  07A0  2FA7               	goto	u4125
  7616  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  7617  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  7618  07A3  0861               	movf	??_sprintf+1,w
  7619  07A4  1683               	bsf	3,5	;RP0=1, select bank1
  7620  07A5  1303               	bcf	3,6	;RP1=0, select bank1
  7621  07A6  0228               	subwf	sprintf@val^(0+128),w
  7622  07A7                     u4125:	
  7623  07A7  1C03               	btfss	3,0
  7624  07A8  2FB5               	goto	l2643
  7625                           
  7626                           ;doprnt.c: 1307: break;
  7627  07A9  3001               	movlw	1
  7628  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  7629  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  7630  07AC  00E0               	movwf	??_sprintf
  7631  07AD  0860               	movf	??_sprintf,w
  7632  07AE  1683               	bsf	3,5	;RP0=1, select bank1
  7633  07AF  1303               	bcf	3,6	;RP1=0, select bank1
  7634  07B0  07B8               	addwf	sprintf@c^(0+128),f
  7635  07B1  300A               	movlw	10
  7636  07B2  0638               	xorwf	sprintf@c^(0+128),w
  7637  07B3  1D03               	btfss	3,2
  7638  07B4  2F65               	goto	l2637
  7639  07B5                     l2643:	
  7640                           
  7641                           ;doprnt.c: 1339: if(c < prec)
  7642  07B5  0838               	movf	sprintf@c^(0+128),w
  7643  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  7644  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  7645  07B8  00E0               	movwf	??_sprintf
  7646  07B9  01E1               	clrf	??_sprintf+1
  7647  07BA  1BE0               	btfsc	??_sprintf,7
  7648  07BB  03E1               	decf	??_sprintf+1,f
  7649  07BC  0861               	movf	??_sprintf+1,w
  7650  07BD  3A80               	xorlw	128
  7651  07BE  00E2               	movwf	??_sprintf+2
  7652  07BF  1683               	bsf	3,5	;RP0=1, select bank1
  7653  07C0  1303               	bcf	3,6	;RP1=0, select bank1
  7654  07C1  0836               	movf	(sprintf@prec+1)^(0+128),w
  7655  07C2  3A80               	xorlw	128
  7656  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  7657  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  7658  07C5  0262               	subwf	??_sprintf+2,w
  7659  07C6  1D03               	skipz
  7660  07C7  2FCE               	goto	u4145
  7661  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  7662  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  7663  07CA  0835               	movf	sprintf@prec^(0+128),w
  7664  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  7665  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  7666  07CD  0260               	subwf	??_sprintf,w
  7667  07CE                     u4145:	
  7668  07CE  120A  158A  1803   	skipnc
  7669  07D1  2A3A               	goto	l2647
  7670                           
  7671                           ;doprnt.c: 1340: c = prec;
  7672  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  7673  07D3  1303               	bcf	3,6	;RP1=0, select bank1
  7674  07D4  0835               	movf	sprintf@prec^(0+128),w
  7675  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  7676  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  7677  07D7  00E0               	movwf	??_sprintf
  7678  07D8  0860               	movf	??_sprintf,w
  7679  07D9  1683               	bsf	3,5	;RP0=1, select bank1
  7680  07DA  1303               	bcf	3,6	;RP1=0, select bank1
  7681  07DB  00B8               	movwf	sprintf@c^(0+128)
  7682  07DC  120A  158A  2A5C   	goto	l192
  7683  07DF                     L15:	
  7684  07DF                     L14:	
  7685  07DF  120A  158A  2BC3   	ljmp	l2709
  7686                           
  7687                           	psect	text1_split_2
  7688  0A3A                     l2647:	
  7689                           
  7690                           ;doprnt.c: 1341: else if(prec < c)
  7691  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  7692  0A3B  1303               	bcf	3,6	;RP1=0, select bank1
  7693  0A3C  0838               	movf	sprintf@c^(0+128),w
  7694  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  7695  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  7696  0A3F  00E0               	movwf	??_sprintf
  7697  0A40  01E1               	clrf	??_sprintf+1
  7698  0A41  1BE0               	btfsc	??_sprintf,7
  7699  0A42  03E1               	decf	??_sprintf+1,f
  7700  0A43  1683               	bsf	3,5	;RP0=1, select bank1
  7701  0A44  1303               	bcf	3,6	;RP1=0, select bank1
  7702  0A45  0836               	movf	(sprintf@prec+1)^(0+128),w
  7703  0A46  3A80               	xorlw	128
  7704  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  7705  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  7706  0A49  00E2               	movwf	??_sprintf+2
  7707  0A4A  0861               	movf	??_sprintf+1,w
  7708  0A4B  3A80               	xorlw	128
  7709  0A4C  0262               	subwf	??_sprintf+2,w
  7710  0A4D  1D03               	skipz
  7711  0A4E  2A53               	goto	u4155
  7712  0A4F  0860               	movf	??_sprintf,w
  7713  0A50  1683               	bsf	3,5	;RP0=1, select bank1
  7714  0A51  1303               	bcf	3,6	;RP1=0, select bank1
  7715  0A52  0235               	subwf	sprintf@prec^(0+128),w
  7716  0A53                     u4155:	
  7717  0A53  1803               	skipnc
  7718  0A54  2A5C               	goto	l192
  7719                           
  7720                           ;doprnt.c: 1342: prec = c;
  7721  0A55  1683               	bsf	3,5	;RP0=1, select bank1
  7722  0A56  1303               	bcf	3,6	;RP1=0, select bank1
  7723  0A57  0838               	movf	sprintf@c^(0+128),w
  7724  0A58  00B5               	movwf	sprintf@prec^(0+128)
  7725  0A59  01B6               	clrf	(sprintf@prec+1)^(0+128)
  7726  0A5A  1BB5               	btfsc	sprintf@prec^(0+128),7
  7727  0A5B  03B6               	decf	(sprintf@prec+1)^(0+128),f
  7728  0A5C                     l192:	
  7729                           
  7730                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7731  0A5C  1683               	bsf	3,5	;RP0=1, select bank1
  7732  0A5D  1303               	bcf	3,6	;RP1=0, select bank1
  7733  0A5E  0830               	movf	sprintf@width^(0+128),w
  7734  0A5F  0431               	iorwf	(sprintf@width+1)^(0+128),w
  7735  0A60  1903               	btfsc	3,2
  7736  0A61  2A7A               	goto	l2655
  7737  0A62  3003               	movlw	3
  7738  0A63  052E               	andwf	sprintf@flag^(0+128),w
  7739  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  7740  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  7741  0A66  00E0               	movwf	??_sprintf
  7742  0A67  3000               	movlw	0
  7743  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  7744  0A69  1303               	bcf	3,6	;RP1=0, select bank1
  7745  0A6A  052F               	andwf	(sprintf@flag+1)^(0+128),w
  7746  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  7747  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  7748  0A6D  00E1               	movwf	??_sprintf+1
  7749  0A6E  0860               	movf	??_sprintf,w
  7750  0A6F  0461               	iorwf	??_sprintf+1,w
  7751  0A70  1903               	btfsc	3,2
  7752  0A71  2A7A               	goto	l2655
  7753                           
  7754                           ;doprnt.c: 1346: width--;
  7755  0A72  30FF               	movlw	255
  7756  0A73  1683               	bsf	3,5	;RP0=1, select bank1
  7757  0A74  1303               	bcf	3,6	;RP1=0, select bank1
  7758  0A75  07B0               	addwf	sprintf@width^(0+128),f
  7759  0A76  1803               	skipnc
  7760  0A77  0AB1               	incf	(sprintf@width+1)^(0+128),f
  7761  0A78  30FF               	movlw	255
  7762  0A79  07B1               	addwf	(sprintf@width+1)^(0+128),f
  7763  0A7A                     l2655:	
  7764                           
  7765                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7766  0A7A  1683               	bsf	3,5	;RP0=1, select bank1
  7767  0A7B  1303               	bcf	3,6	;RP1=0, select bank1
  7768  0A7C  1F2F               	btfss	(sprintf@flag+1)^(0+128),6
  7769  0A7D  2A9F               	goto	l2663
  7770                           
  7771                           ;doprnt.c: 1349: if(width > prec)
  7772  0A7E  0836               	movf	(sprintf@prec+1)^(0+128),w
  7773  0A7F  3A80               	xorlw	128
  7774  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  7775  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  7776  0A82  00E0               	movwf	??_sprintf
  7777  0A83  1683               	bsf	3,5	;RP0=1, select bank1
  7778  0A84  1303               	bcf	3,6	;RP1=0, select bank1
  7779  0A85  0831               	movf	(sprintf@width+1)^(0+128),w
  7780  0A86  3A80               	xorlw	128
  7781  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  7782  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  7783  0A89  0260               	subwf	??_sprintf,w
  7784  0A8A  1D03               	skipz
  7785  0A8B  2A90               	goto	u4195
  7786  0A8C  1683               	bsf	3,5	;RP0=1, select bank1
  7787  0A8D  1303               	bcf	3,6	;RP1=0, select bank1
  7788  0A8E  0830               	movf	sprintf@width^(0+128),w
  7789  0A8F  0235               	subwf	sprintf@prec^(0+128),w
  7790  0A90                     u4195:	
  7791  0A90  1803               	skipnc
  7792  0A91  2A9B               	goto	l2661
  7793                           
  7794                           ;doprnt.c: 1350: width -= prec;
  7795  0A92  1683               	bsf	3,5	;RP0=1, select bank1
  7796  0A93  1303               	bcf	3,6	;RP1=0, select bank1
  7797  0A94  0835               	movf	sprintf@prec^(0+128),w
  7798  0A95  02B0               	subwf	sprintf@width^(0+128),f
  7799  0A96  0836               	movf	(sprintf@prec+1)^(0+128),w
  7800  0A97  1C03               	skipc
  7801  0A98  03B1               	decf	(sprintf@width+1)^(0+128),f
  7802  0A99  02B1               	subwf	(sprintf@width+1)^(0+128),f
  7803  0A9A  2A9F               	goto	l2663
  7804  0A9B                     l2661:	
  7805                           
  7806                           ;doprnt.c: 1351: else
  7807                           ;doprnt.c: 1352: width = 0;
  7808  0A9B  1683               	bsf	3,5	;RP0=1, select bank1
  7809  0A9C  1303               	bcf	3,6	;RP1=0, select bank1
  7810  0A9D  01B0               	clrf	sprintf@width^(0+128)
  7811  0A9E  01B1               	clrf	(sprintf@width+1)^(0+128)
  7812  0A9F                     l2663:	
  7813                           
  7814                           ;doprnt.c: 1353: }
  7815                           ;doprnt.c: 1381: if(width > c)
  7816  0A9F  0838               	movf	sprintf@c^(0+128),w
  7817  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  7818  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  7819  0AA2  00E0               	movwf	??_sprintf
  7820  0AA3  01E1               	clrf	??_sprintf+1
  7821  0AA4  1BE0               	btfsc	??_sprintf,7
  7822  0AA5  03E1               	decf	??_sprintf+1,f
  7823  0AA6  0861               	movf	??_sprintf+1,w
  7824  0AA7  3A80               	xorlw	128
  7825  0AA8  00E2               	movwf	??_sprintf+2
  7826  0AA9  1683               	bsf	3,5	;RP0=1, select bank1
  7827  0AAA  1303               	bcf	3,6	;RP1=0, select bank1
  7828  0AAB  0831               	movf	(sprintf@width+1)^(0+128),w
  7829  0AAC  3A80               	xorlw	128
  7830  0AAD  1283               	bcf	3,5	;RP0=0, select bank0
  7831  0AAE  1303               	bcf	3,6	;RP1=0, select bank0
  7832  0AAF  0262               	subwf	??_sprintf+2,w
  7833  0AB0  1D03               	skipz
  7834  0AB1  2AB8               	goto	u4205
  7835  0AB2  1683               	bsf	3,5	;RP0=1, select bank1
  7836  0AB3  1303               	bcf	3,6	;RP1=0, select bank1
  7837  0AB4  0830               	movf	sprintf@width^(0+128),w
  7838  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  7839  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  7840  0AB7  0260               	subwf	??_sprintf,w
  7841  0AB8                     u4205:	
  7842  0AB8  1803               	skipnc
  7843  0AB9  2AD0               	goto	l2667
  7844                           
  7845                           ;doprnt.c: 1382: width -= c;
  7846  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  7847  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  7848  0ABC  0838               	movf	sprintf@c^(0+128),w
  7849  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  7850  0ABE  1303               	bcf	3,6	;RP1=0, select bank0
  7851  0ABF  00E0               	movwf	??_sprintf
  7852  0AC0  01E1               	clrf	??_sprintf+1
  7853  0AC1  1BE0               	btfsc	??_sprintf,7
  7854  0AC2  03E1               	decf	??_sprintf+1,f
  7855  0AC3  0860               	movf	??_sprintf,w
  7856  0AC4  1683               	bsf	3,5	;RP0=1, select bank1
  7857  0AC5  1303               	bcf	3,6	;RP1=0, select bank1
  7858  0AC6  02B0               	subwf	sprintf@width^(0+128),f
  7859  0AC7  1283               	bcf	3,5	;RP0=0, select bank0
  7860  0AC8  1303               	bcf	3,6	;RP1=0, select bank0
  7861  0AC9  0861               	movf	??_sprintf+1,w
  7862  0ACA  1683               	bsf	3,5	;RP0=1, select bank1
  7863  0ACB  1303               	bcf	3,6	;RP1=0, select bank1
  7864  0ACC  1C03               	skipc
  7865  0ACD  03B1               	decf	(sprintf@width+1)^(0+128),f
  7866  0ACE  02B1               	subwf	(sprintf@width+1)^(0+128),f
  7867  0ACF  2AD4               	goto	l2669
  7868  0AD0                     l2667:	
  7869                           
  7870                           ;doprnt.c: 1383: else
  7871                           ;doprnt.c: 1384: width = 0;
  7872  0AD0  1683               	bsf	3,5	;RP0=1, select bank1
  7873  0AD1  1303               	bcf	3,6	;RP1=0, select bank1
  7874  0AD2  01B0               	clrf	sprintf@width^(0+128)
  7875  0AD3  01B1               	clrf	(sprintf@width+1)^(0+128)
  7876  0AD4                     l2669:	
  7877                           
  7878                           ;doprnt.c: 1387: if(flag & 0x04) {
  7879  0AD4  1D2E               	btfss	sprintf@flag^(0+128),2
  7880  0AD5  2B17               	goto	l2685
  7881                           
  7882                           ;doprnt.c: 1392: if(flag & 0x03)
  7883  0AD6  3003               	movlw	3
  7884  0AD7  052E               	andwf	sprintf@flag^(0+128),w
  7885  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  7886  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  7887  0ADA  00E0               	movwf	??_sprintf
  7888  0ADB  3000               	movlw	0
  7889  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  7890  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  7891  0ADE  052F               	andwf	(sprintf@flag+1)^(0+128),w
  7892  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  7893  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  7894  0AE1  00E1               	movwf	??_sprintf+1
  7895  0AE2  0860               	movf	??_sprintf,w
  7896  0AE3  0461               	iorwf	??_sprintf+1,w
  7897  0AE4  1903               	btfsc	3,2
  7898  0AE5  2AF7               	goto	l2677
  7899                           
  7900                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  7901  0AE6  302D               	movlw	45
  7902  0AE7  00E0               	movwf	??_sprintf
  7903  0AE8  1683               	bsf	3,5	;RP0=1, select bank1
  7904  0AE9  1303               	bcf	3,6	;RP1=0, select bank1
  7905  0AEA  0837               	movf	sprintf@sp^(0+128),w
  7906  0AEB  0084               	movwf	4
  7907  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  7908  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  7909  0AEE  0860               	movf	??_sprintf,w
  7910  0AEF  1383               	bcf	3,7	;select IRP bank0
  7911  0AF0  0080               	movwf	0
  7912  0AF1  3001               	movlw	1
  7913  0AF2  00E0               	movwf	??_sprintf
  7914  0AF3  0860               	movf	??_sprintf,w
  7915  0AF4  1683               	bsf	3,5	;RP0=1, select bank1
  7916  0AF5  1303               	bcf	3,6	;RP1=0, select bank1
  7917  0AF6  07B7               	addwf	sprintf@sp^(0+128),f
  7918  0AF7                     l2677:	
  7919                           
  7920                           ;doprnt.c: 1415: if(width)
  7921  0AF7  1683               	bsf	3,5	;RP0=1, select bank1
  7922  0AF8  1303               	bcf	3,6	;RP1=0, select bank1
  7923  0AF9                     L7:	
  7924  0AF9  0830               	movf	sprintf@width^(0+128),w
  7925  0AFA  0431               	iorwf	(sprintf@width+1)^(0+128),w
  7926  0AFB  1903               	btfsc	3,2
  7927  0AFC  2B59               	goto	l2705
  7928                           
  7929                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  7930                           
  7931                           ;doprnt.c: 1416: do
  7932  0AFD  3030               	movlw	48
  7933  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  7934  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  7935  0B00  00E0               	movwf	??_sprintf
  7936  0B01  1683               	bsf	3,5	;RP0=1, select bank1
  7937  0B02  1303               	bcf	3,6	;RP1=0, select bank1
  7938  0B03  0837               	movf	sprintf@sp^(0+128),w
  7939  0B04  0084               	movwf	4
  7940  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  7941  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  7942  0B07  0860               	movf	??_sprintf,w
  7943  0B08  1383               	bcf	3,7	;select IRP bank0
  7944  0B09  0080               	movwf	0
  7945  0B0A  3001               	movlw	1
  7946  0B0B  00E0               	movwf	??_sprintf
  7947  0B0C  0860               	movf	??_sprintf,w
  7948  0B0D  1683               	bsf	3,5	;RP0=1, select bank1
  7949  0B0E  1303               	bcf	3,6	;RP1=0, select bank1
  7950  0B0F  07B7               	addwf	sprintf@sp^(0+128),f
  7951                           
  7952                           ;doprnt.c: 1418: while(--width);
  7953  0B10  30FF               	movlw	255
  7954  0B11  07B0               	addwf	sprintf@width^(0+128),f
  7955  0B12  1803               	skipnc
  7956  0B13  0AB1               	incf	(sprintf@width+1)^(0+128),f
  7957  0B14  30FF               	movlw	255
  7958  0B15  07B1               	addwf	(sprintf@width+1)^(0+128),f
  7959  0B16  2AF9               	goto	L7
  7960  0B17                     l2685:	
  7961                           ;doprnt.c: 1420: } else
  7962                           
  7963                           
  7964                           ;doprnt.c: 1422: {
  7965                           ;doprnt.c: 1424: if(width
  7966                           ;doprnt.c: 1428: )
  7967  0B17  0830               	movf	sprintf@width^(0+128),w
  7968  0B18  0431               	iorwf	(sprintf@width+1)^(0+128),w
  7969  0B19  1903               	btfsc	3,2
  7970  0B1A  2B38               	goto	l2693
  7971  0B1B                     l2687:	
  7972                           ;doprnt.c: 1429: do
  7973                           
  7974                           
  7975                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7976  0B1B  3020               	movlw	32
  7977  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  7978  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  7979  0B1E  00E0               	movwf	??_sprintf
  7980  0B1F  1683               	bsf	3,5	;RP0=1, select bank1
  7981  0B20  1303               	bcf	3,6	;RP1=0, select bank1
  7982  0B21  0837               	movf	sprintf@sp^(0+128),w
  7983  0B22  0084               	movwf	4
  7984  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  7985  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  7986  0B25  0860               	movf	??_sprintf,w
  7987  0B26  1383               	bcf	3,7	;select IRP bank0
  7988  0B27  0080               	movwf	0
  7989  0B28  3001               	movlw	1
  7990  0B29  00E0               	movwf	??_sprintf
  7991  0B2A  0860               	movf	??_sprintf,w
  7992  0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  7993  0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  7994  0B2D  07B7               	addwf	sprintf@sp^(0+128),f
  7995                           
  7996                           ;doprnt.c: 1431: while(--width);
  7997  0B2E  30FF               	movlw	255
  7998  0B2F  07B0               	addwf	sprintf@width^(0+128),f
  7999  0B30  1803               	skipnc
  8000  0B31  0AB1               	incf	(sprintf@width+1)^(0+128),f
  8001  0B32  30FF               	movlw	255
  8002  0B33  07B1               	addwf	(sprintf@width+1)^(0+128),f
  8003  0B34  0830               	movf	sprintf@width^(0+128),w
  8004  0B35  0431               	iorwf	(sprintf@width+1)^(0+128),w
  8005  0B36  1D03               	btfss	3,2
  8006  0B37  2B1B               	goto	l2687
  8007  0B38                     l2693:	
  8008                           
  8009                           ;doprnt.c: 1438: if(flag & 0x03)
  8010  0B38  3003               	movlw	3
  8011  0B39  052E               	andwf	sprintf@flag^(0+128),w
  8012  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  8013  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  8014  0B3C  00E0               	movwf	??_sprintf
  8015  0B3D  3000               	movlw	0
  8016  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  8017  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  8018  0B40  052F               	andwf	(sprintf@flag+1)^(0+128),w
  8019  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  8020  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  8021  0B43  00E1               	movwf	??_sprintf+1
  8022  0B44  0860               	movf	??_sprintf,w
  8023  0B45  0461               	iorwf	??_sprintf+1,w
  8024  0B46  1903               	btfsc	3,2
  8025  0B47  2B59               	goto	l2705
  8026                           
  8027                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8028  0B48  302D               	movlw	45
  8029  0B49                     L8:	
  8030  0B49  00E0               	movwf	??_sprintf
  8031  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  8032  0B4B  1303               	bcf	3,6	;RP1=0, select bank1
  8033  0B4C  0837               	movf	sprintf@sp^(0+128),w
  8034  0B4D  0084               	movwf	4
  8035  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  8036  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  8037  0B50  0860               	movf	??_sprintf,w
  8038  0B51  1383               	bcf	3,7	;select IRP bank0
  8039  0B52  0080               	movwf	0
  8040  0B53  3001               	movlw	1
  8041  0B54  00E0               	movwf	??_sprintf
  8042  0B55  0860               	movf	??_sprintf,w
  8043  0B56  1683               	bsf	3,5	;RP0=1, select bank1
  8044  0B57  1303               	bcf	3,6	;RP1=0, select bank1
  8045  0B58  07B7               	addwf	sprintf@sp^(0+128),f
  8046  0B59                     l2705:	
  8047  0B59  30FF               	movlw	255
  8048  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  8049  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  8050  0B5C  07B5               	addwf	sprintf@prec^(0+128),f
  8051  0B5D  1803               	skipnc
  8052  0B5E  0AB6               	incf	(sprintf@prec+1)^(0+128),f
  8053  0B5F  30FF               	movlw	255
  8054  0B60  07B6               	addwf	(sprintf@prec+1)^(0+128),f
  8055  0B61  0A35               	incf	sprintf@prec^(0+128),w
  8056  0B62  1903               	btfsc	3,2
  8057  0B63  0A36               	incf	(sprintf@prec+1)^(0+128),w
  8058  0B64  1903               	btfsc	3,2
  8059  0B65  2BC8               	goto	L16
  8060                           
  8061                           ;doprnt.c: 1478: {
  8062                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8063                           
  8064                           ;doprnt.c: 1469: }
  8065                           ;doprnt.c: 1474: while(prec--) {
  8066  0B66  3000               	movlw	0
  8067  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  8068  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  8069  0B69  00A3               	movwf	___llmod@divisor+3
  8070  0B6A  3000               	movlw	0
  8071  0B6B  00A2               	movwf	___llmod@divisor+2
  8072  0B6C  3000               	movlw	0
  8073  0B6D  00A1               	movwf	___llmod@divisor+1
  8074  0B6E  300A               	movlw	10
  8075  0B6F  00A0               	movwf	___llmod@divisor
  8076  0B70  1683               	bsf	3,5	;RP0=1, select bank1
  8077  0B71  1303               	bcf	3,6	;RP1=0, select bank1
  8078  0B72  0835               	movf	sprintf@prec^(0+128),w
  8079  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  8080  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  8081  0B75  00E0               	movwf	??_sprintf
  8082  0B76  3001               	movlw	1
  8083  0B77                     u4285:	
  8084  0B77  1003               	clrc
  8085  0B78  0DE0               	rlf	??_sprintf,f
  8086  0B79  3EFF               	addlw	-1
  8087  0B7A  1D03               	skipz
  8088  0B7B  2B77               	goto	u4285
  8089  0B7C  1003               	clrc
  8090  0B7D  0D60               	rlf	??_sprintf,w
  8091  0B7E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  8092  0B7F  0084               	movwf	4
  8093  0B80  160A  118A  2000  120A  158A  	fcall	stringdir
  8094  0B85  00F0               	movwf	___lldiv@divisor
  8095  0B86  160A  118A  2000  120A  158A  	fcall	stringdir
  8096  0B8B  00F1               	movwf	___lldiv@divisor+1
  8097  0B8C  160A  118A  2000  120A  158A  	fcall	stringdir
  8098  0B91  00F2               	movwf	___lldiv@divisor+2
  8099  0B92  160A  118A  2000  120A  158A  	fcall	stringdir
  8100  0B97  00F3               	movwf	___lldiv@divisor+3
  8101  0B98  1683               	bsf	3,5	;RP0=1, select bank1
  8102  0B99  1303               	bcf	3,6	;RP1=0, select bank1
  8103  0B9A  082B               	movf	(sprintf@val+3)^(0+128),w
  8104  0B9B  00F7               	movwf	___lldiv@dividend+3
  8105  0B9C  082A               	movf	(sprintf@val+2)^(0+128),w
  8106  0B9D  00F6               	movwf	___lldiv@dividend+2
  8107  0B9E  0829               	movf	(sprintf@val+1)^(0+128),w
  8108  0B9F  00F5               	movwf	___lldiv@dividend+1
  8109  0BA0  0828               	movf	sprintf@val^(0+128),w
  8110  0BA1  00F4               	movwf	___lldiv@dividend
  8111  0BA2  160A  118A  23CE  120A  158A  	fcall	___lldiv
  8112  0BA7  0873               	movf	?___lldiv+3,w
  8113  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  8114  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  8115  0BAA  00A7               	movwf	___llmod@dividend+3
  8116  0BAB  0872               	movf	?___lldiv+2,w
  8117  0BAC  00A6               	movwf	___llmod@dividend+2
  8118  0BAD  0871               	movf	?___lldiv+1,w
  8119  0BAE  00A5               	movwf	___llmod@dividend+1
  8120  0BAF  0870               	movf	?___lldiv,w
  8121  0BB0  00A4               	movwf	___llmod@dividend
  8122  0BB1  160A  118A  226D  120A  158A  	fcall	___llmod
  8123  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  8124  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  8125  0BB8  0820               	movf	?___llmod,w
  8126  0BB9  3E30               	addlw	48
  8127  0BBA  00E1               	movwf	??_sprintf+1
  8128  0BBB  0861               	movf	??_sprintf+1,w
  8129  0BBC  1683               	bsf	3,5	;RP0=1, select bank1
  8130  0BBD  1303               	bcf	3,6	;RP1=0, select bank1
  8131  0BBE  00B8               	movwf	sprintf@c^(0+128)
  8132                           
  8133                           ;doprnt.c: 1523: }
  8134                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8135  0BBF  0838               	movf	sprintf@c^(0+128),w
  8136  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  8137  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  8138  0BC2  2B49               	goto	L8
  8139  0BC3                     l2709:	
  8140                           ;doprnt.c: 1525: }
  8141                           ;doprnt.c: 1533: }
  8142                           ;doprnt.c: 1535: alldone:
  8143                           
  8144                           
  8145                           ;doprnt.c: 1538: *sp = 0;
  8146  0BC3  0837               	movf	sprintf@sp^(0+128),w
  8147  0BC4  0084               	movwf	4
  8148  0BC5  1383               	bcf	3,7	;select IRP bank0
  8149  0BC6  0180               	clrf	0
  8150  0BC7  0008               	return
  8151  0BC8                     L16:	
  8152  0BC8                     __end_of_sprintf:	
  8153                           ;doprnt.c: 1540: return 0;
  8154                           ;	Return value of _sprintf is never used
  8155                           
  8156  0BC8  120A  118A  28DC   	ljmp	L13


Data Sizes:
    Strings     36
    Constant    118
    Data        32
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      74
    BANK1            80     64      80
    BANK3            96      0      16
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@line2(BANK1[16]), main@line1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> main@line2(BANK1[16]), main@line1(BANK1[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___bmul
    _fround->___bmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                43    43      0   35225
                                             70 BANK0      4     4      0
                                             25 BANK1     39    39      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             42    36      6   33882
                                             58 BANK0     12     6      6
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3    7091
                                             23 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              16    13      3    6893
                                             23 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3478
                                              7 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     560
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1382
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1790
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     583
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             32 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2893
                                             52 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2720
                                             39 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     560
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     322
                                              5 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     486
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      10       9       16.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     40      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4A      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B8      12        0.0%
ABS                  0      0      B8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Oct 09 20:16:51 2021

                        pc 0002             ___bmul@product 0025                __CFG_CP$OFF 0000  
                       l30 111B                         l31 111F                         l32 1120  
                       l33 1124                         l27 1113                         l28 1116  
                       l29 111A                         l74 00BE               ___awdiv@sign 0021  
                       fsr 0004        ___wmul@multiplicand 0072               ___ftadd@exp1 0053  
             ___ftadd@exp2 0052                __CFG_LVP$ON 0000               ___ftadd@sign 0051  
                      l132 00BF                        l117 172E                        l171 04AF  
                      l192 0A5C                        l507 1691                        l533 1558  
                      l543 15DD                        l464 0A2E                        l456 09E5  
                      l298 118A                        l483 1477                        l484 147F  
                      l476 1462                        l584 150C                        _RB6 0036  
                      _RC4 003C                        _RB7 0037                        _RC5 003D  
                      _RC6 003E                        _RC7 003F               __CFG_CPD$OFF 0000  
                      fsr0 0004                        indf 0000               ___awmod@sign 0076  
              _sprintf$562 00A0                       l2201 0A31                       l2121 1579  
                     l2107 1540                       l2141 15C5                       l2045 0D33  
                     l2037 0CA9                       l2061 0E29                       l2223 1398  
                     l2303 13DE                       l2207 1182                       l2071 0EB6  
                     l2313 1416                       l2305 13EE                       l2129 1599  
                     l2401 1729                       l2227 13BF                       l2251 1168  
                     l2147 15D2                       l2139 15B5                       l2067 0E97  
                     l2261 14B2                       l2317 1423                       l2333 12A5  
                     l2165 0948                       l2149 15E0                       l2085 0FE1  
                     l2413 1755                       l2421 1799                       l2327 1277  
                     l2191 0A06                       l2175 098F                       l2159 0929  
                     l2079 0F73                       l2503 02C5                       l2407 1737  
                     l2281 14F4                       l2329 1287                       l2337 12B2  
                     l2345 080E                       l2193 0A16                       l2097 000F  
                     l2513 0307                       l2441 00C1                       l2433 17B2  
                     l2409 1743                       l2347 0820                       l1803 1322  
                     l2523 037C                       l2443 00DF                       l2435 17F5  
                     l2365 11FD                       l2293 151D                       l1821 1343  
                     l2613 0716                       l2533 0402                       l2517 0376  
                     l2391 1143                       l1751 144C                       l1743 1434  
                     l1911 1657                       l2287 1501                       l2279 14E4  
                     l2199 0A23                       l1831 1364                       l2631 075F  
                     l2607 06FD                       l2551 043F                       l2615 071B  
                     l1913 1663                       l1905 1642                       l2289 150F  
                     l1809 132D                       l2705 0B59                       l2625 074F  
                     l2553 0466                       l2537 041A                       l2529 03CC  
                     l2449 00F7                       l1747 143B                       l1923 1681  
                     l1915 1668                       l1835 136C                       l1827 1359  
                     l1819 1335                       l1851 1233                       l2643 07B5  
                     l2491 0270                       l2483 020D                       l2475 01A0  
                     l2459 0136                       l2707 16FD                       l1757 1467  
                     l1749 1447                       l1933 16B5                       l1925 168D  
                     l1917 166C                       l1861 1247                       l2661 0A9B  
                     l2637 0765                       l2573 053D                       l2709 0BC3  
                     l1759 1471                       l1943 16D8                       l1847 122C  
                     l1783 10FD                       l2663 0A9F                       l2655 0A7A  
                     l2647 0A3A                       l2559 047F                       l2487 022A  
                     l1929 16A3                       l1873 1268                       l1865 1255  
                     l1953 084D                       l2593 05A3                       l2585 0570  
                     l1883 1612                       l1859 1239                       l1787 1103  
                     l1971 08A2                       l2667 0AD0                       l2579 0556  
                     l2499 02AE                       l1893 1628                       l1869 1260  
                     l2693 0B38                       l2677 0AF7                       l2685 0B17  
                     l2669 0AD4                       l1887 1619                       l1983 08CA  
                     l1975 08B2                       l1959 0863                       l2687 0B1B  
                     l1987 08DA                       STR_1 108E                       STR_2 107C  
                     u2215 145B                       u3105 15B6                       u2235 146A  
                     u3045 157B                       u2405 1344                       u4005 055F  
                     u3135 15D4                       u3055 158C                       u2415 1350  
                     u4015 056C                       u3321 138B                       u3225 0A07  
                     u3065 159A                       u2425 135A                       u2505 124D  
                     u3322 138C                       u3323 1391                       u2275 1486  
                     u2195 1440                       u2515 1256                       u4115 076A  
                     u4035 0617                       u3324 1392                       u3341 13B2  
                     u4205 0AB8                       u4125 07A7                       u4045 06A9  
                     u3342 13B3                       u4310 0028                       u3343 13B8  
                     u3255 0A25                       u3175 0991                       u3344 13B9  
                     u4320 003D                       u3425 14E5                       u3185 09C0  
                     u2385 1338                       u4145 07CE                       u2635 1643  
                     u3515 13F0                       u4155 0A53                       u2725 1682  
                     u3525 1405                       u3285 118B                       u2485 123C  
                     u2805 086F                       u3455 1503                       u3535 1417  
                     u3615 0813                       u3295 1192                       u2815 0881  
                     u4337 11C2                       u2665 1658                       u2905 08E3  
                     u4347 11D2                       u3395 14B9                       u4195 0A90  
                     u4357 12C5                       u3645 11E4                       u2925 11B2  
                     u3565 127B                       u2845 08B3                       u4285 0B77  
                     u4367 12D4                       u2695 166D                       u3495 13E2  
                     u2855 08BB                       u3815 0235                       u4377 12E2  
                     u3665 1209                       u3585 1295                       u3825 027B  
                     u4387 1137                       u3595 12A6                       u2895 08DB  
                     u3855 02AC                       u3775 0150                       u3955 044A  
                     u3965 048A                       u3885 0381                       u3895 03BE  
                     u3985 04BF               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 0011               ___ftpack@arg 0070               ___ftpack@exp 0073  
                     btemp 007E                       start 0000         ??_Lcd_Write_String 0075  
            __CFG_IESO$OFF 0000            __end_of_Lcd_Cmd 1140          ___bmul@multiplier 0026  
            __CFG_MCLRE$ON 0000               ___ftmul@cntr 0035               ___ftmul@sign 0036  
             ___fttol@exp1 004D               ___fttol@lval 0049                      ?_main 0070  
          __end_of___awdiv 1371            __end_of___ftadd 16F2              __CFG_WDTE$OFF 0000  
          __end_of___awmod 126D            __end_of___ftneg 080A                      _ANSEL 0188  
          __end_of___lldiv 142C            __end_of___ftmul 0908            ___awdiv@divisor 0077  
          __end_of___llmod 12BB            __end_of___ftsub 1180            __end_of___fttol 1526  
          ___awdiv@counter 0020    __size_of_Lcd_Set_Cursor 004A                      _TRISB 0086  
                    _TRISC 0087               main@duty_LCD 00D9               ___lltoft@exp 007D  
           __CFG_FCMEN$OFF 0000            __end_of_dpowers 102E                      _scale 0D65  
          __end_of_isdigit 0011              ___ftpack@sign 0074             __CFG_BOREN$OFF 0000  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __end_of_sprintf 0BC8           __end_of_Lcd_Init 1316           __end_of_Lcd_Port 1126  
          __initialization 07E2               __end_of_main 00BF                     ??_main 0066  
            ___fttol@sign1 0048         __size_of_Lcd_Clear 000B       __size_of__tdiv_to_l_ 00C3  
         ___llmod@dividend 0024                     ?_scale 0037           ___awdiv@dividend 0079  
         __end_of___ftpack 1498                     _ANSELH 0189           __end_of___lltoft 0835  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0037             __CFG_PWRTE$OFF 0000  
         __end_of__powers_ 1055                     ___bmul 10F9                     ___ftge 1371  
                   ___wmul 1180                  ??___awdiv 007B                  ??___ftadd 004D  
                ??___awmod 0074                  ??___ftneg 0073                  ??___lldiv 0078  
                ??___ftmul 002D                  ??___llmod 0028                  ??___ftsub 007E  
                ??___fttol 0044                     _fround 0BCB           ___awdiv@quotient 0022  
          ___awmod@divisor 0070            ___awmod@counter 0075      ___ftmul@f3_as_product 0032  
                ??_isdigit 0070                  ??_sprintf 0060            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC                 ___ftadd@f1 0047                 ___ftadd@f2 004A  
               ___ftge@ff1 0070                 ___ftge@ff2 0073          __end_of_Lcd_Clear 10C8  
               ___ftneg@f1 0070        ___bmul@multiplicand 0024                 ___ftmul@f1 0027  
               ___ftmul@f2 002A                 ___ftsub@f1 0057                 ___ftsub@f2 0054  
               ___fttol@f1 0040             __pcstackCOMMON 0070               __pidataBANK1 10D8  
             __pidataBANK3 10C8                 ___lltoft@c 0078              __end_of_scale 1000  
           _Lcd_Set_Cursor 11D8                 __div_to_l_ 0908                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070            __div_to_l_@exp1 0025            __div_to_l_@cntr 0024  
                  ??_scale 003A            __div_to_l_@quot 0020               sprintf@width 00B0  
            __div_to_l_@f1 0070              __div_to_l_@f2 0073                 __pmaintext 0011  
                  ?___bmul 0024                    ?___ftge 0070                    ?___wmul 0070  
                  ?_fround 0037  __size_of_Lcd_Write_String 001F                  ?___ftpack 0070  
   __end_of_Lcd_Set_Cursor 1222                  ?___lltoft 0078                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 1000             _Lcd_Write_Char 11A1  
                  _Lcd_Cmd 1126          __end_of__npowers_ 107C            __size_of___bmul 0013  
          __size_of___ftge 005D                    ___awdiv 1316                    ___ftadd 15E9  
                  ___awmod 1222                    ___ftneg 0802                    ___lldiv 13CE  
          __size_of___wmul 0021                    ___ftmul 0835                    ___llmod 126D  
                  ___ftsub 115F                    ___fttol 1498                 _fround$560 0040  
               _fround$559 0043                 ??___ftpack 0075            __size_of_fround 019A  
          ?_Lcd_Set_Cursor 0074                 ??___lltoft 007C                    __ptext1 16F2  
                  __ptext2 0D65                    __ptext3 0003                    __ptext4 0BCB  
                  __ptext5 0835                    __ptext6 10F9                    __ptext7 1222  
                  __ptext8 1316                    __ptext9 1526                ?__div_to_l_ 0070  
                  _dpowers 1006                    _isdigit 0003           ___awmod@dividend 0072  
                  _sprintf 16F2     __end_of_Lcd_Write_Char 11D8       end_of_initialization 07FC  
          ___lldiv@divisor 0070            ___lldiv@counter 007D                    psplit$0 D0028  
                  psplit$1 280029                  Lcd_Port@a 0070             __tdiv_to_l_@f1 0070  
           __tdiv_to_l_@f2 0073              ??__tdiv_to_l_ 0076            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0078          Lcd_Write_String@i 0076        __size_of__div_to_l_ 0132  
              ___ftmul@exp 0031                  _Lcd_Clear 10BD             __end_of___bmul 110C  
           __end_of___ftge 13CE             __end_of___wmul 11A1           _Lcd_Write_String 1140  
        pnum$text1_split_1 0028          pnum$text1_split_2 0029             __end_of_fround 0D65  
      start_initialization 07E2        __end_of__tdiv_to_l_ 15E9          __size_of_Lcd_Init 005B  
        __size_of_Lcd_Port 001A            ___llmod@divisor 0020            ___llmod@counter 0029  
 __CFG_FOSC$INTRC_NOCLKOUT 0000                 ?_Lcd_Clear 0070                   ??___bmul 007C  
                 ??___ftge 0076                   ??___wmul 0074                 init_fetch0 10E8  
              __pdataBANK1 00E0                __pdataBANK3 0190            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073                   ??_fround 003A              sprintf@tmpval 00A4  
               fround@prec 0046          __size_of___ftpack 006C          __size_of___lltoft 002B  
                ___latbits 0002              __pcstackBANK0 0020              __pcstackBANK1 00A0  
                 ?_Lcd_Cmd 0070                sprintf@flag 00AE                sprintf@fval 00B2  
              sprintf@prec 00B5           ??_Lcd_Set_Cursor 0075                   ?___awdiv 0077  
                 ?___ftadd 0047                   ?___awmod 0070                   ?___ftneg 0070  
                 ?___lldiv 0070                   ?___ftmul 0027                   ?___llmod 0020  
                 ?___ftsub 0054                  __npowers_ 1055                   ?___fttol 0040  
                __pstrings 1000                __tdiv_to_l_ 1526      main@current_direction 00DE  
             ??__div_to_l_ 0076                   ?_isdigit 0070                  _scale$561 003C  
                 ?_sprintf 005A             __size_of_scale 029B             ___wmul@product 0074  
                 Lcd_Cmd@a 0073         __end_of__div_to_l_ 0A3A                ??_Lcd_Clear 0074  
                main@F1682 00E0                  main@F1684 0190                __stringbase 1005  
        ___wmul@multiplier 0070                  main@line1 00B9                  main@line2 00C9  
         ??_Lcd_Write_Char 0071                   _Lcd_Init 12BB                   _Lcd_Port 110C  
 __end_of_Lcd_Write_String 115F           __size_of_Lcd_Cmd 001A           __size_of___awdiv 005B  
         __size_of___ftadd 0109           __size_of___awmod 004B           __size_of___ftneg 0008  
         __size_of___lldiv 005E           __size_of___ftmul 00D3           __size_of___llmod 004E  
         __size_of___ftsub 0021           __size_of___fttol 008E                   ___ftpack 142C  
       __end_of__stringtab 1006                   ___lltoft 080A                _isdigit$335 0070  
               sprintf@exp 00AC                 sprintf@val 00A8           __size_of_isdigit 000E  
                 __ptext10 0908                   __ptext11 1180                   __ptext20 1371  
                 __ptext12 080A                   __ptext21 1140                   __ptext13 126D  
                 __ptext22 11A1                   __ptext14 13CE                   __ptext23 11D8  
                 __ptext15 1498                   __ptext24 12BB                   __ptext16 115F  
                 __ptext25 10BD                   __ptext17 15E9                   __ptext26 1126  
                 __ptext18 142C                   __ptext27 110C                   __ptext19 0802  
        __CFG_BOR4V$BOR40V 0000                   __powers_ 102E           __size_of_sprintf F4D6  
            __size_of_main 00AE                  pnum$text1 000D                   main@freq 00DC  
                 init_ram0 10EC                   isdigit@c 0071                   scale@scl 003F  
       Lcd_Write_Char@temp 0072                  sprintf@ap 00A3           __tdiv_to_l_@exp1 0025  
         __tdiv_to_l_@cntr 0024                  sprintf@sp 00B7           __tdiv_to_l_@quot 0020  
         ___lldiv@dividend 0074                  stringcode 1000         Lcd_Set_Cursor@temp 007A  
             ?__tdiv_to_l_ 0070                   sprintf@c 00B8                   sprintf@f 005A  
         ___lldiv@quotient 0079                   stringdir 1000                   stringtab 1000  
