

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Oct 09 20:48:58 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text1_split_1,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F886 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0089                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  008F                     	;# 
   131  0090                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  0105                     	;# 
   150  0107                     	;# 
   151  0108                     	;# 
   152  0109                     	;# 
   153  010C                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  0185                     	;# 
   159  0187                     	;# 
   160  0188                     	;# 
   161  0189                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164                           
   165                           	psect	idataBANK1
   166  0003                     __pidataBANK1:	
   167                           
   168                           ;initializer for _init_pulse_width
   169  0003  34FA               	retlw	250
   170  0004  3400               	retlw	0
   171                           
   172                           	psect	idataBANK3
   173  10A5                     __pidataBANK3:	
   174                           
   175                           ;initializer for _PWM_freq
   176  10A5  3488               	retlw	136
   177  10A6  3413               	retlw	19
   178  10A7  3400               	retlw	0
   179  10A8  3400               	retlw	0
   180                           
   181                           	psect	strings
   182  1000                     __pstrings:	
   183  1000                     stringtab:	
   184  1000                     __stringtab:	
   185  1000                     stringcode:	
   186                           ;	String table - string pointers are 1 byte each
   187                           
   188  1000                     stringdir:	
   189  1000  3010               	movlw	high stringdir
   190  1001  008A               	movwf	10
   191  1002  0804               	movf	4,w
   192  1003  0A84               	incf	4,f
   193  1004  0782               	addwf	2,f
   194  1005                     __stringbase:	
   195  1005  3400               	retlw	0
   196  1006                     __end_of__stringtab:	
   197  1006                     _dpowers:	
   198  1006  3401               	retlw	1
   199  1007  3400               	retlw	0
   200  1008  3400               	retlw	0
   201  1009  3400               	retlw	0
   202  100A  340A               	retlw	10
   203  100B  3400               	retlw	0
   204  100C  3400               	retlw	0
   205  100D  3400               	retlw	0
   206  100E  3464               	retlw	100
   207  100F  3400               	retlw	0
   208  1010  3400               	retlw	0
   209  1011  3400               	retlw	0
   210  1012  34E8               	retlw	232
   211  1013  3403               	retlw	3
   212  1014  3400               	retlw	0
   213  1015  3400               	retlw	0
   214  1016  3410               	retlw	16
   215  1017  3427               	retlw	39
   216  1018  3400               	retlw	0
   217  1019  3400               	retlw	0
   218  101A  34A0               	retlw	160
   219  101B  3486               	retlw	134
   220  101C  3401               	retlw	1
   221  101D  3400               	retlw	0
   222  101E  3440               	retlw	64
   223  101F  3442               	retlw	66
   224  1020  340F               	retlw	15
   225  1021  3400               	retlw	0
   226  1022  3480               	retlw	128
   227  1023  3496               	retlw	150
   228  1024  3498               	retlw	152
   229  1025  3400               	retlw	0
   230  1026  3400               	retlw	0
   231  1027  34E1               	retlw	225
   232  1028  34F5               	retlw	245
   233  1029  3405               	retlw	5
   234  102A  3400               	retlw	0
   235  102B  34CA               	retlw	202
   236  102C  349A               	retlw	154
   237  102D  343B               	retlw	59
   238  102E                     __end_of_dpowers:	
   239  102E                     __powers_:	
   240  102E  3400               	retlw	0
   241  102F  3480               	retlw	128
   242  1030  343F               	retlw	63
   243  1031  3400               	retlw	0
   244  1032  3420               	retlw	32
   245  1033  3441               	retlw	65
   246  1034  3400               	retlw	0
   247  1035  34C8               	retlw	200
   248  1036  3442               	retlw	66
   249  1037  3400               	retlw	0
   250  1038  347A               	retlw	122
   251  1039  3444               	retlw	68
   252  103A  3440               	retlw	64
   253  103B  341C               	retlw	28
   254  103C  3446               	retlw	70
   255  103D  3450               	retlw	80
   256  103E  34C3               	retlw	195
   257  103F  3447               	retlw	71
   258  1040  3424               	retlw	36
   259  1041  3474               	retlw	116
   260  1042  3449               	retlw	73
   261  1043  3497               	retlw	151
   262  1044  3418               	retlw	24
   263  1045  344B               	retlw	75
   264  1046  34BC               	retlw	188
   265  1047  34BE               	retlw	190
   266  1048  344C               	retlw	76
   267  1049  346B               	retlw	107
   268  104A  346E               	retlw	110
   269  104B  344E               	retlw	78
   270  104C  3403               	retlw	3
   271  104D  3415               	retlw	21
   272  104E  3450               	retlw	80
   273  104F  3479               	retlw	121
   274  1050  34AD               	retlw	173
   275  1051  3460               	retlw	96
   276  1052  34F3               	retlw	243
   277  1053  3449               	retlw	73
   278  1054  3471               	retlw	113
   279  1055                     __end_of__powers_:	
   280  1055                     __npowers_:	
   281  1055  3400               	retlw	0
   282  1056  3480               	retlw	128
   283  1057  343F               	retlw	63
   284  1058  34CD               	retlw	205
   285  1059  34CC               	retlw	204
   286  105A  343D               	retlw	61
   287  105B  34D7               	retlw	215
   288  105C  3423               	retlw	35
   289  105D  343C               	retlw	60
   290  105E  3412               	retlw	18
   291  105F  3483               	retlw	131
   292  1060  343A               	retlw	58
   293  1061  34B7               	retlw	183
   294  1062  34D1               	retlw	209
   295  1063  3438               	retlw	56
   296  1064  34C6               	retlw	198
   297  1065  3427               	retlw	39
   298  1066  3437               	retlw	55
   299  1067  3438               	retlw	56
   300  1068  3486               	retlw	134
   301  1069  3435               	retlw	53
   302  106A  34C0               	retlw	192
   303  106B  34D6               	retlw	214
   304  106C  3433               	retlw	51
   305  106D  34CC               	retlw	204
   306  106E  342B               	retlw	43
   307  106F  3432               	retlw	50
   308  1070  3470               	retlw	112
   309  1071  3489               	retlw	137
   310  1072  3430               	retlw	48
   311  1073  34E7               	retlw	231
   312  1074  34DB               	retlw	219
   313  1075  342E               	retlw	46
   314  1076  34E5               	retlw	229
   315  1077  343C               	retlw	60
   316  1078  341E               	retlw	30
   317  1079  3442               	retlw	66
   318  107A  34A2               	retlw	162
   319  107B  340D               	retlw	13
   320  107C                     __end_of__npowers_:	
   321  001E                     _ADRESH	set	30
   322  001F                     _ADCON0	set	31
   323  0015                     _CCPR1L	set	21
   324  0012                     _T2CONbits	set	18
   325  0017                     _CCP1CONbits	set	23
   326  0007                     _PORTCbits	set	7
   327  0006                     _PORTBbits	set	6
   328  002A                     _RA2	set	42
   329  0029                     _RA1	set	41
   330  00F9                     _GO_nDONE	set	249
   331  003D                     _RC5	set	61
   332  003C                     _RC4	set	60
   333  0037                     _RB7	set	55
   334  0036                     _RB6	set	54
   335  003F                     _RC7	set	63
   336  003E                     _RC6	set	62
   337  0086                     _TRISBbits	set	134
   338  0087                     _TRISCbits	set	135
   339  009E                     _ADRESL	set	158
   340  009F                     _ADCON1	set	159
   341  0092                     _PR2	set	146
   342  0085                     _TRISAbits	set	133
   343  0087                     _TRISC	set	135
   344  0086                     _TRISB	set	134
   345  0432                     _TRISB2	set	1074
   346  043A                     _TRISC2	set	1082
   347  0188                     _ANSELbits	set	392
   348  0189                     _ANSELH	set	393
   349  0188                     _ANSEL	set	392
   350  107C                     STR_2:	
   351  107C  3464               	retlw	100	;'d'
   352  107D  3469               	retlw	105	;'i'
   353  107E  3472               	retlw	114	;'r'
   354  107F  343D               	retlw	61	;'='
   355  1080  3425               	retlw	37	;'%'
   356  1081  3464               	retlw	100	;'d'
   357  1082  3420               	retlw	32	;' '
   358  1083  3464               	retlw	100	;'d'
   359  1084  3475               	retlw	117	;'u'
   360  1085  3474               	retlw	116	;'t'
   361  1086  3479               	retlw	121	;'y'
   362  1087  343D               	retlw	61	;'='
   363  1088  3425               	retlw	37	;'%'
   364  1089  3430               	retlw	48	;'0'
   365  108A  342E               	retlw	46	;'.'
   366  108B  3433               	retlw	51	;'3'
   367  108C  3466               	retlw	102	;'f'
   368  108D  3400               	retlw	0
   369  108E                     STR_1:	
   370  108E  3449               	retlw	73	;'I'
   371  108F  346E               	retlw	110	;'n'
   372  1090  3476               	retlw	118	;'v'
   373  1091  3465               	retlw	101	;'e'
   374  1092  3472               	retlw	114	;'r'
   375  1093  3474               	retlw	116	;'t'
   376  1094  3465               	retlw	101	;'e'
   377  1095  3472               	retlw	114	;'r'
   378  1096  3420               	retlw	32	;' '
   379  1097  3466               	retlw	102	;'f'
   380  1098  3472               	retlw	114	;'r'
   381  1099  3465               	retlw	101	;'e'
   382  109A  3471               	retlw	113	;'q'
   383  109B  343D               	retlw	61	;'='
   384  109C  3425               	retlw	37	;'%'
   385  109D  3464               	retlw	100	;'d'
   386  109E  346B               	retlw	107	;'k'
   387  109F  3400               	retlw	0
   388  10A0                     STR_4:	
   389  10A0  3425               	retlw	37	;'%'
   390  10A1  3464               	retlw	100	;'d'
   391  10A2  3400               	retlw	0
   392  1088                     
   393                           ; #config settings
   394  0000                     
   395                           	psect	cinit
   396  07D2                     start_initialization:	
   397  07D2                     __initialization:	
   398                           
   399                           ; Initialize objects allocated to BANK3
   400  07D2  1683               	bsf	3,5	;RP0=1, select bank3
   401  07D3  1703               	bsf	3,6	;RP1=1, select bank3
   402  07D4  160A  118A  20A5  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   403  07D9  0090               	movwf	__pdataBANK3& (0+127)
   404  07DA  160A  118A  20A6  120A  118A  	fcall	__pidataBANK3+1	;fetch initializer
   405  07DF  0091               	movwf	(__pdataBANK3+1)& (0+127)
   406  07E0  160A  118A  20A7  120A  118A  	fcall	__pidataBANK3+2	;fetch initializer
   407  07E5  0092               	movwf	(__pdataBANK3+2)& (0+127)
   408  07E6  160A  118A  20A8  120A  118A  	fcall	__pidataBANK3+3	;fetch initializer
   409  07EB  0093               	movwf	(__pdataBANK3+3)& (0+127)
   410                           
   411                           ; Initialize objects allocated to BANK1
   412  07EC  1683               	bsf	3,5	;RP0=1, select bank1
   413  07ED  1303               	bcf	3,6	;RP1=0, select bank1
   414  07EE  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   415  07F3  00EE               	movwf	__pdataBANK1& (0+127)
   416  07F4  120A  118A  2004   	fcall	__pidataBANK1+1	;fetch initializer
   417  07F7  00EF               	movwf	(__pdataBANK1+1)& (0+127)
   418                           
   419                           ; Clear objects allocated to BANK1
   420  07F8  01EA               	clrf	__pbssBANK1& (0+127)
   421  07F9  01EB               	clrf	(__pbssBANK1+1)& (0+127)
   422  07FA  01EC               	clrf	(__pbssBANK1+2)& (0+127)
   423  07FB  01ED               	clrf	(__pbssBANK1+3)& (0+127)
   424  07FC                     end_of_initialization:	
   425                           ;End of C runtime variable initialization code
   426                           
   427  07FC                     __end_of__initialization:	
   428  07FC  0183               	clrf	3
   429  07FD  120A  158A  2B68   	ljmp	_main	;jump to C main() function
   430                           
   431                           	psect	bssBANK1
   432  00EA                     __pbssBANK1:	
   433  00EA                     _duty_LCD:	
   434  00EA                     	ds	3
   435  00ED                     _current_direction:	
   436  00ED                     	ds	1
   437                           
   438                           	psect	dataBANK1
   439  00EE                     __pdataBANK1:	
   440  00EE                     _init_pulse_width:	
   441  00EE                     	ds	2
   442                           
   443                           	psect	dataBANK3
   444  0190                     __pdataBANK3:	
   445  0190                     _PWM_freq:	
   446  0190                     	ds	4
   447                           
   448                           	psect	cstackBANK1
   449  00A0                     __pcstackBANK1:	
   450  00A0                     ??_sprintf:	
   451                           
   452                           ; 1 bytes @ 0x0
   453  00A0                     	ds	6
   454  00A6                     _sprintf$851:	
   455                           
   456                           ; 3 bytes @ 0x6
   457  00A6                     	ds	3
   458  00A9                     sprintf@ap:	
   459                           
   460                           ; 1 bytes @ 0x9
   461  00A9                     	ds	1
   462  00AA                     sprintf@tmpval:	
   463                           
   464                           ; 4 bytes @ 0xA
   465  00AA                     	ds	4
   466  00AE                     sprintf@val:	
   467                           
   468                           ; 4 bytes @ 0xE
   469  00AE                     	ds	4
   470  00B2                     sprintf@exp:	
   471                           
   472                           ; 2 bytes @ 0x12
   473  00B2                     	ds	2
   474  00B4                     sprintf@flag:	
   475                           
   476                           ; 2 bytes @ 0x14
   477  00B4                     	ds	2
   478  00B6                     sprintf@width:	
   479                           
   480                           ; 2 bytes @ 0x16
   481  00B6                     	ds	2
   482  00B8                     sprintf@fval:	
   483                           
   484                           ; 3 bytes @ 0x18
   485  00B8                     	ds	3
   486  00BB                     sprintf@prec:	
   487                           
   488                           ; 2 bytes @ 0x1B
   489  00BB                     	ds	2
   490  00BD                     sprintf@c:	
   491                           
   492                           ; 1 bytes @ 0x1D
   493  00BD                     	ds	1
   494  00BE                     main@line1:	
   495                           
   496                           ; 16 bytes @ 0x1E
   497  00BE                     	ds	16
   498  00CE                     main@line2:	
   499                           
   500                           ; 16 bytes @ 0x2E
   501  00CE                     	ds	16
   502  00DE                     main@freq:	
   503                           
   504                           ; 2 bytes @ 0x3E
   505  00DE                     	ds	2
   506  00E0                     main@duty_str:	
   507                           
   508                           ; 5 bytes @ 0x40
   509  00E0                     	ds	5
   510  00E5                     main@adc_value:	
   511                           
   512                           ; 2 bytes @ 0x45
   513  00E5                     	ds	2
   514  00E7                     main@dir_str:	
   515                           
   516                           ; 1 bytes @ 0x47
   517  00E7                     	ds	1
   518  00E8                     main@pulse_width:	
   519                           
   520                           ; 2 bytes @ 0x48
   521  00E8                     	ds	2
   522                           
   523                           	psect	cstackCOMMON
   524  0070                     __pcstackCOMMON:	
   525  0070                     ?_isdigit:	
   526  0070                     ?___ftge:	
   527                           ; 1 bit 
   528                           
   529  0070                     ?_ADC_Initialize:	
   530                           ; 1 bit 
   531                           
   532  0070                     ??_ADC_Initialize:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_set_H_bridge_pins:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ??_set_H_bridge_pins:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ??_isdigit:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_Lcd_Port:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ??_Lcd_Port:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_Lcd_Cmd:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_Lcd_Clear:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_Lcd_Init:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_Lcd_Write_Char:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_main:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_ADC_Read:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?___wmul:	
   569                           ; 2 bytes @ 0x0
   570                           
   571  0070                     ?___awmod:	
   572                           ; 2 bytes @ 0x0
   573                           
   574  0070                     ?___ftpack:	
   575                           ; 2 bytes @ 0x0
   576                           
   577  0070                     ?___ftneg:	
   578                           ; 3 bytes @ 0x0
   579                           
   580  0070                     ?__tdiv_to_l_:	
   581                           ; 3 bytes @ 0x0
   582                           
   583  0070                     ?__div_to_l_:	
   584                           ; 4 bytes @ 0x0
   585                           
   586  0070                     ?___aldiv:	
   587                           ; 4 bytes @ 0x0
   588                           
   589  0070                     ?___lldiv:	
   590                           ; 4 bytes @ 0x0
   591                           
   592  0070                     Lcd_Port@a:	
   593                           ; 4 bytes @ 0x0
   594                           
   595  0070                     _isdigit$624:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ___wmul@multiplier:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ___awmod@divisor:	
   602                           ; 2 bytes @ 0x0
   603                           
   604  0070                     __div_to_l_@f1:	
   605                           ; 2 bytes @ 0x0
   606                           
   607  0070                     ___ftpack@arg:	
   608                           ; 3 bytes @ 0x0
   609                           
   610  0070                     __tdiv_to_l_@f1:	
   611                           ; 3 bytes @ 0x0
   612                           
   613  0070                     ___ftge@ff1:	
   614                           ; 3 bytes @ 0x0
   615                           
   616  0070                     ___ftneg@f1:	
   617                           ; 3 bytes @ 0x0
   618                           
   619  0070                     ___aldiv@divisor:	
   620                           ; 3 bytes @ 0x0
   621                           
   622  0070                     ___lldiv@divisor:	
   623                           ; 4 bytes @ 0x0
   624                           
   625                           
   626                           ; 4 bytes @ 0x0
   627  0070                     	ds	1
   628  0071                     ??_Lcd_Cmd:	
   629  0071                     ??_Lcd_Write_Char:	
   630                           ; 1 bytes @ 0x1
   631                           
   632  0071                     isdigit@c:	
   633                           ; 1 bytes @ 0x1
   634                           
   635                           
   636                           ; 1 bytes @ 0x1
   637  0071                     	ds	1
   638  0072                     ??_ADC_Read:	
   639  0072                     Lcd_Write_Char@temp:	
   640                           ; 1 bytes @ 0x2
   641                           
   642  0072                     ___wmul@multiplicand:	
   643                           ; 1 bytes @ 0x2
   644                           
   645  0072                     ___awmod@dividend:	
   646                           ; 2 bytes @ 0x2
   647                           
   648                           
   649                           ; 2 bytes @ 0x2
   650  0072                     	ds	1
   651  0073                     ??___ftneg:	
   652  0073                     Lcd_Cmd@a:	
   653                           ; 1 bytes @ 0x3
   654                           
   655  0073                     Lcd_Write_Char@y:	
   656                           ; 1 bytes @ 0x3
   657                           
   658  0073                     ___ftpack@exp:	
   659                           ; 1 bytes @ 0x3
   660                           
   661  0073                     __div_to_l_@f2:	
   662                           ; 1 bytes @ 0x3
   663                           
   664  0073                     __tdiv_to_l_@f2:	
   665                           ; 3 bytes @ 0x3
   666                           
   667  0073                     ___ftge@ff2:	
   668                           ; 3 bytes @ 0x3
   669                           
   670                           
   671                           ; 3 bytes @ 0x3
   672  0073                     	ds	1
   673  0074                     ??_Lcd_Clear:	
   674  0074                     ?_Lcd_Set_Cursor:	
   675                           ; 1 bytes @ 0x4
   676                           
   677  0074                     ??_Lcd_Init:	
   678                           ; 1 bytes @ 0x4
   679                           
   680  0074                     ??___wmul:	
   681                           ; 1 bytes @ 0x4
   682                           
   683  0074                     ??___awmod:	
   684                           ; 1 bytes @ 0x4
   685                           
   686  0074                     Lcd_Set_Cursor@b:	
   687                           ; 1 bytes @ 0x4
   688                           
   689  0074                     Lcd_Write_Char@a:	
   690                           ; 1 bytes @ 0x4
   691                           
   692  0074                     ADC_Read@channel:	
   693                           ; 1 bytes @ 0x4
   694                           
   695  0074                     ___ftpack@sign:	
   696                           ; 1 bytes @ 0x4
   697                           
   698  0074                     ___wmul@product:	
   699                           ; 1 bytes @ 0x4
   700                           
   701  0074                     ___aldiv@dividend:	
   702                           ; 2 bytes @ 0x4
   703                           
   704  0074                     ___lldiv@dividend:	
   705                           ; 4 bytes @ 0x4
   706                           
   707                           
   708                           ; 4 bytes @ 0x4
   709  0074                     	ds	1
   710  0075                     ??___ftpack:	
   711  0075                     ??_Lcd_Set_Cursor:	
   712                           ; 1 bytes @ 0x5
   713                           
   714  0075                     ?_Lcd_Write_String:	
   715                           ; 1 bytes @ 0x5
   716                           
   717  0075                     ___awmod@counter:	
   718                           ; 1 bytes @ 0x5
   719                           
   720  0075                     Lcd_Write_String@a:	
   721                           ; 1 bytes @ 0x5
   722                           
   723                           
   724                           ; 2 bytes @ 0x5
   725  0075                     	ds	1
   726  0076                     ??__tdiv_to_l_:	
   727  0076                     ??__div_to_l_:	
   728                           ; 1 bytes @ 0x6
   729                           
   730  0076                     ??___ftge:	
   731                           ; 1 bytes @ 0x6
   732                           
   733  0076                     ___awmod@sign:	
   734                           ; 1 bytes @ 0x6
   735                           
   736                           
   737                           ; 1 bytes @ 0x6
   738  0076                     	ds	1
   739  0077                     ??_Lcd_Write_String:	
   740  0077                     ?___awdiv:	
   741                           ; 1 bytes @ 0x7
   742                           
   743  0077                     Lcd_Set_Cursor@a:	
   744                           ; 2 bytes @ 0x7
   745                           
   746  0077                     ___awdiv@divisor:	
   747                           ; 1 bytes @ 0x7
   748                           
   749                           
   750                           ; 2 bytes @ 0x7
   751  0077                     	ds	1
   752  0078                     ??___aldiv:	
   753  0078                     ??___lldiv:	
   754                           ; 1 bytes @ 0x8
   755                           
   756  0078                     ?___lltoft:	
   757                           ; 1 bytes @ 0x8
   758                           
   759  0078                     ?___lwtoft:	
   760                           ; 3 bytes @ 0x8
   761                           
   762  0078                     Lcd_Set_Cursor@z:	
   763                           ; 3 bytes @ 0x8
   764                           
   765  0078                     ___lwtoft@c:	
   766                           ; 1 bytes @ 0x8
   767                           
   768  0078                     ___lltoft@c:	
   769                           ; 2 bytes @ 0x8
   770                           
   771                           
   772                           ; 4 bytes @ 0x8
   773  0078                     	ds	1
   774  0079                     ??___altoft:	
   775  0079                     Lcd_Set_Cursor@y:	
   776                           ; 1 bytes @ 0x9
   777                           
   778  0079                     Lcd_Write_String@i:	
   779                           ; 1 bytes @ 0x9
   780                           
   781  0079                     ___awdiv@dividend:	
   782                           ; 2 bytes @ 0x9
   783                           
   784  0079                     ___lldiv@quotient:	
   785                           ; 2 bytes @ 0x9
   786                           
   787                           
   788                           ; 4 bytes @ 0x9
   789  0079                     	ds	1
   790  007A                     Lcd_Set_Cursor@temp:	
   791                           
   792                           ; 1 bytes @ 0xA
   793  007A                     	ds	1
   794  007B                     ??___awdiv:	
   795  007B                     ??___lwtoft:	
   796                           ; 1 bytes @ 0xB
   797                           
   798  007B                     ___altoft@exp:	
   799                           ; 1 bytes @ 0xB
   800                           
   801                           
   802                           ; 1 bytes @ 0xB
   803  007B                     	ds	1
   804  007C                     ??___bmul:	
   805  007C                     ??___lltoft:	
   806                           ; 1 bytes @ 0xC
   807                           
   808  007C                     ___altoft@sign:	
   809                           ; 1 bytes @ 0xC
   810                           
   811                           
   812                           ; 1 bytes @ 0xC
   813  007C                     	ds	1
   814  007D                     ___lldiv@counter:	
   815  007D                     ___lltoft@exp:	
   816                           ; 1 bytes @ 0xD
   817                           
   818                           
   819                           ; 1 bytes @ 0xD
   820  007D                     	ds	1
   821  007E                     ??___ftsub:	
   822                           
   823                           	psect	cstackBANK0
   824  0020                     __pcstackBANK0:	
   825                           ; 1 bytes @ 0xE
   826                           
   827  0020                     ?___ftdiv:	
   828  0020                     ?___llmod:	
   829                           ; 3 bytes @ 0x0
   830                           
   831  0020                     ___aldiv@counter:	
   832                           ; 4 bytes @ 0x0
   833                           
   834  0020                     ___awdiv@counter:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0020                     ___ftdiv@f2:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0020                     __div_to_l_@quot:	
   841                           ; 3 bytes @ 0x0
   842                           
   843  0020                     __tdiv_to_l_@quot:	
   844                           ; 4 bytes @ 0x0
   845                           
   846  0020                     ___llmod@divisor:	
   847                           ; 4 bytes @ 0x0
   848                           
   849                           
   850                           ; 4 bytes @ 0x0
   851  0020                     	ds	1
   852  0021                     ___aldiv@sign:	
   853  0021                     ___awdiv@sign:	
   854                           ; 1 bytes @ 0x1
   855                           
   856                           
   857                           ; 1 bytes @ 0x1
   858  0021                     	ds	1
   859  0022                     ___awdiv@quotient:	
   860  0022                     ___aldiv@quotient:	
   861                           ; 2 bytes @ 0x2
   862                           
   863                           
   864                           ; 4 bytes @ 0x2
   865  0022                     	ds	1
   866  0023                     ___ftdiv@f1:	
   867                           
   868                           ; 3 bytes @ 0x3
   869  0023                     	ds	1
   870  0024                     ?___bmul:	
   871  0024                     ___bmul@multiplicand:	
   872                           ; 1 bytes @ 0x4
   873                           
   874  0024                     __div_to_l_@cntr:	
   875                           ; 1 bytes @ 0x4
   876                           
   877  0024                     __tdiv_to_l_@cntr:	
   878                           ; 1 bytes @ 0x4
   879                           
   880  0024                     ___llmod@dividend:	
   881                           ; 1 bytes @ 0x4
   882                           
   883                           
   884                           ; 4 bytes @ 0x4
   885  0024                     	ds	1
   886  0025                     ___bmul@product:	
   887  0025                     __div_to_l_@exp1:	
   888                           ; 1 bytes @ 0x5
   889                           
   890  0025                     __tdiv_to_l_@exp1:	
   891                           ; 1 bytes @ 0x5
   892                           
   893                           
   894                           ; 1 bytes @ 0x5
   895  0025                     	ds	1
   896  0026                     ??___ftdiv:	
   897  0026                     ?___altoft:	
   898                           ; 1 bytes @ 0x6
   899                           
   900  0026                     ___bmul@multiplier:	
   901                           ; 3 bytes @ 0x6
   902                           
   903  0026                     ___altoft@c:	
   904                           ; 1 bytes @ 0x6
   905                           
   906                           
   907                           ; 4 bytes @ 0x6
   908  0026                     	ds	2
   909  0028                     ??___llmod:	
   910                           
   911                           ; 1 bytes @ 0x8
   912  0028                     	ds	1
   913  0029                     ___llmod@counter:	
   914                           
   915                           ; 1 bytes @ 0x9
   916  0029                     	ds	1
   917  002A                     ___ftdiv@cntr:	
   918                           
   919                           ; 1 bytes @ 0xA
   920  002A                     	ds	1
   921  002B                     ___ftdiv@f3:	
   922                           
   923                           ; 3 bytes @ 0xB
   924  002B                     	ds	3
   925  002E                     ___ftdiv@exp:	
   926                           
   927                           ; 1 bytes @ 0xE
   928  002E                     	ds	1
   929  002F                     ___ftdiv@sign:	
   930                           
   931                           ; 1 bytes @ 0xF
   932  002F                     	ds	1
   933  0030                     ?___ftmul:	
   934  0030                     ___ftmul@f1:	
   935                           ; 3 bytes @ 0x10
   936                           
   937                           
   938                           ; 3 bytes @ 0x10
   939  0030                     	ds	3
   940  0033                     ___ftmul@f2:	
   941                           
   942                           ; 3 bytes @ 0x13
   943  0033                     	ds	3
   944  0036                     ??___ftmul:	
   945                           
   946                           ; 1 bytes @ 0x16
   947  0036                     	ds	4
   948  003A                     ___ftmul@exp:	
   949                           
   950                           ; 1 bytes @ 0x1A
   951  003A                     	ds	1
   952  003B                     ___ftmul@f3_as_product:	
   953                           
   954                           ; 3 bytes @ 0x1B
   955  003B                     	ds	3
   956  003E                     ___ftmul@cntr:	
   957                           
   958                           ; 1 bytes @ 0x1E
   959  003E                     	ds	1
   960  003F                     ___ftmul@sign:	
   961                           
   962                           ; 1 bytes @ 0x1F
   963  003F                     	ds	1
   964  0040                     ?_fround:	
   965  0040                     ?_scale:	
   966                           ; 3 bytes @ 0x20
   967                           
   968                           
   969                           ; 3 bytes @ 0x20
   970  0040                     	ds	3
   971  0043                     ??_fround:	
   972  0043                     ??_scale:	
   973                           ; 1 bytes @ 0x23
   974                           
   975                           
   976                           ; 1 bytes @ 0x23
   977  0043                     	ds	2
   978  0045                     _scale$850:	
   979                           
   980                           ; 3 bytes @ 0x25
   981  0045                     	ds	3
   982  0048                     scale@scl:	
   983                           
   984                           ; 1 bytes @ 0x28
   985  0048                     	ds	1
   986  0049                     ?___fttol:	
   987  0049                     ___fttol@f1:	
   988                           ; 4 bytes @ 0x29
   989                           
   990  0049                     _fround$849:	
   991                           ; 3 bytes @ 0x29
   992                           
   993                           
   994                           ; 3 bytes @ 0x29
   995  0049                     	ds	3
   996  004C                     _fround$848:	
   997                           
   998                           ; 3 bytes @ 0x2C
   999  004C                     	ds	1
  1000  004D                     ??___fttol:	
  1001                           
  1002                           ; 1 bytes @ 0x2D
  1003  004D                     	ds	2
  1004  004F                     fround@prec:	
  1005                           
  1006                           ; 1 bytes @ 0x2F
  1007  004F                     	ds	1
  1008  0050                     ?___ftadd:	
  1009  0050                     ___ftadd@f1:	
  1010                           ; 3 bytes @ 0x30
  1011                           
  1012                           
  1013                           ; 3 bytes @ 0x30
  1014  0050                     	ds	1
  1015  0051                     ___fttol@sign1:	
  1016                           
  1017                           ; 1 bytes @ 0x31
  1018  0051                     	ds	1
  1019  0052                     ___fttol@lval:	
  1020                           
  1021                           ; 4 bytes @ 0x32
  1022  0052                     	ds	1
  1023  0053                     ___ftadd@f2:	
  1024                           
  1025                           ; 3 bytes @ 0x33
  1026  0053                     	ds	3
  1027  0056                     ??___ftadd:	
  1028  0056                     ___fttol@exp1:	
  1029                           ; 1 bytes @ 0x36
  1030                           
  1031                           
  1032                           ; 1 bytes @ 0x36
  1033  0056                     	ds	1
  1034  0057                     ?_set_PWM_duty_cycle:	
  1035  0057                     set_PWM_duty_cycle@duty:	
  1036                           ; 1 bytes @ 0x37
  1037                           
  1038                           
  1039                           ; 2 bytes @ 0x37
  1040  0057                     	ds	2
  1041  0059                     ??_set_PWM_duty_cycle:	
  1042                           
  1043                           ; 1 bytes @ 0x39
  1044  0059                     	ds	1
  1045  005A                     ___ftadd@sign:	
  1046                           
  1047                           ; 1 bytes @ 0x3A
  1048  005A                     	ds	1
  1049  005B                     ___ftadd@exp2:	
  1050                           
  1051                           ; 1 bytes @ 0x3B
  1052  005B                     	ds	1
  1053  005C                     ___ftadd@exp1:	
  1054                           
  1055                           ; 1 bytes @ 0x3C
  1056  005C                     	ds	1
  1057  005D                     ?_PWM_Initialize:	
  1058  005D                     ?___ftsub:	
  1059                           ; 1 bytes @ 0x3D
  1060                           
  1061  005D                     ___ftsub@f2:	
  1062                           ; 3 bytes @ 0x3D
  1063                           
  1064  005D                     PWM_Initialize@PWM_freq:	
  1065                           ; 3 bytes @ 0x3D
  1066                           
  1067                           
  1068                           ; 4 bytes @ 0x3D
  1069  005D                     	ds	3
  1070  0060                     ___ftsub@f1:	
  1071                           
  1072                           ; 3 bytes @ 0x40
  1073  0060                     	ds	1
  1074  0061                     PWM_Initialize@init_pulse_width:	
  1075                           
  1076                           ; 2 bytes @ 0x41
  1077  0061                     	ds	2
  1078  0063                     ??_PWM_Initialize:	
  1079  0063                     ?_sprintf:	
  1080                           ; 1 bytes @ 0x43
  1081                           
  1082  0063                     sprintf@sp:	
  1083                           ; 2 bytes @ 0x43
  1084                           
  1085                           
  1086                           ; 2 bytes @ 0x43
  1087  0063                     	ds	2
  1088  0065                     sprintf@f:	
  1089                           
  1090                           ; 1 bytes @ 0x45
  1091  0065                     	ds	6
  1092  006B                     ??_main:	
  1093                           
  1094                           ; 1 bytes @ 0x4B
  1095  006B                     	ds	5
  1096                           
  1097                           	psect	maintext
  1098  0B68                     __pmaintext:	
  1099 ;;
  1100 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1101 ;;
  1102 ;; *************** function _main *****************
  1103 ;; Defined at:
  1104 ;;		line 38 in file "main.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  dir_str         1   71[BANK1 ] unsigned char 
  1109 ;;  duty_str        5   64[BANK1 ] unsigned char [5]
  1110 ;;  line2          16   46[BANK1 ] unsigned char [16]
  1111 ;;  line1          16   30[BANK1 ] unsigned char [16]
  1112 ;;  pulse_width     2   72[BANK1 ] unsigned int 
  1113 ;;  adc_value       2   69[BANK1 ] unsigned int 
  1114 ;;  freq            2   62[BANK1 ] int 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : B00/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1124 ;;      Params:         0       0       0       0       0
  1125 ;;      Locals:         0       0      44       0       0
  1126 ;;      Temps:          0       5       0       0       0
  1127 ;;      Totals:         0       5      44       0       0
  1128 ;;Total ram usage:       49 bytes
  1129 ;; Hardware stack levels required when called:    4
  1130 ;; This function calls:
  1131 ;;		_ADC_Initialize
  1132 ;;		_ADC_Read
  1133 ;;		_Lcd_Clear
  1134 ;;		_Lcd_Init
  1135 ;;		_Lcd_Set_Cursor
  1136 ;;		_Lcd_Write_String
  1137 ;;		_PWM_Initialize
  1138 ;;		___aldiv
  1139 ;;		___ftdiv
  1140 ;;		___lwtoft
  1141 ;;		_set_H_bridge_pins
  1142 ;;		_set_PWM_duty_cycle
  1143 ;;		_sprintf
  1144 ;; This function is called by:
  1145 ;;		Startup code after reset
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           
  1150                           ;psect for function _main
  1151  0B68                     _main:	
  1152                           
  1153                           ;main.c: 40: uint16_t adc_value;
  1154                           ;main.c: 42: uint16_t pulse_width = init_pulse_width;
  1155                           
  1156                           ;incstack = 0
  1157                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1158  0B68  1683               	bsf	3,5	;RP0=1, select bank1
  1159  0B69  1303               	bcf	3,6	;RP1=0, select bank1
  1160  0B6A  086F               	movf	(_init_pulse_width+1)^(0+128),w
  1161  0B6B  00E9               	movwf	(main@pulse_width+1)^(0+128)
  1162  0B6C  086E               	movf	_init_pulse_width^(0+128),w
  1163  0B6D  00E8               	movwf	main@pulse_width^(0+128)
  1164                           
  1165                           ;main.c: 44: ANSEL = 0x00;
  1166  0B6E  1683               	bsf	3,5	;RP0=1, select bank3
  1167  0B6F  1703               	bsf	3,6	;RP1=1, select bank3
  1168  0B70  0188               	clrf	8	;volatile
  1169                           
  1170                           ;main.c: 45: ANSELH = 0x00;
  1171  0B71  0189               	clrf	9	;volatile
  1172                           
  1173                           ;main.c: 47: TRISB = 0x00;
  1174  0B72  1683               	bsf	3,5	;RP0=1, select bank1
  1175  0B73  1303               	bcf	3,6	;RP1=0, select bank1
  1176  0B74  0186               	clrf	6	;volatile
  1177                           
  1178                           ;main.c: 48: TRISC = 0x00;
  1179  0B75  0187               	clrf	7	;volatile
  1180                           
  1181                           ;main.c: 50: ADC_Initialize();
  1182  0B76  160A  158A  24AD  120A  158A  	fcall	_ADC_Initialize
  1183                           
  1184                           ;main.c: 51: PWM_Initialize(PWM_freq, init_pulse_width );
  1185  0B7B  1683               	bsf	3,5	;RP0=1, select bank3
  1186  0B7C  1703               	bsf	3,6	;RP1=1, select bank3
  1187  0B7D  0813               	movf	(_PWM_freq+3)^(0+384),w
  1188  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  1190  0B80  00E0               	movwf	PWM_Initialize@PWM_freq+3
  1191  0B81  1683               	bsf	3,5	;RP0=1, select bank3
  1192  0B82  1703               	bsf	3,6	;RP1=1, select bank3
  1193  0B83  0812               	movf	(_PWM_freq+2)^(0+384),w
  1194  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0B86  00DF               	movwf	PWM_Initialize@PWM_freq+2
  1197  0B87  1683               	bsf	3,5	;RP0=1, select bank3
  1198  0B88  1703               	bsf	3,6	;RP1=1, select bank3
  1199  0B89  0811               	movf	(_PWM_freq+1)^(0+384),w
  1200  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  1201  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  1202  0B8C  00DE               	movwf	PWM_Initialize@PWM_freq+1
  1203  0B8D  1683               	bsf	3,5	;RP0=1, select bank3
  1204  0B8E  1703               	bsf	3,6	;RP1=1, select bank3
  1205  0B8F  0810               	movf	_PWM_freq^(0+384),w
  1206  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0B92  00DD               	movwf	PWM_Initialize@PWM_freq
  1209  0B93  1683               	bsf	3,5	;RP0=1, select bank1
  1210  0B94  1303               	bcf	3,6	;RP1=0, select bank1
  1211  0B95  086F               	movf	(_init_pulse_width+1)^(0+128),w
  1212  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  1214  0B98  00E2               	movwf	PWM_Initialize@init_pulse_width+1
  1215  0B99  1683               	bsf	3,5	;RP0=1, select bank1
  1216  0B9A  1303               	bcf	3,6	;RP1=0, select bank1
  1217  0B9B  086E               	movf	_init_pulse_width^(0+128),w
  1218  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0B9E  00E1               	movwf	PWM_Initialize@init_pulse_width
  1221  0B9F  160A  158A  26F9  120A  158A  	fcall	_PWM_Initialize
  1222                           
  1223                           ;main.c: 53: Lcd_Init();
  1224  0BA4  160A  158A  274A  120A  158A  	fcall	_Lcd_Init
  1225                           
  1226                           ;main.c: 56: TRISAbits.TRISA1 = 0;
  1227  0BA9  1683               	bsf	3,5	;RP0=1, select bank1
  1228  0BAA  1303               	bcf	3,6	;RP1=0, select bank1
  1229  0BAB  1085               	bcf	5,1	;volatile
  1230                           
  1231                           ;main.c: 57: TRISAbits.TRISA2 = 0;
  1232  0BAC  1105               	bcf	5,2	;volatile
  1233                           
  1234                           ;main.c: 58: PORTBbits.RB0 = 0;
  1235  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0BAF  1006               	bcf	6,0	;volatile
  1238                           
  1239                           ;main.c: 59: PORTBbits.RB1 = 0;
  1240  0BB0  1086               	bcf	6,1	;volatile
  1241                           
  1242                           ;main.c: 61: current_direction = PORTCbits.RC0;
  1243  0BB1  3000               	movlw	0
  1244  0BB2  1807               	btfsc	7,0	;volatile
  1245  0BB3  3001               	movlw	1
  1246  0BB4  1683               	bsf	3,5	;RP0=1, select bank1
  1247  0BB5  1303               	bcf	3,6	;RP1=0, select bank1
  1248  0BB6  00ED               	movwf	_current_direction^(0+128)
  1249                           
  1250                           ;main.c: 62: set_H_bridge_pins();
  1251  0BB7  160A  158A  2538  120A  158A  	fcall	_set_H_bridge_pins
  1252                           
  1253                           ;main.c: 64: char line1[16];
  1254                           ;main.c: 65: char line2[16];
  1255                           ;main.c: 67: duty_LCD = (float)(pulse_width)/1023;
  1256  0BBC  30C0               	movlw	192
  1257  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0BBF  00A0               	movwf	___ftdiv@f2
  1260  0BC0  307F               	movlw	127
  1261  0BC1  00A1               	movwf	___ftdiv@f2+1
  1262  0BC2  3044               	movlw	68
  1263  0BC3  00A2               	movwf	___ftdiv@f2+2
  1264  0BC4  1683               	bsf	3,5	;RP0=1, select bank1
  1265  0BC5  1303               	bcf	3,6	;RP1=0, select bank1
  1266  0BC6  0869               	movf	(main@pulse_width+1)^(0+128),w
  1267  0BC7  00F9               	movwf	___lwtoft@c+1
  1268  0BC8  0868               	movf	main@pulse_width^(0+128),w
  1269  0BC9  00F8               	movwf	___lwtoft@c
  1270  0BCA  160A  158A  24CF  120A  158A  	fcall	___lwtoft
  1271  0BCF  0878               	movf	?___lwtoft,w
  1272  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  1273  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  1274  0BD2  00A3               	movwf	___ftdiv@f1
  1275  0BD3  0879               	movf	?___lwtoft+1,w
  1276  0BD4  00A4               	movwf	___ftdiv@f1+1
  1277  0BD5  087A               	movf	?___lwtoft+2,w
  1278  0BD6  00A5               	movwf	___ftdiv@f1+2
  1279  0BD7  160A  118A  2377  120A  158A  	fcall	___ftdiv
  1280  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  1281  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  1282  0BDE  0820               	movf	?___ftdiv,w
  1283  0BDF  1683               	bsf	3,5	;RP0=1, select bank1
  1284  0BE0  1303               	bcf	3,6	;RP1=0, select bank1
  1285  0BE1  00EA               	movwf	_duty_LCD^(0+128)
  1286  0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  1288  0BE4  0821               	movf	?___ftdiv+1,w
  1289  0BE5  1683               	bsf	3,5	;RP0=1, select bank1
  1290  0BE6  1303               	bcf	3,6	;RP1=0, select bank1
  1291  0BE7  00EB               	movwf	(_duty_LCD+1)^(0+128)
  1292  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  1293  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  1294  0BEA  0822               	movf	?___ftdiv+2,w
  1295  0BEB  1683               	bsf	3,5	;RP0=1, select bank1
  1296  0BEC  1303               	bcf	3,6	;RP1=0, select bank1
  1297  0BED  00EC               	movwf	(_duty_LCD+2)^(0+128)
  1298                           
  1299                           ;main.c: 68: int freq = PWM_freq / 1000;
  1300  0BEE  3000               	movlw	0
  1301  0BEF  00F3               	movwf	___aldiv@divisor+3
  1302  0BF0  3000               	movlw	0
  1303  0BF1  00F2               	movwf	___aldiv@divisor+2
  1304  0BF2  3003               	movlw	3
  1305  0BF3  00F1               	movwf	___aldiv@divisor+1
  1306  0BF4  30E8               	movlw	232
  1307  0BF5  00F0               	movwf	___aldiv@divisor
  1308  0BF6  1683               	bsf	3,5	;RP0=1, select bank3
  1309  0BF7  1703               	bsf	3,6	;RP1=1, select bank3
  1310  0BF8  0813               	movf	(_PWM_freq+3)^(0+384),w
  1311  0BF9  00F7               	movwf	___aldiv@dividend+3
  1312  0BFA  0812               	movf	(_PWM_freq+2)^(0+384),w
  1313  0BFB  00F6               	movwf	___aldiv@dividend+2
  1314  0BFC  0811               	movf	(_PWM_freq+1)^(0+384),w
  1315  0BFD  00F5               	movwf	___aldiv@dividend+1
  1316  0BFE  0810               	movf	_PWM_freq^(0+384),w
  1317  0BFF  00F4               	movwf	___aldiv@dividend
  1318  0C00  160A  118A  2242  120A  158A  	fcall	___aldiv
  1319  0C05  0871               	movf	?___aldiv+1,w
  1320  0C06  1683               	bsf	3,5	;RP0=1, select bank1
  1321  0C07  1303               	bcf	3,6	;RP1=0, select bank1
  1322  0C08  00DF               	movwf	(main@freq+1)^(0+128)
  1323  0C09  0870               	movf	?___aldiv,w
  1324  0C0A  00DE               	movwf	main@freq^(0+128)
  1325                           
  1326                           ;main.c: 70: sprintf(line1, "Inverter freq=%dk", freq);
  1327  0C0B  30BE               	movlw	(low (main@line1| 0))& (0+255)
  1328  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0C0E  00E3               	movwf	sprintf@sp
  1331  0C0F  3000               	movlw	0
  1332  0C10  00E4               	movwf	sprintf@sp+1
  1333  0C11  3089               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1334  0C12  00EB               	movwf	??_main
  1335  0C13  086B               	movf	??_main,w
  1336  0C14  00E5               	movwf	sprintf@f
  1337  0C15  1683               	bsf	3,5	;RP0=1, select bank1
  1338  0C16  1303               	bcf	3,6	;RP1=0, select bank1
  1339  0C17  085F               	movf	(main@freq+1)^(0+128),w
  1340  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0C1A  00E7               	movwf	?_sprintf+4
  1343  0C1B  1683               	bsf	3,5	;RP0=1, select bank1
  1344  0C1C  1303               	bcf	3,6	;RP1=0, select bank1
  1345  0C1D  085E               	movf	main@freq^(0+128),w
  1346  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0C20  00E6               	movwf	?_sprintf+3
  1349  0C21  120A  118A  2026  120A  158A  	fcall	_sprintf
  1350                           
  1351                           ;main.c: 71: sprintf(line2, "dir=%d duty=%0.3f", current_direction,duty_LCD);
  1352  0C26  30CE               	movlw	(low (main@line2| 0))& (0+255)
  1353  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0C29  00E3               	movwf	sprintf@sp
  1356  0C2A  3000               	movlw	0
  1357  0C2B  00E4               	movwf	sprintf@sp+1
  1358  0C2C  3077               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1359  0C2D  00EB               	movwf	??_main
  1360  0C2E  086B               	movf	??_main,w
  1361  0C2F  00E5               	movwf	sprintf@f
  1362  0C30  1683               	bsf	3,5	;RP0=1, select bank1
  1363  0C31  1303               	bcf	3,6	;RP1=0, select bank1
  1364  0C32  086D               	movf	_current_direction^(0+128),w
  1365  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  1366  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  1367  0C35  00EC               	movwf	??_main+1
  1368  0C36  01ED               	clrf	??_main+2
  1369  0C37  086C               	movf	??_main+1,w
  1370  0C38  00E6               	movwf	?_sprintf+3
  1371  0C39  086D               	movf	??_main+2,w
  1372  0C3A  00E7               	movwf	?_sprintf+4
  1373  0C3B  1683               	bsf	3,5	;RP0=1, select bank1
  1374  0C3C  1303               	bcf	3,6	;RP1=0, select bank1
  1375  0C3D  086A               	movf	_duty_LCD^(0+128),w
  1376  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0C40  00E8               	movwf	?_sprintf+5
  1379  0C41  1683               	bsf	3,5	;RP0=1, select bank1
  1380  0C42  1303               	bcf	3,6	;RP1=0, select bank1
  1381  0C43  086B               	movf	(_duty_LCD+1)^(0+128),w
  1382  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0C46  00E9               	movwf	?_sprintf+6
  1385  0C47  1683               	bsf	3,5	;RP0=1, select bank1
  1386  0C48  1303               	bcf	3,6	;RP1=0, select bank1
  1387  0C49  086C               	movf	(_duty_LCD+2)^(0+128),w
  1388  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  1389  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0C4C  00EA               	movwf	?_sprintf+7
  1391  0C4D  120A  118A  2026  120A  158A  	fcall	_sprintf
  1392                           
  1393                           ;main.c: 73: Lcd_Clear();
  1394  0C52  160A  158A  2494  120A  158A  	fcall	_Lcd_Clear
  1395                           
  1396                           ;main.c: 74: Lcd_Set_Cursor(1,1);
  1397  0C57  01F4               	clrf	Lcd_Set_Cursor@b
  1398  0C58  0AF4               	incf	Lcd_Set_Cursor@b,f
  1399  0C59  3001               	movlw	1
  1400  0C5A  160A  158A  2616  120A  158A  	fcall	_Lcd_Set_Cursor
  1401                           
  1402                           ;main.c: 75: Lcd_Write_String(line1);
  1403  0C5F  30BE               	movlw	(low (main@line1| 0))& (0+255)
  1404  0C60  00F5               	movwf	Lcd_Write_String@a
  1405  0C61  3000               	movlw	0
  1406  0C62  00F6               	movwf	Lcd_Write_String@a+1
  1407  0C63  160A  158A  25B3  120A  158A  	fcall	_Lcd_Write_String
  1408                           
  1409                           ;main.c: 76: Lcd_Set_Cursor(2,1);
  1410  0C68  01F4               	clrf	Lcd_Set_Cursor@b
  1411  0C69  0AF4               	incf	Lcd_Set_Cursor@b,f
  1412  0C6A  3002               	movlw	2
  1413  0C6B  160A  158A  2616  120A  158A  	fcall	_Lcd_Set_Cursor
  1414                           
  1415                           ;main.c: 77: Lcd_Write_String(line2);
  1416  0C70  30CE               	movlw	(low (main@line2| 0))& (0+255)
  1417  0C71  00F5               	movwf	Lcd_Write_String@a
  1418  0C72  3000               	movlw	0
  1419  0C73  00F6               	movwf	Lcd_Write_String@a+1
  1420  0C74  160A  158A  25B3  120A  158A  	fcall	_Lcd_Write_String
  1421  0C79                     l3202:	
  1422                           ;main.c: 80: while (1){
  1423                           
  1424                           
  1425                           ;main.c: 82: adc_value = ADC_Read(0);
  1426  0C79  3000               	movlw	0
  1427  0C7A  160A  158A  255F  120A  158A  	fcall	_ADC_Read
  1428  0C7F  0871               	movf	?_ADC_Read+1,w
  1429  0C80  1683               	bsf	3,5	;RP0=1, select bank1
  1430  0C81  1303               	bcf	3,6	;RP1=0, select bank1
  1431  0C82  00E6               	movwf	(main@adc_value+1)^(0+128)
  1432  0C83  0870               	movf	?_ADC_Read,w
  1433  0C84  00E5               	movwf	main@adc_value^(0+128)
  1434                           
  1435                           ;main.c: 84: if (adc_value != pulse_width){
  1436  0C85  0869               	movf	(main@pulse_width+1)^(0+128),w
  1437  0C86  0666               	xorwf	(main@adc_value+1)^(0+128),w
  1438  0C87  1D03               	skipz
  1439  0C88  2C8B               	goto	u4875
  1440  0C89  0868               	movf	main@pulse_width^(0+128),w
  1441  0C8A  0665               	xorwf	main@adc_value^(0+128),w
  1442  0C8B                     u4875:	
  1443  0C8B  1903               	skipnz
  1444  0C8C  2D08               	goto	l3218
  1445                           
  1446                           ;main.c: 85: pulse_width = adc_value;
  1447  0C8D  0866               	movf	(main@adc_value+1)^(0+128),w
  1448  0C8E  00E9               	movwf	(main@pulse_width+1)^(0+128)
  1449  0C8F  0865               	movf	main@adc_value^(0+128),w
  1450  0C90  00E8               	movwf	main@pulse_width^(0+128)
  1451                           
  1452                           ;main.c: 86: set_PWM_duty_cycle(pulse_width);
  1453  0C91  0869               	movf	(main@pulse_width+1)^(0+128),w
  1454  0C92  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0C93  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0C94  00D8               	movwf	set_PWM_duty_cycle@duty+1
  1457  0C95  1683               	bsf	3,5	;RP0=1, select bank1
  1458  0C96  1303               	bcf	3,6	;RP1=0, select bank1
  1459  0C97  0868               	movf	main@pulse_width^(0+128),w
  1460  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  1462  0C9A  00D7               	movwf	set_PWM_duty_cycle@duty
  1463  0C9B  160A  118A  22D1  120A  158A  	fcall	_set_PWM_duty_cycle
  1464                           
  1465                           ;main.c: 88: char duty_str[5];
  1466                           ;main.c: 89: duty_LCD = (float)(pulse_width)/1023;
  1467  0CA0  30C0               	movlw	192
  1468  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  1469  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  1470  0CA3  00A0               	movwf	___ftdiv@f2
  1471  0CA4  307F               	movlw	127
  1472  0CA5  00A1               	movwf	___ftdiv@f2+1
  1473  0CA6  3044               	movlw	68
  1474  0CA7  00A2               	movwf	___ftdiv@f2+2
  1475  0CA8  1683               	bsf	3,5	;RP0=1, select bank1
  1476  0CA9  1303               	bcf	3,6	;RP1=0, select bank1
  1477  0CAA  0869               	movf	(main@pulse_width+1)^(0+128),w
  1478  0CAB  00F9               	movwf	___lwtoft@c+1
  1479  0CAC  0868               	movf	main@pulse_width^(0+128),w
  1480  0CAD  00F8               	movwf	___lwtoft@c
  1481  0CAE  160A  158A  24CF  120A  158A  	fcall	___lwtoft
  1482  0CB3  0878               	movf	?___lwtoft,w
  1483  0CB4  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0CB5  1303               	bcf	3,6	;RP1=0, select bank0
  1485  0CB6  00A3               	movwf	___ftdiv@f1
  1486  0CB7  0879               	movf	?___lwtoft+1,w
  1487  0CB8  00A4               	movwf	___ftdiv@f1+1
  1488  0CB9  087A               	movf	?___lwtoft+2,w
  1489  0CBA  00A5               	movwf	___ftdiv@f1+2
  1490  0CBB  160A  118A  2377  120A  158A  	fcall	___ftdiv
  1491  0CC0  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0CC1  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0CC2  0820               	movf	?___ftdiv,w
  1494  0CC3  1683               	bsf	3,5	;RP0=1, select bank1
  1495  0CC4  1303               	bcf	3,6	;RP1=0, select bank1
  1496  0CC5  00EA               	movwf	_duty_LCD^(0+128)
  1497  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  1499  0CC8  0821               	movf	?___ftdiv+1,w
  1500  0CC9  1683               	bsf	3,5	;RP0=1, select bank1
  1501  0CCA  1303               	bcf	3,6	;RP1=0, select bank1
  1502  0CCB  00EB               	movwf	(_duty_LCD+1)^(0+128)
  1503  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  1505  0CCE  0822               	movf	?___ftdiv+2,w
  1506  0CCF  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0CD0  1303               	bcf	3,6	;RP1=0, select bank1
  1508  0CD1  00EC               	movwf	(_duty_LCD+2)^(0+128)
  1509                           
  1510                           ;main.c: 90: sprintf(duty_str, "%0.3f", duty_LCD);
  1511  0CD2  30E0               	movlw	(low (main@duty_str| 0))& (0+255)
  1512  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  1513  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  1514  0CD5  00E3               	movwf	sprintf@sp
  1515  0CD6  3000               	movlw	0
  1516  0CD7  00E4               	movwf	sprintf@sp+1
  1517  0CD8  3083               	movlw	(low (((STR_2+12)-__stringbase)| (0+32768)))& (0+255)
  1518  0CD9  00EB               	movwf	??_main
  1519  0CDA  086B               	movf	??_main,w
  1520  0CDB  00E5               	movwf	sprintf@f
  1521  0CDC  1683               	bsf	3,5	;RP0=1, select bank1
  1522  0CDD  1303               	bcf	3,6	;RP1=0, select bank1
  1523  0CDE  086A               	movf	_duty_LCD^(0+128),w
  1524  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  1525  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  1526  0CE1  00E6               	movwf	?_sprintf+3
  1527  0CE2  1683               	bsf	3,5	;RP0=1, select bank1
  1528  0CE3  1303               	bcf	3,6	;RP1=0, select bank1
  1529  0CE4  086B               	movf	(_duty_LCD+1)^(0+128),w
  1530  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0CE7  00E7               	movwf	?_sprintf+4
  1533  0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  1534  0CE9  1303               	bcf	3,6	;RP1=0, select bank1
  1535  0CEA  086C               	movf	(_duty_LCD+2)^(0+128),w
  1536  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  1537  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  1538  0CED  00E8               	movwf	?_sprintf+5
  1539  0CEE  120A  118A  2026  120A  158A  	fcall	_sprintf
  1540                           
  1541                           ;main.c: 91: Lcd_Set_Cursor(2,12);
  1542  0CF3  300C               	movlw	12
  1543  0CF4  1283               	bcf	3,5	;RP0=0, select bank0
  1544  0CF5  1303               	bcf	3,6	;RP1=0, select bank0
  1545  0CF6  00EB               	movwf	??_main
  1546  0CF7  086B               	movf	??_main,w
  1547  0CF8  00F4               	movwf	Lcd_Set_Cursor@b
  1548  0CF9  3002               	movlw	2
  1549  0CFA  160A  158A  2616  120A  158A  	fcall	_Lcd_Set_Cursor
  1550                           
  1551                           ;main.c: 92: Lcd_Write_String(duty_str);
  1552  0CFF  30E0               	movlw	(low (main@duty_str| 0))& (0+255)
  1553  0D00  00F5               	movwf	Lcd_Write_String@a
  1554  0D01  3000               	movlw	0
  1555  0D02  00F6               	movwf	Lcd_Write_String@a+1
  1556  0D03  160A  158A  25B3  120A  158A  	fcall	_Lcd_Write_String
  1557  0D08                     l3218:	
  1558                           
  1559                           ;main.c: 93: }
  1560                           ;main.c: 95: if (PORTCbits.RC0 != current_direction){
  1561  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  1563  0D0A  0807               	movf	7,w	;volatile
  1564  0D0B  3901               	andlw	1
  1565  0D0C  1683               	bsf	3,5	;RP0=1, select bank1
  1566  0D0D  1303               	bcf	3,6	;RP1=0, select bank1
  1567  0D0E  066D               	xorwf	_current_direction^(0+128),w
  1568  0D0F  1903               	skipnz
  1569  0D10  2D59               	goto	l3230
  1570                           
  1571                           ;main.c: 96: current_direction = PORTCbits.RC0;
  1572  0D11  3000               	movlw	0
  1573  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  1575  0D14  1807               	btfsc	7,0	;volatile
  1576  0D15  3001               	movlw	1
  1577  0D16  1683               	bsf	3,5	;RP0=1, select bank1
  1578  0D17  1303               	bcf	3,6	;RP1=0, select bank1
  1579  0D18  00ED               	movwf	_current_direction^(0+128)
  1580                           
  1581                           ;main.c: 97: set_H_bridge_pins();
  1582  0D19  160A  158A  2538  120A  158A  	fcall	_set_H_bridge_pins
  1583                           
  1584                           ;main.c: 99: char dir_str;
  1585                           ;main.c: 100: sprintf(dir_str, "%d", current_direction);
  1586  0D1E  1683               	bsf	3,5	;RP0=1, select bank1
  1587  0D1F  1303               	bcf	3,6	;RP1=0, select bank1
  1588  0D20  0867               	movf	main@dir_str^(0+128),w
  1589  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  1591  0D23  00EB               	movwf	??_main
  1592  0D24  01EC               	clrf	??_main+1
  1593  0D25  086B               	movf	??_main,w
  1594  0D26  00E3               	movwf	sprintf@sp
  1595  0D27  086C               	movf	??_main+1,w
  1596  0D28  00E4               	movwf	sprintf@sp+1
  1597  0D29  309B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1598  0D2A  00ED               	movwf	??_main+2
  1599  0D2B  086D               	movf	??_main+2,w
  1600  0D2C  00E5               	movwf	sprintf@f
  1601  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
  1602  0D2E  1303               	bcf	3,6	;RP1=0, select bank1
  1603  0D2F  086D               	movf	_current_direction^(0+128),w
  1604  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  1605  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  1606  0D32  00EE               	movwf	??_main+3
  1607  0D33  01EF               	clrf	??_main+4
  1608  0D34  086E               	movf	??_main+3,w
  1609  0D35  00E6               	movwf	?_sprintf+3
  1610  0D36  086F               	movf	??_main+4,w
  1611  0D37  00E7               	movwf	?_sprintf+4
  1612  0D38  120A  118A  2026  120A  158A  	fcall	_sprintf
  1613                           
  1614                           ;main.c: 101: Lcd_Set_Cursor(2,5);
  1615  0D3D  3005               	movlw	5
  1616  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0D40  00EB               	movwf	??_main
  1619  0D41  086B               	movf	??_main,w
  1620  0D42  00F4               	movwf	Lcd_Set_Cursor@b
  1621  0D43  3002               	movlw	2
  1622  0D44  160A  158A  2616  120A  158A  	fcall	_Lcd_Set_Cursor
  1623                           
  1624                           ;main.c: 102: Lcd_Write_String(dir_str);
  1625  0D49  1683               	bsf	3,5	;RP0=1, select bank1
  1626  0D4A  1303               	bcf	3,6	;RP1=0, select bank1
  1627  0D4B  0867               	movf	main@dir_str^(0+128),w
  1628  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0D4E  00EB               	movwf	??_main
  1631  0D4F  01EC               	clrf	??_main+1
  1632  0D50  086B               	movf	??_main,w
  1633  0D51  00F5               	movwf	Lcd_Write_String@a
  1634  0D52  086C               	movf	??_main+1,w
  1635  0D53  00F6               	movwf	Lcd_Write_String@a+1
  1636  0D54  160A  158A  25B3  120A  158A  	fcall	_Lcd_Write_String
  1637  0D59                     l3230:	
  1638                           
  1639                           ;main.c: 103: }
  1640                           ;main.c: 106: _delay((unsigned long)((50)*(4000000/4000.0)));
  1641  0D59  3041               	movlw	65
  1642  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0D5C  00EC               	movwf	??_main+1
  1645  0D5D  30ED               	movlw	237
  1646  0D5E  00EB               	movwf	??_main
  1647  0D5F                     u4897:	
  1648  0D5F  0BEB               	decfsz	??_main,f
  1649  0D60  2D5F               	goto	u4897
  1650  0D61  0BEC               	decfsz	??_main+1,f
  1651  0D62  2D5F               	goto	u4897
  1652  0D63  2D64               	nop2
  1653  0D64  2C79               	goto	l3202
  1654  0D65                     __end_of_main:	
  1655                           
  1656                           	psect	text1
  1657  0026                     __ptext1:	
  1658 ;; *************** function _sprintf *****************
  1659 ;; Defined at:
  1660 ;;		line 492 in file "E:\software\pic\XC8\sources\common\doprnt.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  sp              2   67[BANK0 ] PTR unsigned char 
  1663 ;;		 -> RAM(512), main@duty_str(5), main@line2(16), main@line1(16), 
  1664 ;;  f               1   69[BANK0 ] PTR const unsigned char 
  1665 ;;		 -> STR_4(3), STR_3(6), STR_2(18), STR_1(18), 
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  val             4   14[BANK1 ] unsigned long 
  1668 ;;  tmpval          4   10[BANK1 ] struct .
  1669 ;;  fval            3   24[BANK1 ] struct .
  1670 ;;  prec            2   27[BANK1 ] int 
  1671 ;;  width           2   22[BANK1 ] int 
  1672 ;;  flag            2   20[BANK1 ] unsigned short 
  1673 ;;  exp             2   18[BANK1 ] int 
  1674 ;;  cp              2    0        PTR const unsigned char 
  1675 ;;  len             2    0        unsigned int 
  1676 ;;  c               1   29[BANK1 ] char 
  1677 ;;  ap              1    9[BANK1 ] PTR void [1]
  1678 ;;		 -> ?_sprintf(2), 
  1679 ;;  d               1    0        unsigned char 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  2   67[BANK0 ] int 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1689 ;;      Params:         0       8       0       0       0
  1690 ;;      Locals:         0       0      24       0       0
  1691 ;;      Temps:          0       0       6       0       0
  1692 ;;      Totals:         0       8      30       0       0
  1693 ;;Total ram usage:       38 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    3
  1696 ;; This function calls:
  1697 ;;		___awdiv
  1698 ;;		___ftadd
  1699 ;;		___ftge
  1700 ;;		___ftmul
  1701 ;;		___ftneg
  1702 ;;		___ftsub
  1703 ;;		___fttol
  1704 ;;		___lldiv
  1705 ;;		___llmod
  1706 ;;		___lltoft
  1707 ;;		___wmul
  1708 ;;		__div_to_l_
  1709 ;;		__tdiv_to_l_
  1710 ;;		_fround
  1711 ;;		_isdigit
  1712 ;;		_scale
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           
  1719                           ;psect for function _sprintf
  1720  0026                     _sprintf:	
  1721                           
  1722                           ;doprnt.c: 494: va_list ap;
  1723                           ;doprnt.c: 499: signed char c;
  1724                           ;doprnt.c: 501: int width;
  1725                           ;doprnt.c: 504: int prec;
  1726                           ;doprnt.c: 508: unsigned short flag;
  1727                           ;doprnt.c: 515: char d;
  1728                           ;doprnt.c: 516: double fval;
  1729                           ;doprnt.c: 517: int exp;
  1730                           ;doprnt.c: 523: union {
  1731                           ;doprnt.c: 524: unsigned long vd;
  1732                           ;doprnt.c: 525: double integ;
  1733                           ;doprnt.c: 526: } tmpval;
  1734                           ;doprnt.c: 528: unsigned long val;
  1735                           ;doprnt.c: 529: unsigned len;
  1736                           ;doprnt.c: 530: const char * cp;
  1737                           ;doprnt.c: 533: *ap = __va_start();
  1738                           
  1739                           ;incstack = 0
  1740                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1741  0026  3066               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  1742  0027  1683               	bsf	3,5	;RP0=1, select bank1
  1743  0028  1303               	bcf	3,6	;RP1=0, select bank1
  1744  0029  00A0               	movwf	??_sprintf^(0+128)
  1745  002A  0820               	movf	??_sprintf^(0+128),w
  1746  002B  00A9               	movwf	sprintf@ap^(0+128)
  1747  002C                     l3136:	
  1748                           ;doprnt.c: 536: while(c = *f++) {
  1749                           
  1750  002C  3001               	movlw	1
  1751  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1752  002E  07E5               	addwf	sprintf@f,f
  1753  002F  30FF               	movlw	-1
  1754  0030  0765               	addwf	sprintf@f,w
  1755  0031  0084               	movwf	4
  1756  0032  160A  118A  2000  120A  118A  	fcall	stringdir
  1757  0037  1683               	bsf	3,5	;RP0=1, select bank1
  1758  0038  1303               	bcf	3,6	;RP1=0, select bank1
  1759  0039  00A0               	movwf	??_sprintf^(0+128)
  1760  003A  0820               	movf	??_sprintf^(0+128),w
  1761  003B  00BD               	movwf	sprintf@c^(0+128)
  1762  003C  083D               	movf	sprintf@c^(0+128),w
  1763  003D  1903               	btfsc	3,2
  1764  003E  2FCF               	goto	L11
  1765                           
  1766                           ;doprnt.c: 538: if(c != '%')
  1767  003F  3025               	movlw	37
  1768  0040  063D               	xorwf	sprintf@c^(0+128),w
  1769  0041  1903               	btfsc	3,2
  1770  0042  2859               	goto	l2826
  1771                           
  1772                           ;doprnt.c: 540: {
  1773                           ;doprnt.c: 541: ((*sp++ = (c)));
  1774  0043  083D               	movf	sprintf@c^(0+128),w
  1775  0044  00A0               	movwf	??_sprintf^(0+128)
  1776  0045  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0046  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0047  0863               	movf	sprintf@sp,w
  1779  0048  0084               	movwf	4
  1780  0049  1783               	bsf	3,7
  1781  004A  1C64               	btfss	sprintf@sp+1,0
  1782  004B  1383               	bcf	3,7
  1783  004C  1683               	bsf	3,5	;RP0=1, select bank1
  1784  004D  1303               	bcf	3,6	;RP1=0, select bank1
  1785  004E  0820               	movf	??_sprintf^(0+128),w
  1786  004F  0080               	movwf	0
  1787  0050  3001               	movlw	1
  1788  0051  1283               	bcf	3,5	;RP0=0, select bank0
  1789  0052  1303               	bcf	3,6	;RP1=0, select bank0
  1790  0053  07E3               	addwf	sprintf@sp,f
  1791  0054  1803               	skipnc
  1792  0055  0AE4               	incf	sprintf@sp+1,f
  1793  0056  3000               	movlw	0
  1794  0057  07E4               	addwf	sprintf@sp+1,f
  1795                           
  1796                           ;doprnt.c: 542: continue;
  1797  0058  282C               	goto	l3136
  1798  0059                     l2826:	
  1799                           
  1800                           ;doprnt.c: 543: }
  1801                           ;doprnt.c: 546: width = 0;
  1802  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1803  005A  1303               	bcf	3,6	;RP1=0, select bank1
  1804  005B  01B6               	clrf	sprintf@width^(0+128)
  1805  005C  01B7               	clrf	(sprintf@width+1)^(0+128)
  1806                           
  1807                           ;doprnt.c: 548: flag = 0;
  1808  005D  01B4               	clrf	sprintf@flag^(0+128)
  1809  005E  01B5               	clrf	(sprintf@flag+1)^(0+128)
  1810                           
  1811                           ;doprnt.c: 551: switch(*f) {
  1812                           
  1813                           ;doprnt.c: 550: for(;;) {
  1814  005F  2869               	goto	l2832
  1815  0060                     l192:	
  1816                           ;doprnt.c: 579: case '0':
  1817                           
  1818                           
  1819                           ;doprnt.c: 580: flag |= 0x04;
  1820  0060  1683               	bsf	3,5	;RP0=1, select bank1
  1821  0061  1303               	bcf	3,6	;RP1=0, select bank1
  1822  0062  1534               	bsf	sprintf@flag^(0+128),2
  1823                           
  1824                           ;doprnt.c: 581: f++;
  1825  0063  3001               	movlw	1
  1826  0064  00A0               	movwf	??_sprintf^(0+128)
  1827  0065  0820               	movf	??_sprintf^(0+128),w
  1828  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0068  07E5               	addwf	sprintf@f,f
  1831  0069                     l2832:	
  1832                           ;doprnt.c: 584: }
  1833                           
  1834                           ;doprnt.c: 582: continue;
  1835                           
  1836  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1837  006A  0865               	movf	sprintf@f,w
  1838  006B  0084               	movwf	4
  1839  006C  160A  118A  2000  120A  118A  	fcall	stringdir
  1840                           
  1841                           ; Switch size 1, requested type "space"
  1842                           ; Number of cases is 1, Range of values is 48 to 48
  1843                           ; switch strategies available:
  1844                           ; Name         Instructions Cycles
  1845                           ; simple_byte            4     3 (average)
  1846                           ; direct_byte           14    11 (fixed)
  1847                           ; jumptable            263     9 (fixed)
  1848                           ;	Chosen strategy is simple_byte
  1849  0071  3A30               	xorlw	48	; case 48
  1850  0072  1903               	skipnz
  1851  0073  2860               	goto	l192
  1852  0074  2875               	goto	l2834
  1853  0075                     l2834:	
  1854                           ;doprnt.c: 586: }
  1855                           
  1856                           ;doprnt.c: 585: break;
  1857                           
  1858                           
  1859                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1860  0075  0865               	movf	sprintf@f,w
  1861  0076  0084               	movwf	4
  1862  0077  160A  118A  2000  120A  118A  	fcall	stringdir
  1863  007C  160A  158A  249F  120A  118A  	fcall	_isdigit
  1864  0081  1C03               	btfss	3,0
  1865  0082  28C7               	goto	l2846
  1866                           
  1867                           ;doprnt.c: 598: width = 0;
  1868  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1869  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1870  0085  01B6               	clrf	sprintf@width^(0+128)
  1871  0086  01B7               	clrf	(sprintf@width+1)^(0+128)
  1872  0087                     l2838:	
  1873                           ;doprnt.c: 599: do {
  1874                           
  1875                           
  1876                           ;doprnt.c: 600: width *= 10;
  1877  0087  300A               	movlw	10
  1878  0088  00F0               	movwf	___wmul@multiplier
  1879  0089  3000               	movlw	0
  1880  008A  00F1               	movwf	___wmul@multiplier+1
  1881  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1882  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1883  008D  0837               	movf	(sprintf@width+1)^(0+128),w
  1884  008E  00F3               	movwf	___wmul@multiplicand+1
  1885  008F  0836               	movf	sprintf@width^(0+128),w
  1886  0090  00F2               	movwf	___wmul@multiplicand
  1887  0091  120A  118A  2005  120A  118A  	fcall	___wmul
  1888  0096  0871               	movf	?___wmul+1,w
  1889  0097  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0098  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0099  00B7               	movwf	(sprintf@width+1)^(0+128)
  1892  009A  0870               	movf	?___wmul,w
  1893  009B  00B6               	movwf	sprintf@width^(0+128)
  1894                           
  1895                           ;doprnt.c: 601: width += *f++ - '0';
  1896  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1897  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1898  009E  0865               	movf	sprintf@f,w
  1899  009F  0084               	movwf	4
  1900  00A0  160A  118A  2000  120A  118A  	fcall	stringdir
  1901  00A5  3ED0               	addlw	208
  1902  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1903  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  1904  00A8  00A0               	movwf	??_sprintf^(0+128)
  1905  00A9  30FF               	movlw	255
  1906  00AA  1803               	skipnc
  1907  00AB  3000               	movlw	0
  1908  00AC  00A1               	movwf	(??_sprintf^(0+128)+1)
  1909  00AD  0820               	movf	??_sprintf^(0+128),w
  1910  00AE  07B6               	addwf	sprintf@width^(0+128),f
  1911  00AF  1803               	skipnc
  1912  00B0  0AB7               	incf	(sprintf@width+1)^(0+128),f
  1913  00B1  0821               	movf	(??_sprintf+1)^(0+128),w
  1914  00B2  07B7               	addwf	(sprintf@width+1)^(0+128),f
  1915  00B3  3001               	movlw	1
  1916  00B4  00A0               	movwf	??_sprintf^(0+128)
  1917  00B5  0820               	movf	??_sprintf^(0+128),w
  1918  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1919  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1920  00B8  07E5               	addwf	sprintf@f,f
  1921                           
  1922                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1923  00B9  0865               	movf	sprintf@f,w
  1924  00BA  0084               	movwf	4
  1925  00BB  160A  118A  2000  120A  118A  	fcall	stringdir
  1926  00C0  160A  158A  249F  120A  118A  	fcall	_isdigit
  1927  00C5  1803               	btfsc	3,0
  1928  00C6  2887               	goto	l2838
  1929  00C7                     l2846:	
  1930                           
  1931                           ;doprnt.c: 608: }
  1932                           ;doprnt.c: 611: if(*f == '.') {
  1933  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1934  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1935  00C9  0865               	movf	sprintf@f,w
  1936  00CA  0084               	movwf	4
  1937  00CB  160A  118A  2000  120A  118A  	fcall	stringdir
  1938  00D0  3A2E               	xorlw	46
  1939  00D1  1D03               	skipz
  1940  00D2  291F               	goto	l2860
  1941                           
  1942                           ;doprnt.c: 612: flag |= 0x4000;
  1943  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1944  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  1945  00D5  1735               	bsf	(sprintf@flag^(0+128)+1),6
  1946                           
  1947                           ;doprnt.c: 613: f++;
  1948  00D6  3001               	movlw	1
  1949  00D7  00A0               	movwf	??_sprintf^(0+128)
  1950  00D8  0820               	movf	??_sprintf^(0+128),w
  1951  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1952  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1953  00DB  07E5               	addwf	sprintf@f,f
  1954                           
  1955                           ;doprnt.c: 620: {
  1956                           ;doprnt.c: 621: prec = 0;
  1957  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1958  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  1959  00DE  01BB               	clrf	sprintf@prec^(0+128)
  1960  00DF  01BC               	clrf	(sprintf@prec+1)^(0+128)
  1961  00E0                     l2858:	
  1962                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1963                           
  1964  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1965  00E1  0865               	movf	sprintf@f,w
  1966  00E2  0084               	movwf	4
  1967  00E3  160A  118A  2000  120A  118A  	fcall	stringdir
  1968  00E8  160A  158A  249F  120A  118A  	fcall	_isdigit
  1969  00ED  1C03               	btfss	3,0
  1970  00EE  2927               	goto	l2866
  1971                           
  1972                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1973  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1974  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1975  00F1  083C               	movf	(sprintf@prec+1)^(0+128),w
  1976  00F2  00F1               	movwf	___wmul@multiplier+1
  1977  00F3  083B               	movf	sprintf@prec^(0+128),w
  1978  00F4  00F0               	movwf	___wmul@multiplier
  1979  00F5  300A               	movlw	10
  1980  00F6  00F2               	movwf	___wmul@multiplicand
  1981  00F7  3000               	movlw	0
  1982  00F8  00F3               	movwf	___wmul@multiplicand+1
  1983  00F9  120A  118A  2005  120A  118A  	fcall	___wmul
  1984  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1985  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0100  0865               	movf	sprintf@f,w
  1987  0101  0084               	movwf	4
  1988  0102  160A  118A  2000  120A  118A  	fcall	stringdir
  1989  0107  0770               	addwf	?___wmul,w
  1990  0108  1683               	bsf	3,5	;RP0=1, select bank1
  1991  0109  1303               	bcf	3,6	;RP1=0, select bank1
  1992  010A  00A0               	movwf	??_sprintf^(0+128)
  1993  010B  3000               	movlw	0
  1994  010C  1803               	skipnc
  1995  010D  3001               	movlw	1
  1996  010E  0771               	addwf	?___wmul+1,w
  1997  010F  00A1               	movwf	(??_sprintf+1)^(0+128)
  1998  0110  0820               	movf	??_sprintf^(0+128),w
  1999  0111  3ED0               	addlw	208
  2000  0112  00BB               	movwf	sprintf@prec^(0+128)
  2001  0113  0821               	movf	(??_sprintf+1)^(0+128),w
  2002  0114  1803               	skipnc
  2003  0115  3E01               	addlw	1
  2004  0116  3EFF               	addlw	255
  2005  0117  00BC               	movwf	(sprintf@prec+1)^(0+128)
  2006  0118  3001               	movlw	1
  2007  0119  00A0               	movwf	??_sprintf^(0+128)
  2008  011A  0820               	movf	??_sprintf^(0+128),w
  2009  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2010  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2011  011D  07E5               	addwf	sprintf@f,f
  2012  011E  28E0               	goto	l2858
  2013  011F                     l2860:	
  2014                           ;doprnt.c: 624: }
  2015                           ;doprnt.c: 625: } else {
  2016                           
  2017                           
  2018                           ;doprnt.c: 626: prec = 0;
  2019  011F  1683               	bsf	3,5	;RP0=1, select bank1
  2020  0120  1303               	bcf	3,6	;RP1=0, select bank1
  2021  0121  01BB               	clrf	sprintf@prec^(0+128)
  2022  0122  01BC               	clrf	(sprintf@prec+1)^(0+128)
  2023                           
  2024                           ;doprnt.c: 628: flag |= 0x1000;
  2025  0123  1635               	bsf	(sprintf@flag^(0+128)+1),4
  2026                           
  2027                           ;doprnt.c: 630: }
  2028                           ;doprnt.c: 635: switch(c = *f++) {
  2029  0124  2927               	goto	l2866
  2030  0125                     l207:	
  2031                           ;doprnt.c: 662: case 'f':
  2032                           
  2033                           ;doprnt.c: 638: goto alldone;
  2034                           
  2035                           ;doprnt.c: 637: case 0:
  2036                           
  2037                           
  2038                           ;doprnt.c: 663: flag |= 0x400;
  2039  0125  1535               	bsf	(sprintf@flag^(0+128)+1),2
  2040                           
  2041                           ;doprnt.c: 698: case 'i':
  2042                           ;doprnt.c: 699: break;
  2043                           
  2044                           ;doprnt.c: 697: case 'd':
  2045                           
  2046                           ;doprnt.c: 664: break;
  2047  0126  2943               	goto	l2868
  2048  0127                     l2866:	
  2049                           ;doprnt.c: 822: }
  2050                           
  2051                           ;doprnt.c: 813: continue;
  2052                           
  2053                           ;doprnt.c: 802: default:
  2054                           
  2055  0127  3001               	movlw	1
  2056  0128  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0129  1303               	bcf	3,6	;RP1=0, select bank0
  2058  012A  07E5               	addwf	sprintf@f,f
  2059  012B  30FF               	movlw	-1
  2060  012C  0765               	addwf	sprintf@f,w
  2061  012D  0084               	movwf	4
  2062  012E  160A  118A  2000  120A  118A  	fcall	stringdir
  2063  0133  1683               	bsf	3,5	;RP0=1, select bank1
  2064  0134  1303               	bcf	3,6	;RP1=0, select bank1
  2065  0135  00BD               	movwf	sprintf@c^(0+128)
  2066                           
  2067                           ; Switch size 1, requested type "space"
  2068                           ; Number of cases is 4, Range of values is 0 to 105
  2069                           ; switch strategies available:
  2070                           ; Name         Instructions Cycles
  2071                           ; simple_byte           13     7 (average)
  2072                           ; jumptable            260     6 (fixed)
  2073                           ;	Chosen strategy is simple_byte
  2074  0136  3A00               	xorlw	0	; case 0
  2075  0137  1903               	skipnz
  2076  0138  2FCF               	goto	L11
  2077  0139  3A64               	xorlw	100	; case 100
  2078  013A  1903               	skipnz
  2079  013B  2943               	goto	l2868
  2080  013C  3A02               	xorlw	2	; case 102
  2081  013D  1903               	skipnz
  2082  013E  2925               	goto	l207
  2083  013F  3A0F               	xorlw	15	; case 105
  2084  0140  1903               	skipnz
  2085  0141  2943               	goto	l2868
  2086  0142  282C               	goto	l3136
  2087  0143                     l2868:	
  2088                           
  2089                           ;doprnt.c: 825: if(flag & (0x700)) {
  2090  0143  3000               	movlw	0
  2091  0144  0534               	andwf	sprintf@flag^(0+128),w
  2092  0145  00A0               	movwf	??_sprintf^(0+128)
  2093  0146  3007               	movlw	7
  2094  0147  0535               	andwf	(sprintf@flag+1)^(0+128),w
  2095  0148  00A1               	movwf	(??_sprintf+1)^(0+128)
  2096  0149  0820               	movf	??_sprintf^(0+128),w
  2097  014A  0421               	iorwf	(??_sprintf^(0+128)+1),w
  2098  014B  1903               	btfsc	3,2
  2099  014C  2F3B               	goto	l3044
  2100                           
  2101                           ;doprnt.c: 827: if(flag & 0x1000)
  2102  014D  1E35               	btfss	(sprintf@flag+1)^(0+128),4
  2103  014E  2953               	goto	l2874
  2104                           
  2105                           ;doprnt.c: 829: prec = 6;
  2106  014F  3006               	movlw	6
  2107  0150  00BB               	movwf	sprintf@prec^(0+128)
  2108  0151  3000               	movlw	0
  2109  0152  00BC               	movwf	(sprintf@prec^(0+128)+1)
  2110  0153                     l2874:	
  2111                           
  2112                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2113  0153  0829               	movf	sprintf@ap^(0+128),w
  2114  0154  0084               	movwf	4
  2115  0155  1383               	bcf	3,7	;select IRP bank0
  2116  0156  0800               	movf	0,w
  2117  0157  00B8               	movwf	sprintf@fval^(0+128)
  2118  0158  0A84               	incf	4,f
  2119  0159  0800               	movf	0,w
  2120  015A  00B9               	movwf	(sprintf@fval+1)^(0+128)
  2121  015B  0A84               	incf	4,f
  2122  015C  0800               	movf	0,w
  2123  015D  00BA               	movwf	(sprintf@fval+2)^(0+128)
  2124  015E  3003               	movlw	3
  2125  015F  00A0               	movwf	??_sprintf^(0+128)
  2126  0160  0820               	movf	??_sprintf^(0+128),w
  2127  0161  07A9               	addwf	sprintf@ap^(0+128),f
  2128                           
  2129                           ;doprnt.c: 831: if(fval < 0.0) {
  2130  0162  0838               	movf	sprintf@fval^(0+128),w
  2131  0163  00F0               	movwf	___ftge@ff1
  2132  0164  0839               	movf	(sprintf@fval+1)^(0+128),w
  2133  0165  00F1               	movwf	___ftge@ff1+1
  2134  0166  083A               	movf	(sprintf@fval+2)^(0+128),w
  2135  0167  00F2               	movwf	___ftge@ff1+2
  2136  0168  3000               	movlw	0
  2137  0169  00F3               	movwf	___ftge@ff2
  2138  016A  3000               	movlw	0
  2139  016B  00F4               	movwf	___ftge@ff2+1
  2140  016C  3000               	movlw	0
  2141  016D  00F5               	movwf	___ftge@ff2+2
  2142  016E  160A  118A  20EB  120A  118A  	fcall	___ftge
  2143  0173  1803               	btfsc	3,0
  2144  0174  298E               	goto	l2884
  2145                           
  2146                           ;doprnt.c: 832: fval = -fval;
  2147  0175  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0176  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0177  0838               	movf	sprintf@fval^(0+128),w
  2150  0178  00F0               	movwf	___ftneg@f1
  2151  0179  0839               	movf	(sprintf@fval+1)^(0+128),w
  2152  017A  00F1               	movwf	___ftneg@f1+1
  2153  017B  083A               	movf	(sprintf@fval+2)^(0+128),w
  2154  017C  00F2               	movwf	___ftneg@f1+2
  2155  017D  120A  158A  2002  120A  118A  	fcall	___ftneg
  2156  0182  0870               	movf	?___ftneg,w
  2157  0183  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0184  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0185  00B8               	movwf	sprintf@fval^(0+128)
  2160  0186  0871               	movf	?___ftneg+1,w
  2161  0187  00B9               	movwf	(sprintf@fval+1)^(0+128)
  2162  0188  0872               	movf	?___ftneg+2,w
  2163  0189  00BA               	movwf	(sprintf@fval+2)^(0+128)
  2164                           
  2165                           ;doprnt.c: 833: flag |= 0x03;
  2166  018A  3003               	movlw	3
  2167  018B  04B4               	iorwf	sprintf@flag^(0+128),f
  2168  018C  3000               	movlw	0
  2169  018D  04B5               	iorwf	(sprintf@flag+1)^(0+128),f
  2170  018E                     l2884:	
  2171                           
  2172                           ;doprnt.c: 834: }
  2173                           ;doprnt.c: 835: exp = 0;
  2174  018E  1683               	bsf	3,5	;RP0=1, select bank1
  2175  018F  1303               	bcf	3,6	;RP1=0, select bank1
  2176  0190  01B2               	clrf	sprintf@exp^(0+128)
  2177  0191  01B3               	clrf	(sprintf@exp+1)^(0+128)
  2178                           
  2179                           ;doprnt.c: 836: if( fval!=0) {
  2180  0192  083A               	movf	(sprintf@fval+2)^(0+128),w
  2181  0193  0439               	iorwf	(sprintf@fval+1)^(0+128),w
  2182  0194  0438               	iorwf	sprintf@fval^(0+128),w
  2183  0195  1903               	skipnz
  2184  0196  2A7A               	goto	l2912
  2185                           
  2186                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2187  0197  30B8               	movlw	low (sprintf@fval| 0)
  2188  0198  0084               	movwf	4
  2189  0199  1383               	bcf	3,7	;select IRP bank1
  2190  019A  0800               	movf	0,w
  2191  019B  00A0               	movwf	??_sprintf^(0+128)
  2192  019C  0A84               	incf	4,f
  2193  019D  0800               	movf	0,w
  2194  019E  00A1               	movwf	(??_sprintf^(0+128)+1)
  2195  019F  0A84               	incf	4,f
  2196  01A0  0800               	movf	0,w
  2197  01A1  00A2               	movwf	(??_sprintf^(0+128)+2)
  2198  01A2  0A84               	incf	4,f
  2199  01A3  0800               	movf	0,w
  2200  01A4  00A3               	movwf	(??_sprintf^(0+128)+3)
  2201  01A5  300F               	movlw	15
  2202  01A6                     u4315:	
  2203  01A6  1003               	clrc
  2204  01A7  0CA3               	rrf	(??_sprintf^(0+128)+3),f
  2205  01A8  0CA2               	rrf	(??_sprintf^(0+128)+2),f
  2206  01A9  0CA1               	rrf	(??_sprintf^(0+128)+1),f
  2207  01AA  0CA0               	rrf	??_sprintf^(0+128),f
  2208  01AB  3EFF               	addlw	-1
  2209  01AC  1D03               	skipz
  2210  01AD  29A6               	goto	u4315
  2211  01AE  30FF               	movlw	255
  2212  01AF  0520               	andwf	??_sprintf^(0+128),w
  2213  01B0  00A4               	movwf	(??_sprintf+4)^(0+128)
  2214  01B1  3000               	movlw	0
  2215  01B2  0521               	andwf	(??_sprintf+1)^(0+128),w
  2216  01B3  00A5               	movwf	(??_sprintf+5)^(0+128)
  2217  01B4  0824               	movf	(??_sprintf+4)^(0+128),w
  2218  01B5  3E82               	addlw	130
  2219  01B6  00B2               	movwf	sprintf@exp^(0+128)
  2220  01B7  0825               	movf	(??_sprintf+5)^(0+128),w
  2221  01B8  1803               	skipnc
  2222  01B9  3E01               	addlw	1
  2223  01BA  3EFF               	addlw	255
  2224  01BB  00B3               	movwf	(sprintf@exp+1)^(0+128)
  2225                           
  2226                           ;doprnt.c: 838: exp--;
  2227  01BC  30FF               	movlw	255
  2228  01BD  07B2               	addwf	sprintf@exp^(0+128),f
  2229  01BE  1803               	skipnc
  2230  01BF  0AB3               	incf	(sprintf@exp+1)^(0+128),f
  2231  01C0  30FF               	movlw	255
  2232  01C1  07B3               	addwf	(sprintf@exp+1)^(0+128),f
  2233                           
  2234                           ;doprnt.c: 839: exp *= 3;
  2235  01C2  3003               	movlw	3
  2236  01C3  00F0               	movwf	___wmul@multiplier
  2237  01C4  3000               	movlw	0
  2238  01C5  00F1               	movwf	___wmul@multiplier+1
  2239  01C6  0833               	movf	(sprintf@exp+1)^(0+128),w
  2240  01C7  00F3               	movwf	___wmul@multiplicand+1
  2241  01C8  0832               	movf	sprintf@exp^(0+128),w
  2242  01C9  00F2               	movwf	___wmul@multiplicand
  2243  01CA  120A  118A  2005  120A  118A  	fcall	___wmul
  2244  01CF  0871               	movf	?___wmul+1,w
  2245  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  2246  01D1  1303               	bcf	3,6	;RP1=0, select bank1
  2247  01D2  00B3               	movwf	(sprintf@exp+1)^(0+128)
  2248  01D3  0870               	movf	?___wmul,w
  2249  01D4  00B2               	movwf	sprintf@exp^(0+128)
  2250                           
  2251                           ;doprnt.c: 840: exp /= 10;
  2252  01D5  300A               	movlw	10
  2253  01D6  00F7               	movwf	___awdiv@divisor
  2254  01D7  3000               	movlw	0
  2255  01D8  00F8               	movwf	___awdiv@divisor+1
  2256  01D9  0833               	movf	(sprintf@exp+1)^(0+128),w
  2257  01DA  00FA               	movwf	___awdiv@dividend+1
  2258  01DB  0832               	movf	sprintf@exp^(0+128),w
  2259  01DC  00F9               	movwf	___awdiv@dividend
  2260  01DD  160A  158A  27A5  120A  118A  	fcall	___awdiv
  2261  01E2  0878               	movf	?___awdiv+1,w
  2262  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  2263  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  2264  01E5  00B3               	movwf	(sprintf@exp+1)^(0+128)
  2265  01E6  0877               	movf	?___awdiv,w
  2266  01E7  00B2               	movwf	sprintf@exp^(0+128)
  2267                           
  2268                           ;doprnt.c: 841: if(exp < 0)
  2269  01E8  1FB3               	btfss	(sprintf@exp+1)^(0+128),7
  2270  01E9  29F0               	goto	l2900
  2271                           
  2272                           ;doprnt.c: 842: exp--;
  2273  01EA  30FF               	movlw	255
  2274  01EB  07B2               	addwf	sprintf@exp^(0+128),f
  2275  01EC  1803               	skipnc
  2276  01ED  0AB3               	incf	(sprintf@exp+1)^(0+128),f
  2277  01EE  30FF               	movlw	255
  2278  01EF  07B3               	addwf	(sprintf@exp+1)^(0+128),f
  2279  01F0                     l2900:	
  2280                           
  2281                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2282  01F0  0332               	decf	sprintf@exp^(0+128),w
  2283  01F1  3AFF               	xorlw	255
  2284  01F2  120A  158A  2565  120A  118A  	fcall	_scale
  2285  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2286  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2287  01F9  0840               	movf	?_scale,w
  2288  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  2289  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  2290  01FC  00AA               	movwf	sprintf@tmpval^(0+128)
  2291  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2292  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2293  01FF  0841               	movf	?_scale+1,w
  2294  0200  1683               	bsf	3,5	;RP0=1, select bank1
  2295  0201  1303               	bcf	3,6	;RP1=0, select bank1
  2296  0202  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  2297  0203  1283               	bcf	3,5	;RP0=0, select bank0
  2298  0204  1303               	bcf	3,6	;RP1=0, select bank0
  2299  0205  0842               	movf	?_scale+2,w
  2300  0206  1683               	bsf	3,5	;RP0=1, select bank1
  2301  0207  1303               	bcf	3,6	;RP1=0, select bank1
  2302  0208  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  2303                           
  2304                           ;doprnt.c: 847: tmpval.integ *= fval;
  2305  0209  0838               	movf	sprintf@fval^(0+128),w
  2306  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2307  020B  1303               	bcf	3,6	;RP1=0, select bank0
  2308  020C  00B0               	movwf	___ftmul@f1
  2309  020D  1683               	bsf	3,5	;RP0=1, select bank1
  2310  020E  1303               	bcf	3,6	;RP1=0, select bank1
  2311  020F  0839               	movf	(sprintf@fval+1)^(0+128),w
  2312  0210  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0211  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0212  00B1               	movwf	___ftmul@f1+1
  2315  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2316  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2317  0215  083A               	movf	(sprintf@fval+2)^(0+128),w
  2318  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2319  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2320  0218  00B2               	movwf	___ftmul@f1+2
  2321  0219  1683               	bsf	3,5	;RP0=1, select bank1
  2322  021A  1303               	bcf	3,6	;RP1=0, select bank1
  2323  021B  082A               	movf	sprintf@tmpval^(0+128),w
  2324  021C  1283               	bcf	3,5	;RP0=0, select bank0
  2325  021D  1303               	bcf	3,6	;RP1=0, select bank0
  2326  021E  00B3               	movwf	___ftmul@f2
  2327  021F  1683               	bsf	3,5	;RP0=1, select bank1
  2328  0220  1303               	bcf	3,6	;RP1=0, select bank1
  2329  0221  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  2330  0222  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0223  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0224  00B4               	movwf	___ftmul@f2+1
  2333  0225  1683               	bsf	3,5	;RP0=1, select bank1
  2334  0226  1303               	bcf	3,6	;RP1=0, select bank1
  2335  0227  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  2336  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2338  022A  00B5               	movwf	___ftmul@f2+2
  2339  022B  160A  118A  24F2  120A  118A  	fcall	___ftmul
  2340  0230  1283               	bcf	3,5	;RP0=0, select bank0
  2341  0231  1303               	bcf	3,6	;RP1=0, select bank0
  2342  0232  0830               	movf	?___ftmul,w
  2343  0233  1683               	bsf	3,5	;RP0=1, select bank1
  2344  0234  1303               	bcf	3,6	;RP1=0, select bank1
  2345  0235  00AA               	movwf	sprintf@tmpval^(0+128)
  2346  0236  1283               	bcf	3,5	;RP0=0, select bank0
  2347  0237  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0238  0831               	movf	?___ftmul+1,w
  2349  0239  1683               	bsf	3,5	;RP0=1, select bank1
  2350  023A  1303               	bcf	3,6	;RP1=0, select bank1
  2351  023B  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  2352  023C  1283               	bcf	3,5	;RP0=0, select bank0
  2353  023D  1303               	bcf	3,6	;RP1=0, select bank0
  2354  023E  0832               	movf	?___ftmul+2,w
  2355  023F  1683               	bsf	3,5	;RP0=1, select bank1
  2356  0240  1303               	bcf	3,6	;RP1=0, select bank1
  2357  0241  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  2358                           
  2359                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2360  0242  082A               	movf	sprintf@tmpval^(0+128),w
  2361  0243  00F0               	movwf	___ftge@ff1
  2362  0244  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  2363  0245  00F1               	movwf	___ftge@ff1+1
  2364  0246  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  2365  0247  00F2               	movwf	___ftge@ff1+2
  2366  0248  3000               	movlw	0
  2367  0249  00F3               	movwf	___ftge@ff2
  2368  024A  3080               	movlw	128
  2369  024B  00F4               	movwf	___ftge@ff2+1
  2370  024C  303F               	movlw	63
  2371  024D  00F5               	movwf	___ftge@ff2+2
  2372  024E  160A  118A  20EB  120A  118A  	fcall	___ftge
  2373  0253  1803               	btfsc	3,0
  2374  0254  2A5D               	goto	l2908
  2375                           
  2376                           ;doprnt.c: 849: exp--;
  2377  0255  30FF               	movlw	255
  2378  0256  1683               	bsf	3,5	;RP0=1, select bank1
  2379  0257  1303               	bcf	3,6	;RP1=0, select bank1
  2380  0258  07B2               	addwf	sprintf@exp^(0+128),f
  2381  0259  1803               	skipnc
  2382  025A  0AB3               	incf	(sprintf@exp+1)^(0+128),f
  2383  025B  30FF               	movlw	255
  2384  025C  2A79               	goto	L2
  2385  025D                     l2908:	
  2386                           
  2387                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2388  025D  1683               	bsf	3,5	;RP0=1, select bank1
  2389  025E  1303               	bcf	3,6	;RP1=0, select bank1
  2390  025F  082A               	movf	sprintf@tmpval^(0+128),w
  2391  0260  00F0               	movwf	___ftge@ff1
  2392  0261  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  2393  0262  00F1               	movwf	___ftge@ff1+1
  2394  0263  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  2395  0264  00F2               	movwf	___ftge@ff1+2
  2396  0265  3000               	movlw	0
  2397  0266  00F3               	movwf	___ftge@ff2
  2398  0267  3020               	movlw	32
  2399  0268  00F4               	movwf	___ftge@ff2+1
  2400  0269  3041               	movlw	65
  2401  026A  00F5               	movwf	___ftge@ff2+2
  2402  026B  160A  118A  20EB  120A  118A  	fcall	___ftge
  2403  0270  1C03               	btfss	3,0
  2404  0271  2A7A               	goto	l2912
  2405                           
  2406                           ;doprnt.c: 851: exp++;
  2407  0272  3001               	movlw	1
  2408  0273  1683               	bsf	3,5	;RP0=1, select bank1
  2409  0274  1303               	bcf	3,6	;RP1=0, select bank1
  2410  0275  07B2               	addwf	sprintf@exp^(0+128),f
  2411  0276  1803               	skipnc
  2412  0277  0AB3               	incf	(sprintf@exp+1)^(0+128),f
  2413  0278  3000               	movlw	0
  2414  0279                     L2:	
  2415  0279  07B3               	addwf	(sprintf@exp+1)^(0+128),f
  2416  027A                     l2912:	
  2417                           
  2418                           ;doprnt.c: 852: }
  2419                           ;doprnt.c: 1112: if(prec <= 12)
  2420  027A  1683               	bsf	3,5	;RP0=1, select bank1
  2421  027B  1303               	bcf	3,6	;RP1=0, select bank1
  2422  027C  083C               	movf	(sprintf@prec+1)^(0+128),w
  2423  027D  3A80               	xorlw	128
  2424  027E  00FF               	movwf	127
  2425  027F  3080               	movlw	128
  2426  0280  027F               	subwf	127,w
  2427  0281  1D03               	skipz
  2428  0282  2A85               	goto	u4355
  2429  0283  300D               	movlw	13
  2430  0284  023B               	subwf	sprintf@prec^(0+128),w
  2431  0285                     u4355:	
  2432  0285  1803               	skipnc
  2433  0286  2AC0               	goto	l2916
  2434                           
  2435                           ;doprnt.c: 1113: fval += fround(prec);
  2436  0287  1683               	bsf	3,5	;RP0=1, select bank1
  2437  0288  1303               	bcf	3,6	;RP1=0, select bank1
  2438  0289  083B               	movf	sprintf@prec^(0+128),w
  2439  028A  120A  158A  21CE  120A  118A  	fcall	_fround
  2440  028F  1283               	bcf	3,5	;RP0=0, select bank0
  2441  0290  1303               	bcf	3,6	;RP1=0, select bank0
  2442  0291  0840               	movf	?_fround,w
  2443  0292  00D0               	movwf	___ftadd@f1
  2444  0293  0841               	movf	?_fround+1,w
  2445  0294  00D1               	movwf	___ftadd@f1+1
  2446  0295  0842               	movf	?_fround+2,w
  2447  0296  00D2               	movwf	___ftadd@f1+2
  2448  0297  1683               	bsf	3,5	;RP0=1, select bank1
  2449  0298  1303               	bcf	3,6	;RP1=0, select bank1
  2450  0299  0838               	movf	sprintf@fval^(0+128),w
  2451  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2452  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2453  029C  00D3               	movwf	___ftadd@f2
  2454  029D  1683               	bsf	3,5	;RP0=1, select bank1
  2455  029E  1303               	bcf	3,6	;RP1=0, select bank1
  2456  029F  0839               	movf	(sprintf@fval+1)^(0+128),w
  2457  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2458  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2459  02A2  00D4               	movwf	___ftadd@f2+1
  2460  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2461  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2462  02A5  083A               	movf	(sprintf@fval+2)^(0+128),w
  2463  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2464  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2465  02A8  00D5               	movwf	___ftadd@f2+2
  2466  02A9  160A  118A  25C5  120A  118A  	fcall	___ftadd
  2467  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  2468  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  2469  02B0  0850               	movf	?___ftadd,w
  2470  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2471  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  2472  02B3  00B8               	movwf	sprintf@fval^(0+128)
  2473  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2474  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2475  02B6  0851               	movf	?___ftadd+1,w
  2476  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2477  02B8  1303               	bcf	3,6	;RP1=0, select bank1
  2478  02B9  00B9               	movwf	(sprintf@fval+1)^(0+128)
  2479  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2480  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2481  02BC  0852               	movf	?___ftadd+2,w
  2482  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  2483  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  2484  02BF  00BA               	movwf	(sprintf@fval+2)^(0+128)
  2485  02C0                     l2916:	
  2486                           
  2487                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2488  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  2489  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  2490  02C2  0833               	movf	(sprintf@exp+1)^(0+128),w
  2491  02C3  3A80               	xorlw	128
  2492  02C4  00FF               	movwf	127
  2493  02C5  3080               	movlw	128
  2494  02C6  027F               	subwf	127,w
  2495  02C7  1D03               	skipz
  2496  02C8  2ACB               	goto	u4365
  2497  02C9  300A               	movlw	10
  2498  02CA  0232               	subwf	sprintf@exp^(0+128),w
  2499  02CB                     u4365:	
  2500  02CB  1803               	skipnc
  2501  02CC  2AFE               	goto	l2924
  2502  02CD  1683               	bsf	3,5	;RP0=1, select bank1
  2503  02CE  1303               	bcf	3,6	;RP1=0, select bank1
  2504  02CF  083A               	movf	(sprintf@fval+2)^(0+128),w
  2505  02D0  0439               	iorwf	(sprintf@fval+1)^(0+128),w
  2506  02D1  0438               	iorwf	sprintf@fval^(0+128),w
  2507  02D2  1903               	skipnz
  2508  02D3  2B57               	goto	l2938
  2509  02D4  0838               	movf	sprintf@fval^(0+128),w
  2510  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2511  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2512  02D7  00C9               	movwf	___fttol@f1
  2513  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  2514  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  2515  02DA  0839               	movf	(sprintf@fval+1)^(0+128),w
  2516  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2517  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2518  02DD  00CA               	movwf	___fttol@f1+1
  2519  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  2520  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  2521  02E0  083A               	movf	(sprintf@fval+2)^(0+128),w
  2522  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2523  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  2524  02E3  00CB               	movwf	___fttol@f1+2
  2525  02E4  160A  118A  21B4  120A  118A  	fcall	___fttol
  2526  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  2527  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  2528  02EB  084C               	movf	?___fttol+3,w
  2529  02EC  044B               	iorwf	?___fttol+2,w
  2530  02ED  044A               	iorwf	?___fttol+1,w
  2531  02EE  0449               	iorwf	?___fttol,w
  2532  02EF  1D03               	skipz
  2533  02F0  2B57               	goto	l2938
  2534  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  2535  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  2536  02F3  0833               	movf	(sprintf@exp+1)^(0+128),w
  2537  02F4  3A80               	xorlw	128
  2538  02F5  00FF               	movwf	127
  2539  02F6  3080               	movlw	128
  2540  02F7  027F               	subwf	127,w
  2541  02F8  1D03               	skipz
  2542  02F9  2AFC               	goto	u4395
  2543  02FA  3002               	movlw	2
  2544  02FB  0232               	subwf	sprintf@exp^(0+128),w
  2545  02FC                     u4395:	
  2546  02FC  1C03               	skipc
  2547  02FD  2B57               	goto	l2938
  2548  02FE                     l2924:	
  2549                           
  2550                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2551  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  2552  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  2553  0300  082A               	movf	sprintf@tmpval^(0+128),w
  2554  0301  00F0               	movwf	___ftge@ff1
  2555  0302  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  2556  0303  00F1               	movwf	___ftge@ff1+1
  2557  0304  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  2558  0305  00F2               	movwf	___ftge@ff1+2
  2559  0306  3070               	movlw	112
  2560  0307  00F3               	movwf	___ftge@ff2
  2561  0308  3089               	movlw	137
  2562  0309  00F4               	movwf	___ftge@ff2+1
  2563  030A  3040               	movlw	64
  2564  030B  00F5               	movwf	___ftge@ff2+2
  2565  030C  160A  118A  20EB  120A  118A  	fcall	___ftge
  2566  0311  1803               	btfsc	3,0
  2567  0312  2B15               	goto	l2928
  2568                           
  2569                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2570  0313  30F7               	movlw	247
  2571  0314  2B16               	goto	L3
  2572  0315                     l2928:	
  2573                           ;doprnt.c: 1122: }else{
  2574                           
  2575                           
  2576                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2577  0315  30F8               	movlw	248
  2578  0316                     L3:	
  2579  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2580  0317  1303               	bcf	3,6	;RP1=0, select bank1
  2581  0318  07B2               	addwf	sprintf@exp^(0+128),f
  2582  0319  1803               	skipnc
  2583  031A  0AB3               	incf	(sprintf@exp+1)^(0+128),f
  2584  031B  30FF               	movlw	255
  2585  031C  07B3               	addwf	(sprintf@exp+1)^(0+128),f
  2586                           
  2587                           ;doprnt.c: 1124: }
  2588                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2589  031D  0832               	movf	sprintf@exp^(0+128),w
  2590  031E  120A  158A  2565  120A  118A  	fcall	_scale
  2591  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0324  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0325  0840               	movf	?_scale,w
  2594  0326  1683               	bsf	3,5	;RP0=1, select bank1
  2595  0327  1303               	bcf	3,6	;RP1=0, select bank1
  2596  0328  00AA               	movwf	sprintf@tmpval^(0+128)
  2597  0329  1283               	bcf	3,5	;RP0=0, select bank0
  2598  032A  1303               	bcf	3,6	;RP1=0, select bank0
  2599  032B  0841               	movf	?_scale+1,w
  2600  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2601  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2602  032E  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  2603  032F  1283               	bcf	3,5	;RP0=0, select bank0
  2604  0330  1303               	bcf	3,6	;RP1=0, select bank0
  2605  0331  0842               	movf	?_scale+2,w
  2606  0332  1683               	bsf	3,5	;RP0=1, select bank1
  2607  0333  1303               	bcf	3,6	;RP1=0, select bank1
  2608  0334  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  2609                           
  2610                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2611  0335  0838               	movf	sprintf@fval^(0+128),w
  2612  0336  00F0               	movwf	__tdiv_to_l_@f1
  2613  0337  0839               	movf	(sprintf@fval+1)^(0+128),w
  2614  0338  00F1               	movwf	__tdiv_to_l_@f1+1
  2615  0339  083A               	movf	(sprintf@fval+2)^(0+128),w
  2616  033A  00F2               	movwf	__tdiv_to_l_@f1+2
  2617  033B  082A               	movf	sprintf@tmpval^(0+128),w
  2618  033C  00F3               	movwf	__tdiv_to_l_@f2
  2619  033D  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  2620  033E  00F4               	movwf	__tdiv_to_l_@f2+1
  2621  033F  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  2622  0340  00F5               	movwf	__tdiv_to_l_@f2+2
  2623  0341  160A  118A  242F  120A  118A  	fcall	__tdiv_to_l_
  2624  0346  0873               	movf	?__tdiv_to_l_+3,w
  2625  0347  1683               	bsf	3,5	;RP0=1, select bank1
  2626  0348  1303               	bcf	3,6	;RP1=0, select bank1
  2627  0349  00B1               	movwf	(sprintf@val+3)^(0+128)
  2628  034A  0872               	movf	?__tdiv_to_l_+2,w
  2629  034B  00B0               	movwf	(sprintf@val+2)^(0+128)
  2630  034C  0871               	movf	?__tdiv_to_l_+1,w
  2631  034D  00AF               	movwf	(sprintf@val+1)^(0+128)
  2632  034E  0870               	movf	?__tdiv_to_l_,w
  2633  034F  00AE               	movwf	sprintf@val^(0+128)
  2634                           
  2635                           ;doprnt.c: 1129: fval = 0.0;
  2636  0350  3000               	movlw	0
  2637  0351  00B8               	movwf	sprintf@fval^(0+128)
  2638  0352  3000               	movlw	0
  2639  0353  00B9               	movwf	(sprintf@fval+1)^(0+128)
  2640  0354  3000               	movlw	0
  2641  0355  00BA               	movwf	(sprintf@fval+2)^(0+128)
  2642                           
  2643                           ;doprnt.c: 1130: } else {
  2644  0356  2BC6               	goto	l2942
  2645  0357                     l2938:	
  2646                           
  2647                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2648  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2649  0358  1303               	bcf	3,6	;RP1=0, select bank1
  2650  0359  0838               	movf	sprintf@fval^(0+128),w
  2651  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2652  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2653  035C  00C9               	movwf	___fttol@f1
  2654  035D  1683               	bsf	3,5	;RP0=1, select bank1
  2655  035E  1303               	bcf	3,6	;RP1=0, select bank1
  2656  035F  0839               	movf	(sprintf@fval+1)^(0+128),w
  2657  0360  1283               	bcf	3,5	;RP0=0, select bank0
  2658  0361  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0362  00CA               	movwf	___fttol@f1+1
  2660  0363  1683               	bsf	3,5	;RP0=1, select bank1
  2661  0364  1303               	bcf	3,6	;RP1=0, select bank1
  2662  0365  083A               	movf	(sprintf@fval+2)^(0+128),w
  2663  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2664  0367  1303               	bcf	3,6	;RP1=0, select bank0
  2665  0368  00CB               	movwf	___fttol@f1+2
  2666  0369  160A  118A  21B4  120A  118A  	fcall	___fttol
  2667  036E  1283               	bcf	3,5	;RP0=0, select bank0
  2668  036F  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0370  084C               	movf	?___fttol+3,w
  2670  0371  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0372  1303               	bcf	3,6	;RP1=0, select bank1
  2672  0373  00B1               	movwf	(sprintf@val+3)^(0+128)
  2673  0374  1283               	bcf	3,5	;RP0=0, select bank0
  2674  0375  1303               	bcf	3,6	;RP1=0, select bank0
  2675  0376  084B               	movf	?___fttol+2,w
  2676  0377  1683               	bsf	3,5	;RP0=1, select bank1
  2677  0378  1303               	bcf	3,6	;RP1=0, select bank1
  2678  0379  00B0               	movwf	(sprintf@val+2)^(0+128)
  2679  037A  1283               	bcf	3,5	;RP0=0, select bank0
  2680  037B  1303               	bcf	3,6	;RP1=0, select bank0
  2681  037C  084A               	movf	?___fttol+1,w
  2682  037D  1683               	bsf	3,5	;RP0=1, select bank1
  2683  037E  1303               	bcf	3,6	;RP1=0, select bank1
  2684  037F  00AF               	movwf	(sprintf@val+1)^(0+128)
  2685  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2686  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2687  0382  0849               	movf	?___fttol,w
  2688  0383  1683               	bsf	3,5	;RP0=1, select bank1
  2689  0384  1303               	bcf	3,6	;RP1=0, select bank1
  2690  0385  00AE               	movwf	sprintf@val^(0+128)
  2691                           
  2692                           ;doprnt.c: 1132: fval -= (double)val;
  2693  0386  0831               	movf	(sprintf@val+3)^(0+128),w
  2694  0387  00FB               	movwf	___lltoft@c+3
  2695  0388  0830               	movf	(sprintf@val+2)^(0+128),w
  2696  0389  00FA               	movwf	___lltoft@c+2
  2697  038A  082F               	movf	(sprintf@val+1)^(0+128),w
  2698  038B  00F9               	movwf	___lltoft@c+1
  2699  038C  082E               	movf	sprintf@val^(0+128),w
  2700  038D  00F8               	movwf	___lltoft@c
  2701  038E  160A  158A  2588  120A  118A  	fcall	___lltoft
  2702  0393  0878               	movf	?___lltoft,w
  2703  0394  1283               	bcf	3,5	;RP0=0, select bank0
  2704  0395  1303               	bcf	3,6	;RP1=0, select bank0
  2705  0396  00DD               	movwf	___ftsub@f2
  2706  0397  0879               	movf	?___lltoft+1,w
  2707  0398  00DE               	movwf	___ftsub@f2+1
  2708  0399  087A               	movf	?___lltoft+2,w
  2709  039A  00DF               	movwf	___ftsub@f2+2
  2710  039B  1683               	bsf	3,5	;RP0=1, select bank1
  2711  039C  1303               	bcf	3,6	;RP1=0, select bank1
  2712  039D  0838               	movf	sprintf@fval^(0+128),w
  2713  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2714  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2715  03A0  00E0               	movwf	___ftsub@f1
  2716  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  2717  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  2718  03A3  0839               	movf	(sprintf@fval+1)^(0+128),w
  2719  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  2720  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  2721  03A6  00E1               	movwf	___ftsub@f1+1
  2722  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  2723  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  2724  03A9  083A               	movf	(sprintf@fval+2)^(0+128),w
  2725  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2726  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2727  03AC  00E2               	movwf	___ftsub@f1+2
  2728  03AD  160A  158A  2517  120A  118A  	fcall	___ftsub
  2729  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2730  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2731  03B4  085D               	movf	?___ftsub,w
  2732  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  2733  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  2734  03B7  00B8               	movwf	sprintf@fval^(0+128)
  2735  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2736  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2737  03BA  085E               	movf	?___ftsub+1,w
  2738  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  2739  03BC  1303               	bcf	3,6	;RP1=0, select bank1
  2740  03BD  00B9               	movwf	(sprintf@fval+1)^(0+128)
  2741  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2742  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2743  03C0  085F               	movf	?___ftsub+2,w
  2744  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  2745  03C2  1303               	bcf	3,6	;RP1=0, select bank1
  2746  03C3  00BA               	movwf	(sprintf@fval+2)^(0+128)
  2747                           
  2748                           ;doprnt.c: 1133: exp = 0;
  2749  03C4  01B2               	clrf	sprintf@exp^(0+128)
  2750  03C5  01B3               	clrf	(sprintf@exp+1)^(0+128)
  2751  03C6                     l2942:	
  2752                           
  2753                           ;doprnt.c: 1134: }
  2754                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2755  03C6  01BD               	clrf	sprintf@c^(0+128)
  2756  03C7  0ABD               	incf	sprintf@c^(0+128),f
  2757  03C8  300A               	movlw	10
  2758  03C9  063D               	xorwf	sprintf@c^(0+128),w
  2759  03CA  1903               	btfsc	3,2
  2760  03CB  2C08               	goto	l2954
  2761  03CC                     l2948:	
  2762                           
  2763                           ;doprnt.c: 1137: if(val < dpowers[c])
  2764  03CC  083D               	movf	sprintf@c^(0+128),w
  2765  03CD  00A0               	movwf	??_sprintf^(0+128)
  2766  03CE  3001               	movlw	1
  2767  03CF                     u4425:	
  2768  03CF  1003               	clrc
  2769  03D0  0DA0               	rlf	??_sprintf^(0+128),f
  2770  03D1  3EFF               	addlw	-1
  2771  03D2  1D03               	skipz
  2772  03D3  2BCF               	goto	u4425
  2773  03D4  1003               	clrc
  2774  03D5  0D20               	rlf	??_sprintf^(0+128),w
  2775  03D6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2776  03D7  0084               	movwf	4
  2777  03D8  160A  118A  2000  120A  118A  	fcall	stringdir
  2778  03DD  00A1               	movwf	(??_sprintf+1)^(0+128)
  2779  03DE  160A  118A  2000  120A  118A  	fcall	stringdir
  2780  03E3  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  2781  03E4  160A  118A  2000  120A  118A  	fcall	stringdir
  2782  03E9  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  2783  03EA  160A  118A  2000  120A  118A  	fcall	stringdir
  2784  03EF  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  2785  03F0  0824               	movf	(??_sprintf+4)^(0+128),w
  2786  03F1  0231               	subwf	(sprintf@val+3)^(0+128),w
  2787  03F2  1D03               	skipz
  2788  03F3  2BFE               	goto	u4435
  2789  03F4  0823               	movf	(??_sprintf+3)^(0+128),w
  2790  03F5  0230               	subwf	(sprintf@val+2)^(0+128),w
  2791  03F6  1D03               	skipz
  2792  03F7  2BFE               	goto	u4435
  2793  03F8  0822               	movf	(??_sprintf+2)^(0+128),w
  2794  03F9  022F               	subwf	(sprintf@val+1)^(0+128),w
  2795  03FA  1D03               	skipz
  2796  03FB  2BFE               	goto	u4435
  2797  03FC  0821               	movf	(??_sprintf+1)^(0+128),w
  2798  03FD  022E               	subwf	sprintf@val^(0+128),w
  2799  03FE                     u4435:	
  2800  03FE  1C03               	btfss	3,0
  2801  03FF  2C08               	goto	l2954
  2802                           
  2803                           ;doprnt.c: 1138: break;
  2804  0400  3001               	movlw	1
  2805  0401  00A0               	movwf	??_sprintf^(0+128)
  2806  0402  0820               	movf	??_sprintf^(0+128),w
  2807  0403  07BD               	addwf	sprintf@c^(0+128),f
  2808  0404  300A               	movlw	10
  2809  0405  063D               	xorwf	sprintf@c^(0+128),w
  2810  0406  1D03               	btfss	3,2
  2811  0407  2BCC               	goto	l2948
  2812  0408                     l2954:	
  2813                           
  2814                           ;doprnt.c: 1142: width -= prec + c + exp;
  2815  0408  083B               	movf	sprintf@prec^(0+128),w
  2816  0409  073D               	addwf	sprintf@c^(0+128),w
  2817  040A  00A0               	movwf	??_sprintf^(0+128)
  2818  040B  083C               	movf	(sprintf@prec+1)^(0+128),w
  2819  040C  1803               	skipnc
  2820  040D  0A3C               	incf	(sprintf@prec+1)^(0+128),w
  2821  040E  3E00               	addlw	0
  2822  040F  1BBD               	btfsc	sprintf@c^(0+128),7
  2823  0410  3EFF               	addlw	255
  2824  0411  00A1               	movwf	(??_sprintf+1)^(0+128)
  2825  0412  0832               	movf	sprintf@exp^(0+128),w
  2826  0413  0720               	addwf	??_sprintf^(0+128),w
  2827  0414  00A2               	movwf	(??_sprintf+2)^(0+128)
  2828  0415  0833               	movf	(sprintf@exp+1)^(0+128),w
  2829  0416  1803               	skipnc
  2830  0417  0A33               	incf	(sprintf@exp+1)^(0+128),w
  2831  0418  0721               	addwf	(??_sprintf+1)^(0+128),w
  2832  0419  00A3               	movwf	(??_sprintf+3)^(0+128)
  2833  041A  0822               	movf	(??_sprintf+2)^(0+128),w
  2834  041B  02B6               	subwf	sprintf@width^(0+128),f
  2835  041C  0823               	movf	(??_sprintf+3)^(0+128),w
  2836  041D  1C03               	skipc
  2837  041E  03B7               	decf	(sprintf@width+1)^(0+128),f
  2838  041F  02B7               	subwf	(sprintf@width+1)^(0+128),f
  2839                           
  2840                           ;doprnt.c: 1143: if(
  2841                           ;doprnt.c: 1147: prec)
  2842  0420  083B               	movf	sprintf@prec^(0+128),w
  2843  0421  043C               	iorwf	(sprintf@prec+1)^(0+128),w
  2844  0422  1903               	btfsc	3,2
  2845  0423  2C2A               	goto	l2958
  2846                           
  2847                           ;doprnt.c: 1148: width--;
  2848  0424  30FF               	movlw	255
  2849  0425  07B6               	addwf	sprintf@width^(0+128),f
  2850  0426  1803               	skipnc
  2851  0427  0AB7               	incf	(sprintf@width+1)^(0+128),f
  2852  0428  30FF               	movlw	255
  2853  0429  07B7               	addwf	(sprintf@width+1)^(0+128),f
  2854  042A                     l2958:	
  2855                           
  2856                           ;doprnt.c: 1149: if(flag & 0x03)
  2857  042A  3003               	movlw	3
  2858  042B  0534               	andwf	sprintf@flag^(0+128),w
  2859  042C  00A0               	movwf	??_sprintf^(0+128)
  2860  042D  3000               	movlw	0
  2861  042E  0535               	andwf	(sprintf@flag+1)^(0+128),w
  2862  042F  00A1               	movwf	(??_sprintf+1)^(0+128)
  2863  0430  0820               	movf	??_sprintf^(0+128),w
  2864  0431  0421               	iorwf	(??_sprintf^(0+128)+1),w
  2865  0432  1903               	btfsc	3,2
  2866  0433  2C3A               	goto	l2962
  2867                           
  2868                           ;doprnt.c: 1150: width--;
  2869  0434  30FF               	movlw	255
  2870  0435  07B6               	addwf	sprintf@width^(0+128),f
  2871  0436  1803               	skipnc
  2872  0437  0AB7               	incf	(sprintf@width+1)^(0+128),f
  2873  0438  30FF               	movlw	255
  2874  0439  07B7               	addwf	(sprintf@width+1)^(0+128),f
  2875  043A                     l2962:	
  2876                           
  2877                           ;doprnt.c: 1153: if(flag & 0x04) {
  2878  043A  1D34               	btfss	sprintf@flag^(0+128),2
  2879  043B  2CA7               	goto	l2984
  2880                           
  2881                           ;doprnt.c: 1157: if(flag & 0x03)
  2882  043C  3003               	movlw	3
  2883  043D  0534               	andwf	sprintf@flag^(0+128),w
  2884  043E  00A0               	movwf	??_sprintf^(0+128)
  2885  043F  3000               	movlw	0
  2886  0440  0535               	andwf	(sprintf@flag+1)^(0+128),w
  2887  0441  00A1               	movwf	(??_sprintf+1)^(0+128)
  2888  0442  0820               	movf	??_sprintf^(0+128),w
  2889  0443  0421               	iorwf	(??_sprintf^(0+128)+1),w
  2890  0444  1903               	btfsc	3,2
  2891  0445  2C5B               	goto	l2976
  2892                           
  2893                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2894  0446  302D               	movlw	45
  2895  0447  00A0               	movwf	??_sprintf^(0+128)
  2896  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2897  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2898  044A  0863               	movf	sprintf@sp,w
  2899  044B  0084               	movwf	4
  2900  044C  1783               	bsf	3,7
  2901  044D  1C64               	btfss	sprintf@sp+1,0
  2902  044E  1383               	bcf	3,7
  2903  044F  1683               	bsf	3,5	;RP0=1, select bank1
  2904  0450  1303               	bcf	3,6	;RP1=0, select bank1
  2905  0451  0820               	movf	??_sprintf^(0+128),w
  2906  0452  0080               	movwf	0
  2907  0453  3001               	movlw	1
  2908  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0456  07E3               	addwf	sprintf@sp,f
  2911  0457  1803               	skipnc
  2912  0458  0AE4               	incf	sprintf@sp+1,f
  2913  0459  3000               	movlw	0
  2914  045A  07E4               	addwf	sprintf@sp+1,f
  2915  045B                     l2976:	
  2916                           ;doprnt.c: 1168: while(width > 0) {
  2917                           
  2918  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2919  045C  1303               	bcf	3,6	;RP1=0, select bank1
  2920  045D  0837               	movf	(sprintf@width+1)^(0+128),w
  2921  045E  3A80               	xorlw	128
  2922  045F  00FF               	movwf	127
  2923  0460  3080               	movlw	128
  2924  0461  027F               	subwf	127,w
  2925  0462  1D03               	skipz
  2926  0463  2C66               	goto	u4495
  2927  0464  3001               	movlw	1
  2928  0465  0236               	subwf	sprintf@width^(0+128),w
  2929  0466                     u4495:	
  2930  0466  1C03               	btfss	3,0
  2931  0467  2CD5               	goto	l3000
  2932                           
  2933                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2934  0468  3030               	movlw	48
  2935  0469  1683               	bsf	3,5	;RP0=1, select bank1
  2936  046A  1303               	bcf	3,6	;RP1=0, select bank1
  2937  046B  00A0               	movwf	??_sprintf^(0+128)
  2938  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2939  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2940  046E  0863               	movf	sprintf@sp,w
  2941  046F  0084               	movwf	4
  2942  0470  1783               	bsf	3,7
  2943  0471  1C64               	btfss	sprintf@sp+1,0
  2944  0472  1383               	bcf	3,7
  2945  0473  1683               	bsf	3,5	;RP0=1, select bank1
  2946  0474  1303               	bcf	3,6	;RP1=0, select bank1
  2947  0475  0820               	movf	??_sprintf^(0+128),w
  2948  0476  0080               	movwf	0
  2949  0477  3001               	movlw	1
  2950  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2951  0479  1303               	bcf	3,6	;RP1=0, select bank0
  2952  047A  07E3               	addwf	sprintf@sp,f
  2953  047B  1803               	skipnc
  2954  047C  0AE4               	incf	sprintf@sp+1,f
  2955  047D  3000               	movlw	0
  2956  047E  07E4               	addwf	sprintf@sp+1,f
  2957                           
  2958                           ;doprnt.c: 1170: width--;
  2959  047F  30FF               	movlw	255
  2960  0480  1683               	bsf	3,5	;RP0=1, select bank1
  2961  0481  1303               	bcf	3,6	;RP1=0, select bank1
  2962  0482  07B6               	addwf	sprintf@width^(0+128),f
  2963  0483  1803               	skipnc
  2964  0484  0AB7               	incf	(sprintf@width+1)^(0+128),f
  2965  0485  30FF               	movlw	255
  2966  0486  07B7               	addwf	(sprintf@width+1)^(0+128),f
  2967  0487  2C5B               	goto	l2976
  2968  0488                     l2978:	
  2969                           ;doprnt.c: 1175: {
  2970                           ;doprnt.c: 1180: while(width > 0) {
  2971                           
  2972                           ;doprnt.c: 1171: }
  2973                           ;doprnt.c: 1173: } else
  2974                           
  2975                           
  2976                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2977  0488  3020               	movlw	32
  2978  0489  1683               	bsf	3,5	;RP0=1, select bank1
  2979  048A  1303               	bcf	3,6	;RP1=0, select bank1
  2980  048B  00A0               	movwf	??_sprintf^(0+128)
  2981  048C  1283               	bcf	3,5	;RP0=0, select bank0
  2982  048D  1303               	bcf	3,6	;RP1=0, select bank0
  2983  048E  0863               	movf	sprintf@sp,w
  2984  048F  0084               	movwf	4
  2985  0490  1783               	bsf	3,7
  2986  0491  1C64               	btfss	sprintf@sp+1,0
  2987  0492  1383               	bcf	3,7
  2988  0493  1683               	bsf	3,5	;RP0=1, select bank1
  2989  0494  1303               	bcf	3,6	;RP1=0, select bank1
  2990  0495  0820               	movf	??_sprintf^(0+128),w
  2991  0496  0080               	movwf	0
  2992  0497  3001               	movlw	1
  2993  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2994  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2995  049A  07E3               	addwf	sprintf@sp,f
  2996  049B  1803               	skipnc
  2997  049C  0AE4               	incf	sprintf@sp+1,f
  2998  049D  3000               	movlw	0
  2999  049E  07E4               	addwf	sprintf@sp+1,f
  3000                           
  3001                           ;doprnt.c: 1182: width--;
  3002  049F  30FF               	movlw	255
  3003  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3004  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  3005  04A2  07B6               	addwf	sprintf@width^(0+128),f
  3006  04A3  1803               	skipnc
  3007  04A4  0AB7               	incf	(sprintf@width+1)^(0+128),f
  3008  04A5  30FF               	movlw	255
  3009  04A6  07B7               	addwf	(sprintf@width+1)^(0+128),f
  3010  04A7                     l2984:	
  3011  04A7  1683               	bsf	3,5	;RP0=1, select bank1
  3012  04A8  1303               	bcf	3,6	;RP1=0, select bank1
  3013  04A9  0837               	movf	(sprintf@width+1)^(0+128),w
  3014  04AA  3A80               	xorlw	128
  3015  04AB  00FF               	movwf	127
  3016  04AC  3080               	movlw	128
  3017  04AD  027F               	subwf	127,w
  3018  04AE  1D03               	skipz
  3019  04AF  2CB2               	goto	u4505
  3020  04B0  3001               	movlw	1
  3021  04B1  0236               	subwf	sprintf@width^(0+128),w
  3022  04B2                     u4505:	
  3023  04B2  1803               	skipnc
  3024  04B3  2C88               	goto	l2978
  3025                           
  3026                           ;doprnt.c: 1183: }
  3027                           ;doprnt.c: 1188: if(flag & 0x03)
  3028  04B4  3003               	movlw	3
  3029  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  3030  04B6  1303               	bcf	3,6	;RP1=0, select bank1
  3031  04B7  0534               	andwf	sprintf@flag^(0+128),w
  3032  04B8  00A0               	movwf	??_sprintf^(0+128)
  3033  04B9  3000               	movlw	0
  3034  04BA  0535               	andwf	(sprintf@flag+1)^(0+128),w
  3035  04BB  00A1               	movwf	(??_sprintf+1)^(0+128)
  3036  04BC  0820               	movf	??_sprintf^(0+128),w
  3037  04BD  0421               	iorwf	(??_sprintf^(0+128)+1),w
  3038  04BE  1903               	btfsc	3,2
  3039  04BF  2CD5               	goto	l3000
  3040                           
  3041                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3042  04C0  302D               	movlw	45
  3043  04C1                     L7:	
  3044  04C1  00A0               	movwf	??_sprintf^(0+128)
  3045  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  3046  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  3047  04C4  0863               	movf	sprintf@sp,w
  3048  04C5  0084               	movwf	4
  3049  04C6  1783               	bsf	3,7
  3050  04C7  1C64               	btfss	sprintf@sp+1,0
  3051  04C8  1383               	bcf	3,7
  3052  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  3053  04CA  1303               	bcf	3,6	;RP1=0, select bank1
  3054  04CB  0820               	movf	??_sprintf^(0+128),w
  3055  04CC  0080               	movwf	0
  3056  04CD  3001               	movlw	1
  3057  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3058  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3059  04D0  07E3               	addwf	sprintf@sp,f
  3060  04D1  1803               	skipnc
  3061  04D2  0AE4               	incf	sprintf@sp+1,f
  3062  04D3  3000               	movlw	0
  3063  04D4  07E4               	addwf	sprintf@sp+1,f
  3064  04D5                     l3000:	
  3065  04D5  30FF               	movlw	255
  3066  04D6  1683               	bsf	3,5	;RP0=1, select bank1
  3067  04D7  1303               	bcf	3,6	;RP1=0, select bank1
  3068  04D8  00A0               	movwf	??_sprintf^(0+128)
  3069  04D9  0820               	movf	??_sprintf^(0+128),w
  3070  04DA  07BD               	addwf	sprintf@c^(0+128),f
  3071  04DB  0A3D               	incf	sprintf@c^(0+128),w
  3072  04DC  1903               	btfsc	3,2
  3073  04DD  2D7C               	goto	l3008
  3074                           
  3075                           ;doprnt.c: 1200: {
  3076                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3077                           
  3078                           ;doprnt.c: 1195: }
  3079                           ;doprnt.c: 1196: while(c--) {
  3080  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  3081  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  3082  04E0  083D               	movf	sprintf@c^(0+128),w
  3083  04E1  00A0               	movwf	??_sprintf^(0+128)
  3084  04E2  3001               	movlw	1
  3085  04E3                     u4525:	
  3086  04E3  1003               	clrc
  3087  04E4  0DA0               	rlf	??_sprintf^(0+128),f
  3088  04E5  3EFF               	addlw	-1
  3089  04E6  1D03               	skipz
  3090  04E7  2CE3               	goto	u4525
  3091  04E8  1003               	clrc
  3092  04E9  0D20               	rlf	??_sprintf^(0+128),w
  3093  04EA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3094  04EB  0084               	movwf	4
  3095  04EC  160A  118A  2000  120A  118A  	fcall	stringdir
  3096  04F1  00F0               	movwf	___lldiv@divisor
  3097  04F2  160A  118A  2000  120A  118A  	fcall	stringdir
  3098  04F7  00F1               	movwf	___lldiv@divisor+1
  3099  04F8  160A  118A  2000  120A  118A  	fcall	stringdir
  3100  04FD  00F2               	movwf	___lldiv@divisor+2
  3101  04FE  160A  118A  2000  120A  118A  	fcall	stringdir
  3102  0503  00F3               	movwf	___lldiv@divisor+3
  3103  0504  0831               	movf	(sprintf@val+3)^(0+128),w
  3104  0505  00F7               	movwf	___lldiv@dividend+3
  3105  0506  0830               	movf	(sprintf@val+2)^(0+128),w
  3106  0507  00F6               	movwf	___lldiv@dividend+2
  3107  0508  082F               	movf	(sprintf@val+1)^(0+128),w
  3108  0509  00F5               	movwf	___lldiv@dividend+1
  3109  050A  082E               	movf	sprintf@val^(0+128),w
  3110  050B  00F4               	movwf	___lldiv@dividend
  3111  050C  120A  158A  200A  120A  118A  	fcall	___lldiv
  3112  0511  0873               	movf	?___lldiv+3,w
  3113  0512  1683               	bsf	3,5	;RP0=1, select bank1
  3114  0513  1303               	bcf	3,6	;RP1=0, select bank1
  3115  0514  00AD               	movwf	(sprintf@tmpval+3)^(0+128)
  3116  0515  0872               	movf	?___lldiv+2,w
  3117  0516  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  3118  0517  0871               	movf	?___lldiv+1,w
  3119  0518  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  3120  0519  0870               	movf	?___lldiv,w
  3121  051A  00AA               	movwf	sprintf@tmpval^(0+128)
  3122                           
  3123                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3124  051B  3000               	movlw	0
  3125  051C  1283               	bcf	3,5	;RP0=0, select bank0
  3126  051D  1303               	bcf	3,6	;RP1=0, select bank0
  3127  051E  00A3               	movwf	___llmod@divisor+3
  3128  051F  3000               	movlw	0
  3129  0520  00A2               	movwf	___llmod@divisor+2
  3130  0521  3000               	movlw	0
  3131  0522  00A1               	movwf	___llmod@divisor+1
  3132  0523  300A               	movlw	10
  3133  0524  00A0               	movwf	___llmod@divisor
  3134  0525  1683               	bsf	3,5	;RP0=1, select bank1
  3135  0526  1303               	bcf	3,6	;RP1=0, select bank1
  3136  0527  082D               	movf	(sprintf@tmpval+3)^(0+128),w
  3137  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3138  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3139  052A  00A7               	movwf	___llmod@dividend+3
  3140  052B  1683               	bsf	3,5	;RP0=1, select bank1
  3141  052C  1303               	bcf	3,6	;RP1=0, select bank1
  3142  052D  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  3143  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3144  052F  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0530  00A6               	movwf	___llmod@dividend+2
  3146  0531  1683               	bsf	3,5	;RP0=1, select bank1
  3147  0532  1303               	bcf	3,6	;RP1=0, select bank1
  3148  0533  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  3149  0534  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0535  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0536  00A5               	movwf	___llmod@dividend+1
  3152  0537  1683               	bsf	3,5	;RP0=1, select bank1
  3153  0538  1303               	bcf	3,6	;RP1=0, select bank1
  3154  0539  082A               	movf	sprintf@tmpval^(0+128),w
  3155  053A  1283               	bcf	3,5	;RP0=0, select bank0
  3156  053B  1303               	bcf	3,6	;RP1=0, select bank0
  3157  053C  00A4               	movwf	___llmod@dividend
  3158  053D  160A  158A  26AB  120A  118A  	fcall	___llmod
  3159  0542  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0543  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0544  0823               	movf	?___llmod+3,w
  3162  0545  1683               	bsf	3,5	;RP0=1, select bank1
  3163  0546  1303               	bcf	3,6	;RP1=0, select bank1
  3164  0547  00AD               	movwf	(sprintf@tmpval+3)^(0+128)
  3165  0548  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0549  1303               	bcf	3,6	;RP1=0, select bank0
  3167  054A  0822               	movf	?___llmod+2,w
  3168  054B  1683               	bsf	3,5	;RP0=1, select bank1
  3169  054C  1303               	bcf	3,6	;RP1=0, select bank1
  3170  054D  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  3171  054E  1283               	bcf	3,5	;RP0=0, select bank0
  3172  054F  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0550  0821               	movf	?___llmod+1,w
  3174  0551  1683               	bsf	3,5	;RP0=1, select bank1
  3175  0552  1303               	bcf	3,6	;RP1=0, select bank1
  3176  0553  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  3177  0554  1283               	bcf	3,5	;RP0=0, select bank0
  3178  0555  1303               	bcf	3,6	;RP1=0, select bank0
  3179  0556  0820               	movf	?___llmod,w
  3180  0557  1683               	bsf	3,5	;RP0=1, select bank1
  3181  0558  1303               	bcf	3,6	;RP1=0, select bank1
  3182  0559  00AA               	movwf	sprintf@tmpval^(0+128)
  3183                           
  3184                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3185  055A  082A               	movf	sprintf@tmpval^(0+128),w
  3186  055B  3E30               	addlw	48
  3187  055C  2CC1               	goto	L7
  3188  055D                     l3002:	
  3189                           ;doprnt.c: 1204: }
  3190                           ;doprnt.c: 1206: }
  3191                           ;doprnt.c: 1207: while(exp > 0) {
  3192                           
  3193                           
  3194                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3195  055D  3030               	movlw	48
  3196  055E  1683               	bsf	3,5	;RP0=1, select bank1
  3197  055F  1303               	bcf	3,6	;RP1=0, select bank1
  3198  0560  00A0               	movwf	??_sprintf^(0+128)
  3199  0561  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0562  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0563  0863               	movf	sprintf@sp,w
  3202  0564  0084               	movwf	4
  3203  0565  1783               	bsf	3,7
  3204  0566  1C64               	btfss	sprintf@sp+1,0
  3205  0567  1383               	bcf	3,7
  3206  0568  1683               	bsf	3,5	;RP0=1, select bank1
  3207  0569  1303               	bcf	3,6	;RP1=0, select bank1
  3208  056A  0820               	movf	??_sprintf^(0+128),w
  3209  056B  0080               	movwf	0
  3210  056C  3001               	movlw	1
  3211  056D  1283               	bcf	3,5	;RP0=0, select bank0
  3212  056E  1303               	bcf	3,6	;RP1=0, select bank0
  3213  056F  07E3               	addwf	sprintf@sp,f
  3214  0570  1803               	skipnc
  3215  0571  0AE4               	incf	sprintf@sp+1,f
  3216  0572  3000               	movlw	0
  3217  0573  07E4               	addwf	sprintf@sp+1,f
  3218                           
  3219                           ;doprnt.c: 1209: exp--;
  3220  0574  30FF               	movlw	255
  3221  0575  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0576  1303               	bcf	3,6	;RP1=0, select bank1
  3223  0577  07B2               	addwf	sprintf@exp^(0+128),f
  3224  0578  1803               	skipnc
  3225  0579  0AB3               	incf	(sprintf@exp+1)^(0+128),f
  3226  057A  30FF               	movlw	255
  3227  057B  07B3               	addwf	(sprintf@exp+1)^(0+128),f
  3228  057C                     l3008:	
  3229  057C  0833               	movf	(sprintf@exp+1)^(0+128),w
  3230  057D  3A80               	xorlw	128
  3231  057E  00FF               	movwf	127
  3232  057F  3080               	movlw	128
  3233  0580  027F               	subwf	127,w
  3234  0581  1D03               	skipz
  3235  0582  2D85               	goto	u4545
  3236  0583  3001               	movlw	1
  3237  0584  0232               	subwf	sprintf@exp^(0+128),w
  3238  0585                     u4545:	
  3239  0585  1803               	skipnc
  3240  0586  2D5D               	goto	l3002
  3241                           
  3242                           ;doprnt.c: 1210: }
  3243                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3244  0587  1683               	bsf	3,5	;RP0=1, select bank1
  3245  0588  1303               	bcf	3,6	;RP1=0, select bank1
  3246  0589  083C               	movf	(sprintf@prec+1)^(0+128),w
  3247  058A  3A80               	xorlw	128
  3248  058B  00FF               	movwf	127
  3249  058C  3080               	movlw	128
  3250  058D  027F               	subwf	127,w
  3251  058E  1D03               	skipz
  3252  058F  2D92               	goto	u4555
  3253  0590  3009               	movlw	9
  3254  0591  023B               	subwf	sprintf@prec^(0+128),w
  3255  0592                     u4555:	
  3256  0592  1C03               	skipc
  3257  0593  2D98               	goto	l3014
  3258                           
  3259                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3260  0594  3008               	movlw	8
  3261  0595  1683               	bsf	3,5	;RP0=1, select bank1
  3262  0596  1303               	bcf	3,6	;RP1=0, select bank1
  3263  0597  2D9B               	goto	L4
  3264  0598                     l3014:	
  3265                           
  3266                           ;doprnt.c: 1213: else
  3267                           ;doprnt.c: 1214: c = prec;
  3268  0598  1683               	bsf	3,5	;RP0=1, select bank1
  3269  0599  1303               	bcf	3,6	;RP1=0, select bank1
  3270  059A  083B               	movf	sprintf@prec^(0+128),w
  3271  059B                     L4:	
  3272  059B  00A0               	movwf	??_sprintf^(0+128)
  3273  059C  0820               	movf	??_sprintf^(0+128),w
  3274  059D  00BD               	movwf	sprintf@c^(0+128)
  3275                           
  3276                           ;doprnt.c: 1215: prec -= c;
  3277  059E  083D               	movf	sprintf@c^(0+128),w
  3278  059F  00A0               	movwf	??_sprintf^(0+128)
  3279  05A0  01A1               	clrf	(??_sprintf^(0+128)+1)
  3280  05A1  1BA0               	btfsc	??_sprintf^(0+128),7
  3281  05A2  03A1               	decf	(??_sprintf^(0+128)+1),f
  3282  05A3  0820               	movf	??_sprintf^(0+128),w
  3283  05A4  02BB               	subwf	sprintf@prec^(0+128),f
  3284  05A5  0821               	movf	(??_sprintf+1)^(0+128),w
  3285  05A6  1C03               	skipc
  3286  05A7  03BC               	decf	(sprintf@prec+1)^(0+128),f
  3287  05A8  02BC               	subwf	(sprintf@prec+1)^(0+128),f
  3288                           
  3289                           ;doprnt.c: 1219: if(c)
  3290  05A9  083D               	movf	sprintf@c^(0+128),w
  3291  05AA  1903               	btfsc	3,2
  3292  05AB  2DC1               	goto	l3022
  3293                           
  3294                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3295  05AC  302E               	movlw	46
  3296  05AD  00A0               	movwf	??_sprintf^(0+128)
  3297  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3298  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  3299  05B0  0863               	movf	sprintf@sp,w
  3300  05B1  0084               	movwf	4
  3301  05B2  1783               	bsf	3,7
  3302  05B3  1C64               	btfss	sprintf@sp+1,0
  3303  05B4  1383               	bcf	3,7
  3304  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  3305  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  3306  05B7  0820               	movf	??_sprintf^(0+128),w
  3307  05B8  0080               	movwf	0
  3308  05B9  3001               	movlw	1
  3309  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  3310  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  3311  05BC  07E3               	addwf	sprintf@sp,f
  3312  05BD  1803               	skipnc
  3313  05BE  0AE4               	incf	sprintf@sp+1,f
  3314  05BF  3000               	movlw	0
  3315  05C0  07E4               	addwf	sprintf@sp+1,f
  3316  05C1                     l3022:	
  3317                           
  3318                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3319  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  3320  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  3321  05C3  083D               	movf	sprintf@c^(0+128),w
  3322  05C4  120A  158A  2565  120A  118A  	fcall	_scale
  3323  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  3324  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  3325  05CB  0840               	movf	?_scale,w
  3326  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  3327  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  3328  05CE  00A6               	movwf	_sprintf$851^(0+128)
  3329  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  3330  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  3331  05D1  0841               	movf	?_scale+1,w
  3332  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3333  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3334  05D4  00A7               	movwf	(_sprintf$851+1)^(0+128)
  3335  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3336  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3337  05D7  0842               	movf	?_scale+2,w
  3338  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  3339  05D9  1303               	bcf	3,6	;RP1=0, select bank1
  3340  05DA  00A8               	movwf	(_sprintf$851+2)^(0+128)
  3341                           
  3342                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3343  05DB  0826               	movf	_sprintf$851^(0+128),w
  3344  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  3345  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  3346  05DE  00B3               	movwf	___ftmul@f2
  3347  05DF  1683               	bsf	3,5	;RP0=1, select bank1
  3348  05E0  1303               	bcf	3,6	;RP1=0, select bank1
  3349  05E1  0827               	movf	(_sprintf$851+1)^(0+128),w
  3350  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3351  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3352  05E4  00B4               	movwf	___ftmul@f2+1
  3353  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  3354  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  3355  05E7  0828               	movf	(_sprintf$851+2)^(0+128),w
  3356  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3357  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3358  05EA  00B5               	movwf	___ftmul@f2+2
  3359  05EB  1683               	bsf	3,5	;RP0=1, select bank1
  3360  05EC  1303               	bcf	3,6	;RP1=0, select bank1
  3361  05ED  0838               	movf	sprintf@fval^(0+128),w
  3362  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  3363  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  3364  05F0  00B0               	movwf	___ftmul@f1
  3365  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  3366  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  3367  05F3  0839               	movf	(sprintf@fval+1)^(0+128),w
  3368  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  3369  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  3370  05F6  00B1               	movwf	___ftmul@f1+1
  3371  05F7  1683               	bsf	3,5	;RP0=1, select bank1
  3372  05F8  1303               	bcf	3,6	;RP1=0, select bank1
  3373  05F9  083A               	movf	(sprintf@fval+2)^(0+128),w
  3374  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3375  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3376  05FC  00B2               	movwf	___ftmul@f1+2
  3377  05FD  160A  118A  24F2  120A  118A  	fcall	___ftmul
  3378  0602  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0603  1303               	bcf	3,6	;RP1=0, select bank0
  3380  0604  0830               	movf	?___ftmul,w
  3381  0605  00C9               	movwf	___fttol@f1
  3382  0606  0831               	movf	?___ftmul+1,w
  3383  0607  00CA               	movwf	___fttol@f1+1
  3384  0608  0832               	movf	?___ftmul+2,w
  3385  0609  00CB               	movwf	___fttol@f1+2
  3386  060A  160A  118A  21B4  120A  118A  	fcall	___fttol
  3387  060F  1283               	bcf	3,5	;RP0=0, select bank0
  3388  0610  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0611  084C               	movf	?___fttol+3,w
  3390  0612  1683               	bsf	3,5	;RP0=1, select bank1
  3391  0613  1303               	bcf	3,6	;RP1=0, select bank1
  3392  0614  00B1               	movwf	(sprintf@val+3)^(0+128)
  3393  0615  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0616  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0617  084B               	movf	?___fttol+2,w
  3396  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3397  0619  1303               	bcf	3,6	;RP1=0, select bank1
  3398  061A  00B0               	movwf	(sprintf@val+2)^(0+128)
  3399  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3400  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3401  061D  084A               	movf	?___fttol+1,w
  3402  061E  1683               	bsf	3,5	;RP0=1, select bank1
  3403  061F  1303               	bcf	3,6	;RP1=0, select bank1
  3404  0620  00AF               	movwf	(sprintf@val+1)^(0+128)
  3405  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0623  0849               	movf	?___fttol,w
  3408  0624                     L5:	
  3409  0624  1683               	bsf	3,5	;RP0=1, select bank1
  3410  0625  1303               	bcf	3,6	;RP1=0, select bank1
  3411  0626  00AE               	movwf	sprintf@val^(0+128)
  3412  0627  30FF               	movlw	255
  3413  0628  00A0               	movwf	??_sprintf^(0+128)
  3414  0629  0820               	movf	??_sprintf^(0+128),w
  3415  062A  07BD               	addwf	sprintf@c^(0+128),f
  3416  062B  0A3D               	incf	sprintf@c^(0+128),w
  3417  062C  1903               	btfsc	3,2
  3418  062D  2F36               	goto	l3042
  3419                           
  3420                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3421                           
  3422                           ;doprnt.c: 1228: while(c--) {
  3423  062E  083D               	movf	sprintf@c^(0+128),w
  3424  062F  00A0               	movwf	??_sprintf^(0+128)
  3425  0630  3001               	movlw	1
  3426  0631                     u4575:	
  3427  0631  1003               	clrc
  3428  0632  0DA0               	rlf	??_sprintf^(0+128),f
  3429  0633  3EFF               	addlw	-1
  3430  0634  1D03               	skipz
  3431  0635  2E31               	goto	u4575
  3432  0636  1003               	clrc
  3433  0637  0D20               	rlf	??_sprintf^(0+128),w
  3434  0638  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3435  0639  0084               	movwf	4
  3436  063A  160A  118A  2000  120A  118A  	fcall	stringdir
  3437  063F  00F0               	movwf	___lldiv@divisor
  3438  0640  160A  118A  2000  120A  118A  	fcall	stringdir
  3439  0645  00F1               	movwf	___lldiv@divisor+1
  3440  0646  160A  118A  2000  120A  118A  	fcall	stringdir
  3441  064B  00F2               	movwf	___lldiv@divisor+2
  3442  064C  160A  118A  2000  120A  118A  	fcall	stringdir
  3443  0651  00F3               	movwf	___lldiv@divisor+3
  3444  0652  0831               	movf	(sprintf@val+3)^(0+128),w
  3445  0653  00F7               	movwf	___lldiv@dividend+3
  3446  0654  0830               	movf	(sprintf@val+2)^(0+128),w
  3447  0655  00F6               	movwf	___lldiv@dividend+2
  3448  0656  082F               	movf	(sprintf@val+1)^(0+128),w
  3449  0657  00F5               	movwf	___lldiv@dividend+1
  3450  0658  082E               	movf	sprintf@val^(0+128),w
  3451  0659  00F4               	movwf	___lldiv@dividend
  3452  065A  120A  158A  200A  120A  118A  	fcall	___lldiv
  3453  065F  0873               	movf	?___lldiv+3,w
  3454  0660  1683               	bsf	3,5	;RP0=1, select bank1
  3455  0661  1303               	bcf	3,6	;RP1=0, select bank1
  3456  0662  00AD               	movwf	(sprintf@tmpval+3)^(0+128)
  3457  0663  0872               	movf	?___lldiv+2,w
  3458  0664  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  3459  0665  0871               	movf	?___lldiv+1,w
  3460  0666  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  3461  0667  0870               	movf	?___lldiv,w
  3462  0668  00AA               	movwf	sprintf@tmpval^(0+128)
  3463                           
  3464                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3465  0669  3000               	movlw	0
  3466  066A  1283               	bcf	3,5	;RP0=0, select bank0
  3467  066B  1303               	bcf	3,6	;RP1=0, select bank0
  3468  066C  00A3               	movwf	___llmod@divisor+3
  3469  066D  3000               	movlw	0
  3470  066E  00A2               	movwf	___llmod@divisor+2
  3471  066F  3000               	movlw	0
  3472  0670  00A1               	movwf	___llmod@divisor+1
  3473  0671  300A               	movlw	10
  3474  0672  00A0               	movwf	___llmod@divisor
  3475  0673  1683               	bsf	3,5	;RP0=1, select bank1
  3476  0674  1303               	bcf	3,6	;RP1=0, select bank1
  3477  0675  082D               	movf	(sprintf@tmpval+3)^(0+128),w
  3478  0676  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0677  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0678  00A7               	movwf	___llmod@dividend+3
  3481  0679  1683               	bsf	3,5	;RP0=1, select bank1
  3482  067A  1303               	bcf	3,6	;RP1=0, select bank1
  3483  067B  082C               	movf	(sprintf@tmpval+2)^(0+128),w
  3484  067C  1283               	bcf	3,5	;RP0=0, select bank0
  3485  067D  1303               	bcf	3,6	;RP1=0, select bank0
  3486  067E  00A6               	movwf	___llmod@dividend+2
  3487  067F  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0680  1303               	bcf	3,6	;RP1=0, select bank1
  3489  0681  082B               	movf	(sprintf@tmpval+1)^(0+128),w
  3490  0682  1283               	bcf	3,5	;RP0=0, select bank0
  3491  0683  1303               	bcf	3,6	;RP1=0, select bank0
  3492  0684  00A5               	movwf	___llmod@dividend+1
  3493  0685  1683               	bsf	3,5	;RP0=1, select bank1
  3494  0686  1303               	bcf	3,6	;RP1=0, select bank1
  3495  0687  082A               	movf	sprintf@tmpval^(0+128),w
  3496  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3498  068A  00A4               	movwf	___llmod@dividend
  3499  068B  160A  158A  26AB  120A  118A  	fcall	___llmod
  3500  0690  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0691  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0692  0823               	movf	?___llmod+3,w
  3503  0693  1683               	bsf	3,5	;RP0=1, select bank1
  3504  0694  1303               	bcf	3,6	;RP1=0, select bank1
  3505  0695  00AD               	movwf	(sprintf@tmpval+3)^(0+128)
  3506  0696  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0697  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0698  0822               	movf	?___llmod+2,w
  3509  0699  1683               	bsf	3,5	;RP0=1, select bank1
  3510  069A  1303               	bcf	3,6	;RP1=0, select bank1
  3511  069B  00AC               	movwf	(sprintf@tmpval+2)^(0+128)
  3512  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3513  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3514  069E  0821               	movf	?___llmod+1,w
  3515  069F  1683               	bsf	3,5	;RP0=1, select bank1
  3516  06A0  1303               	bcf	3,6	;RP1=0, select bank1
  3517  06A1  00AB               	movwf	(sprintf@tmpval+1)^(0+128)
  3518  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  3519  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  3520  06A4  0820               	movf	?___llmod,w
  3521  06A5  1683               	bsf	3,5	;RP0=1, select bank1
  3522  06A6  1303               	bcf	3,6	;RP1=0, select bank1
  3523  06A7  00AA               	movwf	sprintf@tmpval^(0+128)
  3524                           
  3525                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3526  06A8  082A               	movf	sprintf@tmpval^(0+128),w
  3527  06A9  3E30               	addlw	48
  3528  06AA  00A0               	movwf	??_sprintf^(0+128)
  3529  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3530  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  3531  06AD  0863               	movf	sprintf@sp,w
  3532  06AE  0084               	movwf	4
  3533  06AF  1783               	bsf	3,7
  3534  06B0  1C64               	btfss	sprintf@sp+1,0
  3535  06B1  1383               	bcf	3,7
  3536  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  3537  06B3  1303               	bcf	3,6	;RP1=0, select bank1
  3538  06B4  0820               	movf	??_sprintf^(0+128),w
  3539  06B5  0080               	movwf	0
  3540  06B6  3001               	movlw	1
  3541  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3542  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3543  06B9  07E3               	addwf	sprintf@sp,f
  3544  06BA  1803               	skipnc
  3545  06BB  0AE4               	incf	sprintf@sp+1,f
  3546  06BC  3000               	movlw	0
  3547  06BD  07E4               	addwf	sprintf@sp+1,f
  3548                           
  3549                           ;doprnt.c: 1232: val %= dpowers[c];
  3550  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  3551  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  3552  06C0  083D               	movf	sprintf@c^(0+128),w
  3553  06C1  00A0               	movwf	??_sprintf^(0+128)
  3554  06C2  3001               	movlw	1
  3555  06C3                     u4585:	
  3556  06C3  1003               	clrc
  3557  06C4  0DA0               	rlf	??_sprintf^(0+128),f
  3558  06C5  3EFF               	addlw	-1
  3559  06C6  1D03               	skipz
  3560  06C7  2EC3               	goto	u4585
  3561  06C8  1003               	clrc
  3562  06C9  0D20               	rlf	??_sprintf^(0+128),w
  3563  06CA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3564  06CB  0084               	movwf	4
  3565  06CC  160A  118A  2000  120A  118A  	fcall	stringdir
  3566  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  3567  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  3568  06D3  00A0               	movwf	___llmod@divisor
  3569  06D4  160A  118A  2000  120A  118A  	fcall	stringdir
  3570  06D9  00A1               	movwf	___llmod@divisor+1
  3571  06DA  160A  118A  2000  120A  118A  	fcall	stringdir
  3572  06DF  00A2               	movwf	___llmod@divisor+2
  3573  06E0  160A  118A  2000  120A  118A  	fcall	stringdir
  3574  06E5  00A3               	movwf	___llmod@divisor+3
  3575  06E6  1683               	bsf	3,5	;RP0=1, select bank1
  3576  06E7  1303               	bcf	3,6	;RP1=0, select bank1
  3577  06E8  0831               	movf	(sprintf@val+3)^(0+128),w
  3578  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  3579  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  3580  06EB  00A7               	movwf	___llmod@dividend+3
  3581  06EC  1683               	bsf	3,5	;RP0=1, select bank1
  3582  06ED  1303               	bcf	3,6	;RP1=0, select bank1
  3583  06EE  0830               	movf	(sprintf@val+2)^(0+128),w
  3584  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  3585  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  3586  06F1  00A6               	movwf	___llmod@dividend+2
  3587  06F2  1683               	bsf	3,5	;RP0=1, select bank1
  3588  06F3  1303               	bcf	3,6	;RP1=0, select bank1
  3589  06F4  082F               	movf	(sprintf@val+1)^(0+128),w
  3590  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  3591  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  3592  06F7  00A5               	movwf	___llmod@dividend+1
  3593  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  3594  06F9  1303               	bcf	3,6	;RP1=0, select bank1
  3595  06FA  082E               	movf	sprintf@val^(0+128),w
  3596  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  3597  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  3598  06FD  00A4               	movwf	___llmod@dividend
  3599  06FE  160A  158A  26AB  120A  118A  	fcall	___llmod
  3600  0703  1283               	bcf	3,5	;RP0=0, select bank0
  3601  0704  1303               	bcf	3,6	;RP1=0, select bank0
  3602  0705  0823               	movf	?___llmod+3,w
  3603  0706  1683               	bsf	3,5	;RP0=1, select bank1
  3604  0707  1303               	bcf	3,6	;RP1=0, select bank1
  3605  0708  00B1               	movwf	(sprintf@val+3)^(0+128)
  3606  0709  1283               	bcf	3,5	;RP0=0, select bank0
  3607  070A  1303               	bcf	3,6	;RP1=0, select bank0
  3608  070B  0822               	movf	?___llmod+2,w
  3609  070C  1683               	bsf	3,5	;RP0=1, select bank1
  3610  070D  1303               	bcf	3,6	;RP1=0, select bank1
  3611  070E  00B0               	movwf	(sprintf@val+2)^(0+128)
  3612  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3613  0710  1303               	bcf	3,6	;RP1=0, select bank0
  3614  0711  0821               	movf	?___llmod+1,w
  3615  0712  1683               	bsf	3,5	;RP0=1, select bank1
  3616  0713  1303               	bcf	3,6	;RP1=0, select bank1
  3617  0714  00AF               	movwf	(sprintf@val+1)^(0+128)
  3618  0715  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0716  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0717  0820               	movf	?___llmod,w
  3621  0718  2E24               	goto	L5
  3622  0719                     l3036:	
  3623                           ;doprnt.c: 1233: }
  3624                           ;doprnt.c: 1235: while(prec) {
  3625                           
  3626                           
  3627                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3628  0719  3030               	movlw	48
  3629  071A  00A0               	movwf	??_sprintf^(0+128)
  3630  071B  1283               	bcf	3,5	;RP0=0, select bank0
  3631  071C  1303               	bcf	3,6	;RP1=0, select bank0
  3632  071D  0863               	movf	sprintf@sp,w
  3633  071E  0084               	movwf	4
  3634  071F  1783               	bsf	3,7
  3635  0720  1C64               	btfss	sprintf@sp+1,0
  3636  0721  1383               	bcf	3,7
  3637  0722  1683               	bsf	3,5	;RP0=1, select bank1
  3638  0723  1303               	bcf	3,6	;RP1=0, select bank1
  3639  0724  0820               	movf	??_sprintf^(0+128),w
  3640  0725  0080               	movwf	0
  3641  0726  3001               	movlw	1
  3642  0727  1283               	bcf	3,5	;RP0=0, select bank0
  3643  0728  1303               	bcf	3,6	;RP1=0, select bank0
  3644  0729  07E3               	addwf	sprintf@sp,f
  3645  072A  1803               	skipnc
  3646  072B  0AE4               	incf	sprintf@sp+1,f
  3647  072C  3000               	movlw	0
  3648  072D  07E4               	addwf	sprintf@sp+1,f
  3649                           
  3650                           ;doprnt.c: 1237: prec--;
  3651  072E  30FF               	movlw	255
  3652  072F  1683               	bsf	3,5	;RP0=1, select bank1
  3653  0730  1303               	bcf	3,6	;RP1=0, select bank1
  3654  0731  07BB               	addwf	sprintf@prec^(0+128),f
  3655  0732  1803               	skipnc
  3656  0733  0ABC               	incf	(sprintf@prec+1)^(0+128),f
  3657  0734  30FF               	movlw	255
  3658  0735  07BC               	addwf	(sprintf@prec+1)^(0+128),f
  3659  0736                     l3042:	
  3660  0736  083B               	movf	sprintf@prec^(0+128),w
  3661  0737  043C               	iorwf	(sprintf@prec+1)^(0+128),w
  3662  0738  1903               	btfsc	3,2
  3663  0739  282C               	goto	l3136
  3664  073A  2F19               	goto	l3036
  3665  073B                     l3044:	
  3666                           ;doprnt.c: 1238: }
  3667                           ;doprnt.c: 1245: continue;
  3668                           
  3669                           
  3670                           ;doprnt.c: 1246: }
  3671                           ;doprnt.c: 1253: {
  3672                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3673  073B  0829               	movf	sprintf@ap^(0+128),w
  3674  073C  0084               	movwf	4
  3675  073D  1383               	bcf	3,7	;select IRP bank0
  3676  073E  0800               	movf	0,w
  3677  073F  00A0               	movwf	??_sprintf^(0+128)
  3678  0740  0A84               	incf	4,f
  3679  0741  0800               	movf	0,w
  3680  0742  00A1               	movwf	(??_sprintf^(0+128)+1)
  3681  0743  0820               	movf	??_sprintf^(0+128),w
  3682  0744  00AE               	movwf	sprintf@val^(0+128)
  3683  0745  0821               	movf	(??_sprintf+1)^(0+128),w
  3684  0746  00AF               	movwf	(sprintf@val+1)^(0+128)
  3685  0747  3000               	movlw	0
  3686  0748  1BAF               	btfsc	(sprintf@val+1)^(0+128),7
  3687  0749  30FF               	movlw	255
  3688  074A  00B0               	movwf	(sprintf@val+2)^(0+128)
  3689  074B  00B1               	movwf	(sprintf@val+3)^(0+128)
  3690  074C  3002               	movlw	2
  3691  074D  00A0               	movwf	??_sprintf^(0+128)
  3692  074E  0820               	movf	??_sprintf^(0+128),w
  3693  074F  07A9               	addwf	sprintf@ap^(0+128),f
  3694                           
  3695                           ;doprnt.c: 1261: if((long)val < 0) {
  3696  0750  1FB1               	btfss	(sprintf@val+3)^(0+128),7
  3697  0751  2F61               	goto	l3054
  3698                           
  3699                           ;doprnt.c: 1262: flag |= 0x03;
  3700  0752  3003               	movlw	3
  3701  0753  04B4               	iorwf	sprintf@flag^(0+128),f
  3702  0754  3000               	movlw	0
  3703  0755  04B5               	iorwf	(sprintf@flag+1)^(0+128),f
  3704                           
  3705                           ;doprnt.c: 1263: val = -val;
  3706  0756  09AE               	comf	sprintf@val^(0+128),f
  3707  0757  09AF               	comf	(sprintf@val+1)^(0+128),f
  3708  0758  09B0               	comf	(sprintf@val+2)^(0+128),f
  3709  0759  09B1               	comf	(sprintf@val+3)^(0+128),f
  3710  075A  0AAE               	incf	sprintf@val^(0+128),f
  3711  075B  1903               	skipnz
  3712  075C  0AAF               	incf	(sprintf@val+1)^(0+128),f
  3713  075D  1903               	skipnz
  3714  075E  0AB0               	incf	(sprintf@val+2)^(0+128),f
  3715  075F  1903               	skipnz
  3716  0760  0AB1               	incf	(sprintf@val+3)^(0+128),f
  3717  0761                     l3054:	
  3718                           
  3719                           ;doprnt.c: 1264: }
  3720                           ;doprnt.c: 1266: }
  3721                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3722  0761  083B               	movf	sprintf@prec^(0+128),w
  3723  0762  043C               	iorwf	(sprintf@prec+1)^(0+128),w
  3724  0763  1D03               	btfss	3,2
  3725  0764  2F71               	goto	l3060
  3726  0765  0831               	movf	(sprintf@val+3)^(0+128),w
  3727  0766  0430               	iorwf	(sprintf@val+2)^(0+128),w
  3728  0767  042F               	iorwf	(sprintf@val+1)^(0+128),w
  3729  0768  042E               	iorwf	sprintf@val^(0+128),w
  3730  0769  1D03               	skipz
  3731  076A  2F71               	goto	l3060
  3732                           
  3733                           ;doprnt.c: 1291: prec++;
  3734  076B  3001               	movlw	1
  3735  076C  07BB               	addwf	sprintf@prec^(0+128),f
  3736  076D  1803               	skipnc
  3737  076E  0ABC               	incf	(sprintf@prec+1)^(0+128),f
  3738  076F  3000               	movlw	0
  3739  0770  07BC               	addwf	(sprintf@prec+1)^(0+128),f
  3740  0771                     l3060:	
  3741                           
  3742                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3743  0771  01BD               	clrf	sprintf@c^(0+128)
  3744  0772  0ABD               	incf	sprintf@c^(0+128),f
  3745  0773  300A               	movlw	10
  3746  0774  063D               	xorwf	sprintf@c^(0+128),w
  3747  0775  1903               	btfsc	3,2
  3748  0776  2FB3               	goto	l3072
  3749  0777                     l3066:	
  3750                           
  3751                           ;doprnt.c: 1306: if(val < dpowers[c])
  3752  0777  083D               	movf	sprintf@c^(0+128),w
  3753  0778  00A0               	movwf	??_sprintf^(0+128)
  3754  0779  3001               	movlw	1
  3755  077A                     u4655:	
  3756  077A  1003               	clrc
  3757  077B  0DA0               	rlf	??_sprintf^(0+128),f
  3758  077C  3EFF               	addlw	-1
  3759  077D  1D03               	skipz
  3760  077E  2F7A               	goto	u4655
  3761  077F  1003               	clrc
  3762  0780  0D20               	rlf	??_sprintf^(0+128),w
  3763  0781  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3764  0782  0084               	movwf	4
  3765  0783  160A  118A  2000  120A  118A  	fcall	stringdir
  3766  0788  00A1               	movwf	(??_sprintf+1)^(0+128)
  3767  0789  160A  118A  2000  120A  118A  	fcall	stringdir
  3768  078E  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  3769  078F  160A  118A  2000  120A  118A  	fcall	stringdir
  3770  0794  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  3771  0795  160A  118A  2000  120A  118A  	fcall	stringdir
  3772  079A  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  3773  079B  0824               	movf	(??_sprintf+4)^(0+128),w
  3774  079C  0231               	subwf	(sprintf@val+3)^(0+128),w
  3775  079D  1D03               	skipz
  3776  079E  2FA9               	goto	u4665
  3777  079F  0823               	movf	(??_sprintf+3)^(0+128),w
  3778  07A0  0230               	subwf	(sprintf@val+2)^(0+128),w
  3779  07A1  1D03               	skipz
  3780  07A2  2FA9               	goto	u4665
  3781  07A3  0822               	movf	(??_sprintf+2)^(0+128),w
  3782  07A4  022F               	subwf	(sprintf@val+1)^(0+128),w
  3783  07A5  1D03               	skipz
  3784  07A6  2FA9               	goto	u4665
  3785  07A7  0821               	movf	(??_sprintf+1)^(0+128),w
  3786  07A8  022E               	subwf	sprintf@val^(0+128),w
  3787  07A9                     u4665:	
  3788  07A9  1C03               	btfss	3,0
  3789  07AA  2FB3               	goto	l3072
  3790                           
  3791                           ;doprnt.c: 1307: break;
  3792  07AB  3001               	movlw	1
  3793  07AC  00A0               	movwf	??_sprintf^(0+128)
  3794  07AD  0820               	movf	??_sprintf^(0+128),w
  3795  07AE  07BD               	addwf	sprintf@c^(0+128),f
  3796  07AF  300A               	movlw	10
  3797  07B0  063D               	xorwf	sprintf@c^(0+128),w
  3798  07B1  1D03               	btfss	3,2
  3799  07B2  2F77               	goto	l3066
  3800  07B3                     l3072:	
  3801                           
  3802                           ;doprnt.c: 1339: if(c < prec)
  3803  07B3  083D               	movf	sprintf@c^(0+128),w
  3804  07B4  00A0               	movwf	??_sprintf^(0+128)
  3805  07B5  01A1               	clrf	(??_sprintf^(0+128)+1)
  3806  07B6  1BA0               	btfsc	??_sprintf^(0+128),7
  3807  07B7  03A1               	decf	(??_sprintf^(0+128)+1),f
  3808  07B8  0821               	movf	(??_sprintf+1)^(0+128),w
  3809  07B9  3A80               	xorlw	128
  3810  07BA  00A2               	movwf	(??_sprintf+2)^(0+128)
  3811  07BB  083C               	movf	(sprintf@prec+1)^(0+128),w
  3812  07BC  3A80               	xorlw	128
  3813  07BD  0222               	subwf	(??_sprintf+2)^(0+128),w
  3814  07BE  1D03               	skipz
  3815  07BF  2FC2               	goto	u4685
  3816  07C0  083B               	movf	sprintf@prec^(0+128),w
  3817  07C1  0220               	subwf	??_sprintf^(0+128),w
  3818  07C2                     u4685:	
  3819  07C2  120A  158A  1803   	skipnc
  3820  07C5  2868               	goto	l3076
  3821                           
  3822                           ;doprnt.c: 1340: c = prec;
  3823  07C6  1683               	bsf	3,5	;RP0=1, select bank1
  3824  07C7  1303               	bcf	3,6	;RP1=0, select bank1
  3825  07C8  083B               	movf	sprintf@prec^(0+128),w
  3826  07C9  00A0               	movwf	??_sprintf^(0+128)
  3827  07CA  0820               	movf	??_sprintf^(0+128),w
  3828  07CB  00BD               	movwf	sprintf@c^(0+128)
  3829  07CC  120A  158A  2882   	goto	l267
  3830  07CF                     L11:	
  3831  07CF                     L10:	
  3832  07CF  120A  158A  29C2   	ljmp	l3138
  3833                           
  3834                           	psect	text2
  3835  0D65                     __ptext2:	
  3836 ;; *************** function _scale *****************
  3837 ;; Defined at:
  3838 ;;		line 425 in file "E:\software\pic\XC8\sources\common\doprnt.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  scl             1    wreg     char 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  scl             1   40[BANK0 ] char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  3   32[BANK0 ] char 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3852 ;;      Params:         0       3       0       0       0
  3853 ;;      Locals:         0       4       0       0       0
  3854 ;;      Temps:          0       2       0       0       0
  3855 ;;      Totals:         0       9       0       0       0
  3856 ;;Total ram usage:        9 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    2
  3859 ;; This function calls:
  3860 ;;		___awdiv
  3861 ;;		___awmod
  3862 ;;		___bmul
  3863 ;;		___ftmul
  3864 ;; This function is called by:
  3865 ;;		_sprintf
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _scale
  3871  0D65                     _scale:	
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3875                           ;scale@scl stored from wreg
  3876  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  3877  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  3878  0D67  00C8               	movwf	scale@scl
  3879                           
  3880                           ;doprnt.c: 428: if(scl < 0) {
  3881  0D68  1FC8               	btfss	scale@scl,7
  3882  0D69  2EB6               	goto	l2508
  3883                           
  3884                           ;doprnt.c: 429: scl = -scl;
  3885  0D6A  09C8               	comf	scale@scl,f
  3886  0D6B  0AC8               	incf	scale@scl,f
  3887                           
  3888                           ;doprnt.c: 430: if(scl>=110)
  3889  0D6C  0848               	movf	scale@scl,w
  3890  0D6D  3A80               	xorlw	128
  3891  0D6E  3E12               	addlw	-238
  3892  0D6F  1C03               	skipc
  3893  0D70  2E29               	goto	l2498
  3894                           
  3895                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3896  0D71  3003               	movlw	3
  3897  0D72  00C3               	movwf	??_scale
  3898  0D73  0843               	movf	??_scale,w
  3899  0D74  00A4               	movwf	___bmul@multiplicand
  3900  0D75  300A               	movlw	10
  3901  0D76  00F7               	movwf	___awdiv@divisor
  3902  0D77  3000               	movlw	0
  3903  0D78  00F8               	movwf	___awdiv@divisor+1
  3904  0D79  0848               	movf	scale@scl,w
  3905  0D7A  00F2               	movwf	___awmod@dividend
  3906  0D7B  01F3               	clrf	___awmod@dividend+1
  3907  0D7C  1BF2               	btfsc	___awmod@dividend,7
  3908  0D7D  03F3               	decf	___awmod@dividend+1,f
  3909  0D7E  3064               	movlw	100
  3910  0D7F  00F0               	movwf	___awmod@divisor
  3911  0D80  3000               	movlw	0
  3912  0D81  00F1               	movwf	___awmod@divisor+1
  3913  0D82  160A  158A  2660  120A  158A  	fcall	___awmod
  3914  0D87  0871               	movf	?___awmod+1,w
  3915  0D88  00FA               	movwf	___awdiv@dividend+1
  3916  0D89  0870               	movf	?___awmod,w
  3917  0D8A  00F9               	movwf	___awdiv@dividend
  3918  0D8B  160A  158A  27A5  120A  158A  	fcall	___awdiv
  3919  0D90  0877               	movf	?___awdiv,w
  3920  0D91  3E09               	addlw	9
  3921  0D92  160A  158A  24BC  120A  158A  	fcall	___bmul
  3922  0D97  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3923  0D98  0084               	movwf	4
  3924  0D99  160A  118A  2000  120A  158A  	fcall	stringdir
  3925  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3927  0DA0  00B0               	movwf	___ftmul@f1
  3928  0DA1  160A  118A  2000  120A  158A  	fcall	stringdir
  3929  0DA6  00B1               	movwf	___ftmul@f1+1
  3930  0DA7  160A  118A  2000  120A  158A  	fcall	stringdir
  3931  0DAC  00B2               	movwf	___ftmul@f1+2
  3932  0DAD  3003               	movlw	3
  3933  0DAE  00C4               	movwf	??_scale+1
  3934  0DAF  0844               	movf	??_scale+1,w
  3935  0DB0  00A4               	movwf	___bmul@multiplicand
  3936  0DB1  3064               	movlw	100
  3937  0DB2  00F7               	movwf	___awdiv@divisor
  3938  0DB3  3000               	movlw	0
  3939  0DB4  00F8               	movwf	___awdiv@divisor+1
  3940  0DB5  0848               	movf	scale@scl,w
  3941  0DB6  00F9               	movwf	___awdiv@dividend
  3942  0DB7  01FA               	clrf	___awdiv@dividend+1
  3943  0DB8  1BF9               	btfsc	___awdiv@dividend,7
  3944  0DB9  03FA               	decf	___awdiv@dividend+1,f
  3945  0DBA  160A  158A  27A5  120A  158A  	fcall	___awdiv
  3946  0DBF  0877               	movf	?___awdiv,w
  3947  0DC0  3E12               	addlw	18
  3948  0DC1  160A  158A  24BC  120A  158A  	fcall	___bmul
  3949  0DC6  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3950  0DC7  0084               	movwf	4
  3951  0DC8  160A  118A  2000  120A  158A  	fcall	stringdir
  3952  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0DCF  00B3               	movwf	___ftmul@f2
  3955  0DD0  160A  118A  2000  120A  158A  	fcall	stringdir
  3956  0DD5  00B4               	movwf	___ftmul@f2+1
  3957  0DD6  160A  118A  2000  120A  158A  	fcall	stringdir
  3958  0DDB  00B5               	movwf	___ftmul@f2+2
  3959  0DDC  160A  118A  24F2  120A  158A  	fcall	___ftmul
  3960  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  3961  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  3962  0DE3  0830               	movf	?___ftmul,w
  3963  0DE4  00C5               	movwf	_scale$850
  3964  0DE5  0831               	movf	?___ftmul+1,w
  3965  0DE6  00C6               	movwf	_scale$850+1
  3966  0DE7  0832               	movf	?___ftmul+2,w
  3967  0DE8  00C7               	movwf	_scale$850+2
  3968                           
  3969                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3970  0DE9  3003               	movlw	3
  3971  0DEA  00C3               	movwf	??_scale
  3972  0DEB  0843               	movf	??_scale,w
  3973  0DEC  00A4               	movwf	___bmul@multiplicand
  3974  0DED  0848               	movf	scale@scl,w
  3975  0DEE  00F2               	movwf	___awmod@dividend
  3976  0DEF  01F3               	clrf	___awmod@dividend+1
  3977  0DF0  1BF2               	btfsc	___awmod@dividend,7
  3978  0DF1  03F3               	decf	___awmod@dividend+1,f
  3979  0DF2  300A               	movlw	10
  3980  0DF3  00F0               	movwf	___awmod@divisor
  3981  0DF4  3000               	movlw	0
  3982  0DF5  00F1               	movwf	___awmod@divisor+1
  3983  0DF6  160A  158A  2660  120A  158A  	fcall	___awmod
  3984  0DFB  0870               	movf	?___awmod,w
  3985  0DFC  160A  158A  24BC  120A  158A  	fcall	___bmul
  3986  0E01  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3987  0E02  0084               	movwf	4
  3988  0E03  160A  118A  2000  120A  158A  	fcall	stringdir
  3989  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  3990  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  3991  0E0A  00B0               	movwf	___ftmul@f1
  3992  0E0B  160A  118A  2000  120A  158A  	fcall	stringdir
  3993  0E10  00B1               	movwf	___ftmul@f1+1
  3994  0E11  160A  118A  2000  120A  158A  	fcall	stringdir
  3995  0E16  00B2               	movwf	___ftmul@f1+2
  3996  0E17  0845               	movf	_scale$850,w
  3997  0E18  00B3               	movwf	___ftmul@f2
  3998  0E19  0846               	movf	_scale$850+1,w
  3999  0E1A  00B4               	movwf	___ftmul@f2+1
  4000  0E1B  0847               	movf	_scale$850+2,w
  4001  0E1C  00B5               	movwf	___ftmul@f2+2
  4002  0E1D  160A  118A  24F2   	fcall	___ftmul
  4003  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  4004  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  4005  0E22  0830               	movf	?___ftmul,w
  4006  0E23  00C0               	movwf	?_scale
  4007  0E24  0831               	movf	?___ftmul+1,w
  4008  0E25  00C1               	movwf	?_scale+1
  4009  0E26  0832               	movf	?___ftmul+2,w
  4010  0E27  00C2               	movwf	?_scale+2
  4011  0E28  0008               	return
  4012  0E29                     l2498:	
  4013                           
  4014                           ;doprnt.c: 432: else if(scl > 10)
  4015  0E29  0848               	movf	scale@scl,w
  4016  0E2A  3A80               	xorlw	128
  4017  0E2B  3E75               	addlw	-139
  4018  0E2C  1C03               	skipc
  4019  0E2D  2E97               	goto	l2504
  4020                           
  4021                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4022  0E2E  3003               	movlw	3
  4023  0E2F  00C3               	movwf	??_scale
  4024  0E30  0843               	movf	??_scale,w
  4025  0E31  00A4               	movwf	___bmul@multiplicand
  4026  0E32  0848               	movf	scale@scl,w
  4027  0E33  00F2               	movwf	___awmod@dividend
  4028  0E34  01F3               	clrf	___awmod@dividend+1
  4029  0E35  1BF2               	btfsc	___awmod@dividend,7
  4030  0E36  03F3               	decf	___awmod@dividend+1,f
  4031  0E37  300A               	movlw	10
  4032  0E38  00F0               	movwf	___awmod@divisor
  4033  0E39  3000               	movlw	0
  4034  0E3A  00F1               	movwf	___awmod@divisor+1
  4035  0E3B  160A  158A  2660  120A  158A  	fcall	___awmod
  4036  0E40  0870               	movf	?___awmod,w
  4037  0E41  160A  158A  24BC  120A  158A  	fcall	___bmul
  4038  0E46  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4039  0E47  0084               	movwf	4
  4040  0E48  160A  118A  2000  120A  158A  	fcall	stringdir
  4041  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  4042  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  4043  0E4F  00B0               	movwf	___ftmul@f1
  4044  0E50  160A  118A  2000  120A  158A  	fcall	stringdir
  4045  0E55  00B1               	movwf	___ftmul@f1+1
  4046  0E56  160A  118A  2000  120A  158A  	fcall	stringdir
  4047  0E5B  00B2               	movwf	___ftmul@f1+2
  4048  0E5C  3003               	movlw	3
  4049  0E5D  00C4               	movwf	??_scale+1
  4050  0E5E  0844               	movf	??_scale+1,w
  4051  0E5F  00A4               	movwf	___bmul@multiplicand
  4052  0E60  300A               	movlw	10
  4053  0E61  00F7               	movwf	___awdiv@divisor
  4054  0E62  3000               	movlw	0
  4055  0E63  00F8               	movwf	___awdiv@divisor+1
  4056  0E64  0848               	movf	scale@scl,w
  4057  0E65  00F9               	movwf	___awdiv@dividend
  4058  0E66  01FA               	clrf	___awdiv@dividend+1
  4059  0E67  1BF9               	btfsc	___awdiv@dividend,7
  4060  0E68  03FA               	decf	___awdiv@dividend+1,f
  4061  0E69  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4062  0E6E  0877               	movf	?___awdiv,w
  4063  0E6F  3E09               	addlw	9
  4064  0E70  160A  158A  24BC  120A  158A  	fcall	___bmul
  4065  0E75  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4066  0E76  0084               	movwf	4
  4067  0E77  160A  118A  2000  120A  158A  	fcall	stringdir
  4068  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  4069  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  4070  0E7E  00B3               	movwf	___ftmul@f2
  4071  0E7F  160A  118A  2000  120A  158A  	fcall	stringdir
  4072  0E84  00B4               	movwf	___ftmul@f2+1
  4073  0E85  160A  118A  2000  120A  158A  	fcall	stringdir
  4074  0E8A  00B5               	movwf	___ftmul@f2+2
  4075  0E8B  160A  118A  24F2   	fcall	___ftmul
  4076  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0E90  0830               	movf	?___ftmul,w
  4079  0E91  00C0               	movwf	?_scale
  4080  0E92  0831               	movf	?___ftmul+1,w
  4081  0E93  00C1               	movwf	?_scale+1
  4082  0E94  0832               	movf	?___ftmul+2,w
  4083  0E95  00C2               	movwf	?_scale+2
  4084  0E96  0008               	return
  4085  0E97                     l2504:	
  4086                           
  4087                           ;doprnt.c: 434: return _npowers_[scl];
  4088  0E97  3003               	movlw	3
  4089  0E98  00C3               	movwf	??_scale
  4090  0E99  0843               	movf	??_scale,w
  4091  0E9A  00A4               	movwf	___bmul@multiplicand
  4092  0E9B  0848               	movf	scale@scl,w
  4093  0E9C  160A  158A  24BC  120A  158A  	fcall	___bmul
  4094  0EA1  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4095  0EA2  0084               	movwf	4
  4096  0EA3  160A  118A  2000  120A  158A  	fcall	stringdir
  4097  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  4098  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  4099  0EAA  00C0               	movwf	?_scale
  4100  0EAB  160A  118A  2000  120A  158A  	fcall	stringdir
  4101  0EB0  00C1               	movwf	?_scale+1
  4102  0EB1  160A  118A  2000   	fcall	stringdir
  4103  0EB4  00C2               	movwf	?_scale+2
  4104  0EB5  0008               	return
  4105  0EB6                     l2508:	
  4106                           
  4107                           ;doprnt.c: 435: }
  4108                           ;doprnt.c: 436: if(scl>=110)
  4109  0EB6  0848               	movf	scale@scl,w
  4110  0EB7  3A80               	xorlw	128
  4111  0EB8  3E12               	addlw	-238
  4112  0EB9  1C03               	skipc
  4113  0EBA  2F73               	goto	l2516
  4114                           
  4115                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4116  0EBB  3003               	movlw	3
  4117  0EBC  00C3               	movwf	??_scale
  4118  0EBD  0843               	movf	??_scale,w
  4119  0EBE  00A4               	movwf	___bmul@multiplicand
  4120  0EBF  300A               	movlw	10
  4121  0EC0  00F7               	movwf	___awdiv@divisor
  4122  0EC1  3000               	movlw	0
  4123  0EC2  00F8               	movwf	___awdiv@divisor+1
  4124  0EC3  0848               	movf	scale@scl,w
  4125  0EC4  00F2               	movwf	___awmod@dividend
  4126  0EC5  01F3               	clrf	___awmod@dividend+1
  4127  0EC6  1BF2               	btfsc	___awmod@dividend,7
  4128  0EC7  03F3               	decf	___awmod@dividend+1,f
  4129  0EC8  3064               	movlw	100
  4130  0EC9  00F0               	movwf	___awmod@divisor
  4131  0ECA  3000               	movlw	0
  4132  0ECB  00F1               	movwf	___awmod@divisor+1
  4133  0ECC  160A  158A  2660  120A  158A  	fcall	___awmod
  4134  0ED1  0871               	movf	?___awmod+1,w
  4135  0ED2  00FA               	movwf	___awdiv@dividend+1
  4136  0ED3  0870               	movf	?___awmod,w
  4137  0ED4  00F9               	movwf	___awdiv@dividend
  4138  0ED5  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4139  0EDA  0877               	movf	?___awdiv,w
  4140  0EDB  3E09               	addlw	9
  4141  0EDC  160A  158A  24BC  120A  158A  	fcall	___bmul
  4142  0EE1  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4143  0EE2  0084               	movwf	4
  4144  0EE3  160A  118A  2000  120A  158A  	fcall	stringdir
  4145  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  4146  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  4147  0EEA  00B0               	movwf	___ftmul@f1
  4148  0EEB  160A  118A  2000  120A  158A  	fcall	stringdir
  4149  0EF0  00B1               	movwf	___ftmul@f1+1
  4150  0EF1  160A  118A  2000  120A  158A  	fcall	stringdir
  4151  0EF6  00B2               	movwf	___ftmul@f1+2
  4152  0EF7  3003               	movlw	3
  4153  0EF8  00C4               	movwf	??_scale+1
  4154  0EF9  0844               	movf	??_scale+1,w
  4155  0EFA  00A4               	movwf	___bmul@multiplicand
  4156  0EFB  3064               	movlw	100
  4157  0EFC  00F7               	movwf	___awdiv@divisor
  4158  0EFD  3000               	movlw	0
  4159  0EFE  00F8               	movwf	___awdiv@divisor+1
  4160  0EFF  0848               	movf	scale@scl,w
  4161  0F00  00F9               	movwf	___awdiv@dividend
  4162  0F01  01FA               	clrf	___awdiv@dividend+1
  4163  0F02  1BF9               	btfsc	___awdiv@dividend,7
  4164  0F03  03FA               	decf	___awdiv@dividend+1,f
  4165  0F04  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4166  0F09  0877               	movf	?___awdiv,w
  4167  0F0A  3E12               	addlw	18
  4168  0F0B  160A  158A  24BC  120A  158A  	fcall	___bmul
  4169  0F10  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4170  0F11  0084               	movwf	4
  4171  0F12  160A  118A  2000  120A  158A  	fcall	stringdir
  4172  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  4173  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  4174  0F19  00B3               	movwf	___ftmul@f2
  4175  0F1A  160A  118A  2000  120A  158A  	fcall	stringdir
  4176  0F1F  00B4               	movwf	___ftmul@f2+1
  4177  0F20  160A  118A  2000  120A  158A  	fcall	stringdir
  4178  0F25  00B5               	movwf	___ftmul@f2+2
  4179  0F26  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4180  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  4181  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  4182  0F2D  0830               	movf	?___ftmul,w
  4183  0F2E  00C5               	movwf	_scale$850
  4184  0F2F  0831               	movf	?___ftmul+1,w
  4185  0F30  00C6               	movwf	_scale$850+1
  4186  0F31  0832               	movf	?___ftmul+2,w
  4187  0F32  00C7               	movwf	_scale$850+2
  4188                           
  4189                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4190  0F33  3003               	movlw	3
  4191  0F34  00C3               	movwf	??_scale
  4192  0F35  0843               	movf	??_scale,w
  4193  0F36  00A4               	movwf	___bmul@multiplicand
  4194  0F37  0848               	movf	scale@scl,w
  4195  0F38  00F2               	movwf	___awmod@dividend
  4196  0F39  01F3               	clrf	___awmod@dividend+1
  4197  0F3A  1BF2               	btfsc	___awmod@dividend,7
  4198  0F3B  03F3               	decf	___awmod@dividend+1,f
  4199  0F3C  300A               	movlw	10
  4200  0F3D  00F0               	movwf	___awmod@divisor
  4201  0F3E  3000               	movlw	0
  4202  0F3F  00F1               	movwf	___awmod@divisor+1
  4203  0F40  160A  158A  2660  120A  158A  	fcall	___awmod
  4204  0F45  0870               	movf	?___awmod,w
  4205  0F46  160A  158A  24BC  120A  158A  	fcall	___bmul
  4206  0F4B  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4207  0F4C  0084               	movwf	4
  4208  0F4D  160A  118A  2000  120A  158A  	fcall	stringdir
  4209  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  4211  0F54  00B0               	movwf	___ftmul@f1
  4212  0F55  160A  118A  2000  120A  158A  	fcall	stringdir
  4213  0F5A  00B1               	movwf	___ftmul@f1+1
  4214  0F5B  160A  118A  2000  120A  158A  	fcall	stringdir
  4215  0F60  00B2               	movwf	___ftmul@f1+2
  4216  0F61  0845               	movf	_scale$850,w
  4217  0F62  00B3               	movwf	___ftmul@f2
  4218  0F63  0846               	movf	_scale$850+1,w
  4219  0F64  00B4               	movwf	___ftmul@f2+1
  4220  0F65  0847               	movf	_scale$850+2,w
  4221  0F66  00B5               	movwf	___ftmul@f2+2
  4222  0F67  160A  118A  24F2   	fcall	___ftmul
  4223  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  4224  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  4225  0F6C  0830               	movf	?___ftmul,w
  4226  0F6D  00C0               	movwf	?_scale
  4227  0F6E  0831               	movf	?___ftmul+1,w
  4228  0F6F  00C1               	movwf	?_scale+1
  4229  0F70  0832               	movf	?___ftmul+2,w
  4230  0F71  00C2               	movwf	?_scale+2
  4231  0F72  0008               	return
  4232  0F73                     l2516:	
  4233                           
  4234                           ;doprnt.c: 438: else if(scl > 10)
  4235  0F73  0848               	movf	scale@scl,w
  4236  0F74  3A80               	xorlw	128
  4237  0F75  3E75               	addlw	-139
  4238  0F76  1C03               	skipc
  4239  0F77  2FE1               	goto	l2522
  4240                           
  4241                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4242  0F78  3003               	movlw	3
  4243  0F79  00C3               	movwf	??_scale
  4244  0F7A  0843               	movf	??_scale,w
  4245  0F7B  00A4               	movwf	___bmul@multiplicand
  4246  0F7C  0848               	movf	scale@scl,w
  4247  0F7D  00F2               	movwf	___awmod@dividend
  4248  0F7E  01F3               	clrf	___awmod@dividend+1
  4249  0F7F  1BF2               	btfsc	___awmod@dividend,7
  4250  0F80  03F3               	decf	___awmod@dividend+1,f
  4251  0F81  300A               	movlw	10
  4252  0F82  00F0               	movwf	___awmod@divisor
  4253  0F83  3000               	movlw	0
  4254  0F84  00F1               	movwf	___awmod@divisor+1
  4255  0F85  160A  158A  2660  120A  158A  	fcall	___awmod
  4256  0F8A  0870               	movf	?___awmod,w
  4257  0F8B  160A  158A  24BC  120A  158A  	fcall	___bmul
  4258  0F90  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4259  0F91  0084               	movwf	4
  4260  0F92  160A  118A  2000  120A  158A  	fcall	stringdir
  4261  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  4262  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  4263  0F99  00B0               	movwf	___ftmul@f1
  4264  0F9A  160A  118A  2000  120A  158A  	fcall	stringdir
  4265  0F9F  00B1               	movwf	___ftmul@f1+1
  4266  0FA0  160A  118A  2000  120A  158A  	fcall	stringdir
  4267  0FA5  00B2               	movwf	___ftmul@f1+2
  4268  0FA6  3003               	movlw	3
  4269  0FA7  00C4               	movwf	??_scale+1
  4270  0FA8  0844               	movf	??_scale+1,w
  4271  0FA9  00A4               	movwf	___bmul@multiplicand
  4272  0FAA  300A               	movlw	10
  4273  0FAB  00F7               	movwf	___awdiv@divisor
  4274  0FAC  3000               	movlw	0
  4275  0FAD  00F8               	movwf	___awdiv@divisor+1
  4276  0FAE  0848               	movf	scale@scl,w
  4277  0FAF  00F9               	movwf	___awdiv@dividend
  4278  0FB0  01FA               	clrf	___awdiv@dividend+1
  4279  0FB1  1BF9               	btfsc	___awdiv@dividend,7
  4280  0FB2  03FA               	decf	___awdiv@dividend+1,f
  4281  0FB3  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4282  0FB8  0877               	movf	?___awdiv,w
  4283  0FB9  3E09               	addlw	9
  4284  0FBA  160A  158A  24BC  120A  158A  	fcall	___bmul
  4285  0FBF  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4286  0FC0  0084               	movwf	4
  4287  0FC1  160A  118A  2000  120A  158A  	fcall	stringdir
  4288  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  4289  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  4290  0FC8  00B3               	movwf	___ftmul@f2
  4291  0FC9  160A  118A  2000  120A  158A  	fcall	stringdir
  4292  0FCE  00B4               	movwf	___ftmul@f2+1
  4293  0FCF  160A  118A  2000  120A  158A  	fcall	stringdir
  4294  0FD4  00B5               	movwf	___ftmul@f2+2
  4295  0FD5  160A  118A  24F2   	fcall	___ftmul
  4296  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  4297  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  4298  0FDA  0830               	movf	?___ftmul,w
  4299  0FDB  00C0               	movwf	?_scale
  4300  0FDC  0831               	movf	?___ftmul+1,w
  4301  0FDD  00C1               	movwf	?_scale+1
  4302  0FDE  0832               	movf	?___ftmul+2,w
  4303  0FDF  00C2               	movwf	?_scale+2
  4304  0FE0  0008               	return
  4305  0FE1                     l2522:	
  4306                           
  4307                           ;doprnt.c: 440: return _powers_[scl];
  4308  0FE1  3003               	movlw	3
  4309  0FE2  00C3               	movwf	??_scale
  4310  0FE3  0843               	movf	??_scale,w
  4311  0FE4  00A4               	movwf	___bmul@multiplicand
  4312  0FE5  0848               	movf	scale@scl,w
  4313  0FE6  160A  158A  24BC  120A  158A  	fcall	___bmul
  4314  0FEB  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4315  0FEC  0084               	movwf	4
  4316  0FED  160A  118A  2000  120A  158A  	fcall	stringdir
  4317  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  4318  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  4319  0FF4  00C0               	movwf	?_scale
  4320  0FF5  160A  118A  2000  120A  158A  	fcall	stringdir
  4321  0FFA  00C1               	movwf	?_scale+1
  4322  0FFB  160A  118A  2000   	fcall	stringdir
  4323  0FFE  00C2               	movwf	?_scale+2
  4324  0FFF  0008               	return
  4325  1000                     __end_of_scale:	
  4326                           
  4327                           	psect	text3
  4328  1C9F                     __ptext3:	
  4329 ;; *************** function _isdigit *****************
  4330 ;; Defined at:
  4331 ;;		line 8 in file "E:\software\pic\XC8\sources\common\isdigit.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  c               1    wreg     unsigned char 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  c               1    1[COMMON] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;		None               void
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4345 ;;      Params:         0       0       0       0       0
  4346 ;;      Locals:         2       0       0       0       0
  4347 ;;      Temps:          0       0       0       0       0
  4348 ;;      Totals:         2       0       0       0       0
  4349 ;;Total ram usage:        2 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_sprintf
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _isdigit
  4360  1C9F                     _isdigit:	
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4364                           ;isdigit@c stored from wreg
  4365  1C9F  00F1               	movwf	isdigit@c
  4366  1CA0  01F0               	clrf	_isdigit$624
  4367  1CA1  303A               	movlw	58
  4368  1CA2  0271               	subwf	isdigit@c,w
  4369  1CA3  1803               	skipnc
  4370  1CA4  2CAB               	goto	l2534
  4371  1CA5  3030               	movlw	48
  4372  1CA6  0271               	subwf	isdigit@c,w
  4373  1CA7  1C03               	skipc
  4374  1CA8  2CAB               	goto	l2534
  4375  1CA9  01F0               	clrf	_isdigit$624
  4376  1CAA  0AF0               	incf	_isdigit$624,f
  4377  1CAB                     l2534:	
  4378  1CAB  0C70               	rrf	_isdigit$624,w
  4379  1CAC  0008               	return
  4380  1CAD                     __end_of_isdigit:	
  4381                           
  4382                           	psect	text4
  4383  09CE                     __ptext4:	
  4384 ;; *************** function _fround *****************
  4385 ;; Defined at:
  4386 ;;		line 409 in file "E:\software\pic\XC8\sources\common\doprnt.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  prec            1    wreg     unsigned char 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  prec            1   47[BANK0 ] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  3   32[BANK0 ] unsigned char 
  4393 ;; Registers used:
  4394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4400 ;;      Params:         0       3       0       0       0
  4401 ;;      Locals:         0       7       0       0       0
  4402 ;;      Temps:          0       6       0       0       0
  4403 ;;      Totals:         0      16       0       0       0
  4404 ;;Total ram usage:       16 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    2
  4407 ;; This function calls:
  4408 ;;		___awdiv
  4409 ;;		___awmod
  4410 ;;		___bmul
  4411 ;;		___ftmul
  4412 ;; This function is called by:
  4413 ;;		_sprintf
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _fround
  4419  09CE                     _fround:	
  4420                           
  4421                           ;incstack = 0
  4422                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4423                           ;fround@prec stored from wreg
  4424  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  4425  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  4426  09D0  00CF               	movwf	fround@prec
  4427                           
  4428                           ;doprnt.c: 413: if(prec>=110)
  4429  09D1  306E               	movlw	110
  4430  09D2  024F               	subwf	fround@prec,w
  4431  09D3  1C03               	skipc
  4432  09D4  2AAC               	goto	l2474
  4433                           
  4434                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4435  09D5  3003               	movlw	3
  4436  09D6  00C3               	movwf	??_fround
  4437  09D7  0843               	movf	??_fround,w
  4438  09D8  00A4               	movwf	___bmul@multiplicand
  4439  09D9  300A               	movlw	10
  4440  09DA  00F7               	movwf	___awdiv@divisor
  4441  09DB  3000               	movlw	0
  4442  09DC  00F8               	movwf	___awdiv@divisor+1
  4443  09DD  084F               	movf	fround@prec,w
  4444  09DE  00C4               	movwf	??_fround+1
  4445  09DF  01C5               	clrf	??_fround+2
  4446  09E0  0844               	movf	??_fround+1,w
  4447  09E1  00F2               	movwf	___awmod@dividend
  4448  09E2  0845               	movf	??_fround+2,w
  4449  09E3  00F3               	movwf	___awmod@dividend+1
  4450  09E4  3064               	movlw	100
  4451  09E5  00F0               	movwf	___awmod@divisor
  4452  09E6  3000               	movlw	0
  4453  09E7  00F1               	movwf	___awmod@divisor+1
  4454  09E8  160A  158A  2660  120A  158A  	fcall	___awmod
  4455  09ED  0871               	movf	?___awmod+1,w
  4456  09EE  00FA               	movwf	___awdiv@dividend+1
  4457  09EF  0870               	movf	?___awmod,w
  4458  09F0  00F9               	movwf	___awdiv@dividend
  4459  09F1  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4460  09F6  0877               	movf	?___awdiv,w
  4461  09F7  3E09               	addlw	9
  4462  09F8  160A  158A  24BC  120A  158A  	fcall	___bmul
  4463  09FD  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4464  09FE  0084               	movwf	4
  4465  09FF  160A  118A  2000  120A  158A  	fcall	stringdir
  4466  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0A06  00B0               	movwf	___ftmul@f1
  4469  0A07  160A  118A  2000  120A  158A  	fcall	stringdir
  4470  0A0C  00B1               	movwf	___ftmul@f1+1
  4471  0A0D  160A  118A  2000  120A  158A  	fcall	stringdir
  4472  0A12  00B2               	movwf	___ftmul@f1+2
  4473  0A13  3003               	movlw	3
  4474  0A14  00C6               	movwf	??_fround+3
  4475  0A15  0846               	movf	??_fround+3,w
  4476  0A16  00A4               	movwf	___bmul@multiplicand
  4477  0A17  3064               	movlw	100
  4478  0A18  00F7               	movwf	___awdiv@divisor
  4479  0A19  3000               	movlw	0
  4480  0A1A  00F8               	movwf	___awdiv@divisor+1
  4481  0A1B  084F               	movf	fround@prec,w
  4482  0A1C  00C7               	movwf	??_fround+4
  4483  0A1D  01C8               	clrf	??_fround+5
  4484  0A1E  0847               	movf	??_fround+4,w
  4485  0A1F  00F9               	movwf	___awdiv@dividend
  4486  0A20  0848               	movf	??_fround+5,w
  4487  0A21  00FA               	movwf	___awdiv@dividend+1
  4488  0A22  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4489  0A27  0877               	movf	?___awdiv,w
  4490  0A28  3E12               	addlw	18
  4491  0A29  160A  158A  24BC  120A  158A  	fcall	___bmul
  4492  0A2E  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4493  0A2F  0084               	movwf	4
  4494  0A30  160A  118A  2000  120A  158A  	fcall	stringdir
  4495  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  4496  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  4497  0A37  00B3               	movwf	___ftmul@f2
  4498  0A38  160A  118A  2000  120A  158A  	fcall	stringdir
  4499  0A3D  00B4               	movwf	___ftmul@f2+1
  4500  0A3E  160A  118A  2000  120A  158A  	fcall	stringdir
  4501  0A43  00B5               	movwf	___ftmul@f2+2
  4502  0A44  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4503  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  4504  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  4505  0A4B  0830               	movf	?___ftmul,w
  4506  0A4C  00CC               	movwf	_fround$848
  4507  0A4D  0831               	movf	?___ftmul+1,w
  4508  0A4E  00CD               	movwf	_fround$848+1
  4509  0A4F  0832               	movf	?___ftmul+2,w
  4510  0A50  00CE               	movwf	_fround$848+2
  4511                           
  4512                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4513  0A51  3003               	movlw	3
  4514  0A52  00C3               	movwf	??_fround
  4515  0A53  0843               	movf	??_fround,w
  4516  0A54  00A4               	movwf	___bmul@multiplicand
  4517  0A55  084F               	movf	fround@prec,w
  4518  0A56  00C4               	movwf	??_fround+1
  4519  0A57  01C5               	clrf	??_fround+2
  4520  0A58  0844               	movf	??_fround+1,w
  4521  0A59  00F2               	movwf	___awmod@dividend
  4522  0A5A  0845               	movf	??_fround+2,w
  4523  0A5B  00F3               	movwf	___awmod@dividend+1
  4524  0A5C  300A               	movlw	10
  4525  0A5D  00F0               	movwf	___awmod@divisor
  4526  0A5E  3000               	movlw	0
  4527  0A5F  00F1               	movwf	___awmod@divisor+1
  4528  0A60  160A  158A  2660  120A  158A  	fcall	___awmod
  4529  0A65  0870               	movf	?___awmod,w
  4530  0A66  160A  158A  24BC  120A  158A  	fcall	___bmul
  4531  0A6B  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4532  0A6C  0084               	movwf	4
  4533  0A6D  160A  118A  2000  120A  158A  	fcall	stringdir
  4534  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  4535  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  4536  0A74  00B0               	movwf	___ftmul@f1
  4537  0A75  160A  118A  2000  120A  158A  	fcall	stringdir
  4538  0A7A  00B1               	movwf	___ftmul@f1+1
  4539  0A7B  160A  118A  2000  120A  158A  	fcall	stringdir
  4540  0A80  00B2               	movwf	___ftmul@f1+2
  4541  0A81  084C               	movf	_fround$848,w
  4542  0A82  00B3               	movwf	___ftmul@f2
  4543  0A83  084D               	movf	_fround$848+1,w
  4544  0A84  00B4               	movwf	___ftmul@f2+1
  4545  0A85  084E               	movf	_fround$848+2,w
  4546  0A86  00B5               	movwf	___ftmul@f2+2
  4547  0A87  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4548  0A8C  1283               	bcf	3,5	;RP0=0, select bank0
  4549  0A8D  1303               	bcf	3,6	;RP1=0, select bank0
  4550  0A8E  0830               	movf	?___ftmul,w
  4551  0A8F  00C9               	movwf	_fround$849
  4552  0A90  0831               	movf	?___ftmul+1,w
  4553  0A91  00CA               	movwf	_fround$849+1
  4554  0A92  0832               	movf	?___ftmul+2,w
  4555  0A93  00CB               	movwf	_fround$849+2
  4556                           
  4557                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4558  0A94  3000               	movlw	0
  4559  0A95  00B0               	movwf	___ftmul@f1
  4560  0A96  3000               	movlw	0
  4561  0A97  00B1               	movwf	___ftmul@f1+1
  4562  0A98  303F               	movlw	63
  4563  0A99  00B2               	movwf	___ftmul@f1+2
  4564  0A9A  0849               	movf	_fround$849,w
  4565  0A9B  00B3               	movwf	___ftmul@f2
  4566  0A9C  084A               	movf	_fround$849+1,w
  4567  0A9D  00B4               	movwf	___ftmul@f2+1
  4568  0A9E  084B               	movf	_fround$849+2,w
  4569  0A9F  00B5               	movwf	___ftmul@f2+2
  4570  0AA0  160A  118A  24F2   	fcall	___ftmul
  4571  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  4572  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  4573  0AA5  0830               	movf	?___ftmul,w
  4574  0AA6  00C0               	movwf	?_fround
  4575  0AA7  0831               	movf	?___ftmul+1,w
  4576  0AA8  00C1               	movwf	?_fround+1
  4577  0AA9  0832               	movf	?___ftmul+2,w
  4578  0AAA  00C2               	movwf	?_fround+2
  4579  0AAB  0008               	return
  4580  0AAC                     l2474:	
  4581                           
  4582                           ;doprnt.c: 415: else if(prec > 10)
  4583  0AAC  300B               	movlw	11
  4584  0AAD  024F               	subwf	fround@prec,w
  4585  0AAE  1C03               	skipc
  4586  0AAF  2B36               	goto	l2482
  4587                           
  4588                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4589  0AB0  3003               	movlw	3
  4590  0AB1  00C3               	movwf	??_fround
  4591  0AB2  0843               	movf	??_fround,w
  4592  0AB3  00A4               	movwf	___bmul@multiplicand
  4593  0AB4  084F               	movf	fround@prec,w
  4594  0AB5  00C4               	movwf	??_fround+1
  4595  0AB6  01C5               	clrf	??_fround+2
  4596  0AB7  0844               	movf	??_fround+1,w
  4597  0AB8  00F2               	movwf	___awmod@dividend
  4598  0AB9  0845               	movf	??_fround+2,w
  4599  0ABA  00F3               	movwf	___awmod@dividend+1
  4600  0ABB  300A               	movlw	10
  4601  0ABC  00F0               	movwf	___awmod@divisor
  4602  0ABD  3000               	movlw	0
  4603  0ABE  00F1               	movwf	___awmod@divisor+1
  4604  0ABF  160A  158A  2660  120A  158A  	fcall	___awmod
  4605  0AC4  0870               	movf	?___awmod,w
  4606  0AC5  160A  158A  24BC  120A  158A  	fcall	___bmul
  4607  0ACA  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4608  0ACB  0084               	movwf	4
  4609  0ACC  160A  118A  2000  120A  158A  	fcall	stringdir
  4610  0AD1  1283               	bcf	3,5	;RP0=0, select bank0
  4611  0AD2  1303               	bcf	3,6	;RP1=0, select bank0
  4612  0AD3  00B0               	movwf	___ftmul@f1
  4613  0AD4  160A  118A  2000  120A  158A  	fcall	stringdir
  4614  0AD9  00B1               	movwf	___ftmul@f1+1
  4615  0ADA  160A  118A  2000  120A  158A  	fcall	stringdir
  4616  0ADF  00B2               	movwf	___ftmul@f1+2
  4617  0AE0  3003               	movlw	3
  4618  0AE1  00C6               	movwf	??_fround+3
  4619  0AE2  0846               	movf	??_fround+3,w
  4620  0AE3  00A4               	movwf	___bmul@multiplicand
  4621  0AE4  300A               	movlw	10
  4622  0AE5  00F7               	movwf	___awdiv@divisor
  4623  0AE6  3000               	movlw	0
  4624  0AE7  00F8               	movwf	___awdiv@divisor+1
  4625  0AE8  084F               	movf	fround@prec,w
  4626  0AE9  00C7               	movwf	??_fround+4
  4627  0AEA  01C8               	clrf	??_fround+5
  4628  0AEB  0847               	movf	??_fround+4,w
  4629  0AEC  00F9               	movwf	___awdiv@dividend
  4630  0AED  0848               	movf	??_fround+5,w
  4631  0AEE  00FA               	movwf	___awdiv@dividend+1
  4632  0AEF  160A  158A  27A5  120A  158A  	fcall	___awdiv
  4633  0AF4  0877               	movf	?___awdiv,w
  4634  0AF5  3E09               	addlw	9
  4635  0AF6  160A  158A  24BC  120A  158A  	fcall	___bmul
  4636  0AFB  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4637  0AFC  0084               	movwf	4
  4638  0AFD  160A  118A  2000  120A  158A  	fcall	stringdir
  4639  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0B04  00B3               	movwf	___ftmul@f2
  4642  0B05  160A  118A  2000  120A  158A  	fcall	stringdir
  4643  0B0A  00B4               	movwf	___ftmul@f2+1
  4644  0B0B  160A  118A  2000  120A  158A  	fcall	stringdir
  4645  0B10  00B5               	movwf	___ftmul@f2+2
  4646  0B11  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4647  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0B18  0830               	movf	?___ftmul,w
  4650  0B19  00CC               	movwf	_fround$848
  4651  0B1A  0831               	movf	?___ftmul+1,w
  4652  0B1B  00CD               	movwf	_fround$848+1
  4653  0B1C  0832               	movf	?___ftmul+2,w
  4654  0B1D  00CE               	movwf	_fround$848+2
  4655                           
  4656                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4657  0B1E  3000               	movlw	0
  4658  0B1F  00B0               	movwf	___ftmul@f1
  4659  0B20  3000               	movlw	0
  4660  0B21  00B1               	movwf	___ftmul@f1+1
  4661  0B22  303F               	movlw	63
  4662  0B23  00B2               	movwf	___ftmul@f1+2
  4663  0B24  084C               	movf	_fround$848,w
  4664  0B25  00B3               	movwf	___ftmul@f2
  4665  0B26  084D               	movf	_fround$848+1,w
  4666  0B27  00B4               	movwf	___ftmul@f2+1
  4667  0B28  084E               	movf	_fround$848+2,w
  4668  0B29  00B5               	movwf	___ftmul@f2+2
  4669  0B2A  160A  118A  24F2   	fcall	___ftmul
  4670  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  4671  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  4672  0B2F  0830               	movf	?___ftmul,w
  4673  0B30  00C0               	movwf	?_fround
  4674  0B31  0831               	movf	?___ftmul+1,w
  4675  0B32  00C1               	movwf	?_fround+1
  4676  0B33  0832               	movf	?___ftmul+2,w
  4677  0B34  00C2               	movwf	?_fround+2
  4678  0B35  0008               	return
  4679  0B36                     l2482:	
  4680                           
  4681                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4682  0B36  3000               	movlw	0
  4683  0B37  00B0               	movwf	___ftmul@f1
  4684  0B38  3000               	movlw	0
  4685  0B39  00B1               	movwf	___ftmul@f1+1
  4686  0B3A  303F               	movlw	63
  4687  0B3B  00B2               	movwf	___ftmul@f1+2
  4688  0B3C  3003               	movlw	3
  4689  0B3D  00C3               	movwf	??_fround
  4690  0B3E  0843               	movf	??_fround,w
  4691  0B3F  00A4               	movwf	___bmul@multiplicand
  4692  0B40  084F               	movf	fround@prec,w
  4693  0B41  160A  158A  24BC  120A  158A  	fcall	___bmul
  4694  0B46  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4695  0B47  0084               	movwf	4
  4696  0B48  160A  118A  2000  120A  158A  	fcall	stringdir
  4697  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0B4F  00B3               	movwf	___ftmul@f2
  4700  0B50  160A  118A  2000  120A  158A  	fcall	stringdir
  4701  0B55  00B4               	movwf	___ftmul@f2+1
  4702  0B56  160A  118A  2000  120A  158A  	fcall	stringdir
  4703  0B5B  00B5               	movwf	___ftmul@f2+2
  4704  0B5C  160A  118A  24F2   	fcall	___ftmul
  4705  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  4706  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  4707  0B61  0830               	movf	?___ftmul,w
  4708  0B62  00C0               	movwf	?_fround
  4709  0B63  0831               	movf	?___ftmul+1,w
  4710  0B64  00C1               	movwf	?_fround+1
  4711  0B65  0832               	movf	?___ftmul+2,w
  4712  0B66  00C2               	movwf	?_fround+2
  4713  0B67  0008               	return
  4714  0B68                     __end_of_fround:	
  4715                           
  4716                           	psect	text5
  4717  1CBC                     __ptext5:	
  4718 ;; *************** function ___bmul *****************
  4719 ;; Defined at:
  4720 ;;		line 4 in file "E:\software\pic\XC8\sources\common\Umul8.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  multiplier      1    wreg     unsigned char 
  4723 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  multiplier      1    6[BANK0 ] unsigned char 
  4726 ;;  product         1    5[BANK0 ] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      unsigned char 
  4729 ;; Registers used:
  4730 ;;		wreg, status,2, status,0
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4736 ;;      Params:         0       1       0       0       0
  4737 ;;      Locals:         0       2       0       0       0
  4738 ;;      Temps:          1       0       0       0       0
  4739 ;;      Totals:         1       3       0       0       0
  4740 ;;Total ram usage:        4 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; This function calls:
  4743 ;;		Nothing
  4744 ;; This function is called by:
  4745 ;;		_fround
  4746 ;;		_scale
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function ___bmul
  4752  1CBC                     ___bmul:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4756                           ;___bmul@multiplier stored from wreg
  4757  1CBC  1283               	bcf	3,5	;RP0=0, select bank0
  4758  1CBD  1303               	bcf	3,6	;RP1=0, select bank0
  4759  1CBE  00A6               	movwf	___bmul@multiplier
  4760  1CBF  01A5               	clrf	___bmul@product
  4761  1CC0                     l2066:	
  4762  1CC0  1C26               	btfss	___bmul@multiplier,0
  4763  1CC1  2CC6               	goto	l2070
  4764  1CC2  0824               	movf	___bmul@multiplicand,w
  4765  1CC3  00FC               	movwf	??___bmul
  4766  1CC4  087C               	movf	??___bmul,w
  4767  1CC5  07A5               	addwf	___bmul@product,f
  4768  1CC6                     l2070:	
  4769  1CC6  1003               	clrc
  4770  1CC7  0DA4               	rlf	___bmul@multiplicand,f
  4771  1CC8  1003               	clrc
  4772  1CC9  0CA6               	rrf	___bmul@multiplier,f
  4773  1CCA  0826               	movf	___bmul@multiplier,w
  4774  1CCB  1D03               	btfss	3,2
  4775  1CCC  2CC0               	goto	l2066
  4776  1CCD  0825               	movf	___bmul@product,w
  4777  1CCE  0008               	return
  4778  1CCF                     __end_of___bmul:	
  4779                           
  4780                           	psect	text6
  4781  1E60                     __ptext6:	
  4782 ;; *************** function ___awmod *****************
  4783 ;; Defined at:
  4784 ;;		line 6 in file "E:\software\pic\XC8\sources\common\awmod.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  divisor         2    0[COMMON] int 
  4787 ;;  dividend        2    2[COMMON] int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  sign            1    6[COMMON] unsigned char 
  4790 ;;  counter         1    5[COMMON] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  2    0[COMMON] int 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4800 ;;      Params:         4       0       0       0       0
  4801 ;;      Locals:         2       0       0       0       0
  4802 ;;      Temps:          1       0       0       0       0
  4803 ;;      Totals:         7       0       0       0       0
  4804 ;;Total ram usage:        7 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_fround
  4810 ;;		_scale
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           
  4815                           ;psect for function ___awmod
  4816  1E60                     ___awmod:	
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4820  1E60  01F6               	clrf	___awmod@sign
  4821  1E61  1FF3               	btfss	___awmod@dividend+1,7
  4822  1E62  2E6A               	goto	l2186
  4823  1E63  09F2               	comf	___awmod@dividend,f
  4824  1E64  09F3               	comf	___awmod@dividend+1,f
  4825  1E65  0AF2               	incf	___awmod@dividend,f
  4826  1E66  1903               	skipnz
  4827  1E67  0AF3               	incf	___awmod@dividend+1,f
  4828  1E68  01F6               	clrf	___awmod@sign
  4829  1E69  0AF6               	incf	___awmod@sign,f
  4830  1E6A                     l2186:	
  4831  1E6A  1FF1               	btfss	___awmod@divisor+1,7
  4832  1E6B  2E71               	goto	l2190
  4833  1E6C  09F0               	comf	___awmod@divisor,f
  4834  1E6D  09F1               	comf	___awmod@divisor+1,f
  4835  1E6E  0AF0               	incf	___awmod@divisor,f
  4836  1E6F  1903               	skipnz
  4837  1E70  0AF1               	incf	___awmod@divisor+1,f
  4838  1E71                     l2190:	
  4839  1E71  0870               	movf	___awmod@divisor,w
  4840  1E72  0471               	iorwf	___awmod@divisor+1,w
  4841  1E73  1903               	btfsc	3,2
  4842  1E74  2E9E               	goto	l2208
  4843  1E75  01F5               	clrf	___awmod@counter
  4844  1E76  0AF5               	incf	___awmod@counter,f
  4845  1E77                     l2198:	
  4846  1E77  1BF1               	btfsc	___awmod@divisor+1,7
  4847  1E78  2E85               	goto	l2200
  4848  1E79  3001               	movlw	1
  4849  1E7A                     u2895:	
  4850  1E7A  1003               	clrc
  4851  1E7B  0DF0               	rlf	___awmod@divisor,f
  4852  1E7C  0DF1               	rlf	___awmod@divisor+1,f
  4853  1E7D  3EFF               	addlw	-1
  4854  1E7E  1D03               	skipz
  4855  1E7F  2E7A               	goto	u2895
  4856  1E80  3001               	movlw	1
  4857  1E81  00F4               	movwf	??___awmod
  4858  1E82  0874               	movf	??___awmod,w
  4859  1E83  07F5               	addwf	___awmod@counter,f
  4860  1E84  2E77               	goto	l2198
  4861  1E85                     l2200:	
  4862  1E85  0871               	movf	___awmod@divisor+1,w
  4863  1E86  0273               	subwf	___awmod@dividend+1,w
  4864  1E87  1D03               	skipz
  4865  1E88  2E8B               	goto	u2915
  4866  1E89  0870               	movf	___awmod@divisor,w
  4867  1E8A  0272               	subwf	___awmod@dividend,w
  4868  1E8B                     u2915:	
  4869  1E8B  1C03               	skipc
  4870  1E8C  2E93               	goto	l2204
  4871  1E8D  0870               	movf	___awmod@divisor,w
  4872  1E8E  02F2               	subwf	___awmod@dividend,f
  4873  1E8F  0871               	movf	___awmod@divisor+1,w
  4874  1E90  1C03               	skipc
  4875  1E91  03F3               	decf	___awmod@dividend+1,f
  4876  1E92  02F3               	subwf	___awmod@dividend+1,f
  4877  1E93                     l2204:	
  4878  1E93  3001               	movlw	1
  4879  1E94                     u2925:	
  4880  1E94  1003               	clrc
  4881  1E95  0CF1               	rrf	___awmod@divisor+1,f
  4882  1E96  0CF0               	rrf	___awmod@divisor,f
  4883  1E97  3EFF               	addlw	-1
  4884  1E98  1D03               	skipz
  4885  1E99  2E94               	goto	u2925
  4886  1E9A  3001               	movlw	1
  4887  1E9B  02F5               	subwf	___awmod@counter,f
  4888  1E9C  1D03               	btfss	3,2
  4889  1E9D  2E85               	goto	l2200
  4890  1E9E                     l2208:	
  4891  1E9E  0876               	movf	___awmod@sign,w
  4892  1E9F  1903               	btfsc	3,2
  4893  1EA0  2EA6               	goto	l2212
  4894  1EA1  09F2               	comf	___awmod@dividend,f
  4895  1EA2  09F3               	comf	___awmod@dividend+1,f
  4896  1EA3  0AF2               	incf	___awmod@dividend,f
  4897  1EA4  1903               	skipnz
  4898  1EA5  0AF3               	incf	___awmod@dividend+1,f
  4899  1EA6                     l2212:	
  4900  1EA6  0873               	movf	___awmod@dividend+1,w
  4901  1EA7  00F1               	movwf	?___awmod+1
  4902  1EA8  0872               	movf	___awmod@dividend,w
  4903  1EA9  00F0               	movwf	?___awmod
  4904  1EAA  0008               	return
  4905  1EAB                     __end_of___awmod:	
  4906                           
  4907                           	psect	text7
  4908  1FA5                     __ptext7:	
  4909 ;; *************** function ___awdiv *****************
  4910 ;; Defined at:
  4911 ;;		line 6 in file "E:\software\pic\XC8\sources\common\awdiv.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  divisor         2    7[COMMON] int 
  4914 ;;  dividend        2    9[COMMON] int 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  quotient        2    2[BANK0 ] int 
  4917 ;;  sign            1    1[BANK0 ] unsigned char 
  4918 ;;  counter         1    0[BANK0 ] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  2    7[COMMON] int 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4928 ;;      Params:         4       0       0       0       0
  4929 ;;      Locals:         0       4       0       0       0
  4930 ;;      Temps:          1       0       0       0       0
  4931 ;;      Totals:         5       4       0       0       0
  4932 ;;Total ram usage:        9 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_fround
  4938 ;;		_scale
  4939 ;;		_sprintf
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function ___awdiv
  4945  1FA5                     ___awdiv:	
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4949  1FA5  1283               	bcf	3,5	;RP0=0, select bank0
  4950  1FA6  1303               	bcf	3,6	;RP1=0, select bank0
  4951  1FA7  01A1               	clrf	___awdiv@sign
  4952  1FA8  1FF8               	btfss	___awdiv@divisor+1,7
  4953  1FA9  2FB1               	goto	l2142
  4954  1FAA  09F7               	comf	___awdiv@divisor,f
  4955  1FAB  09F8               	comf	___awdiv@divisor+1,f
  4956  1FAC  0AF7               	incf	___awdiv@divisor,f
  4957  1FAD  1903               	skipnz
  4958  1FAE  0AF8               	incf	___awdiv@divisor+1,f
  4959  1FAF  01A1               	clrf	___awdiv@sign
  4960  1FB0  0AA1               	incf	___awdiv@sign,f
  4961  1FB1                     l2142:	
  4962  1FB1  1FFA               	btfss	___awdiv@dividend+1,7
  4963  1FB2  2FBC               	goto	l2148
  4964  1FB3  09F9               	comf	___awdiv@dividend,f
  4965  1FB4  09FA               	comf	___awdiv@dividend+1,f
  4966  1FB5  0AF9               	incf	___awdiv@dividend,f
  4967  1FB6  1903               	skipnz
  4968  1FB7  0AFA               	incf	___awdiv@dividend+1,f
  4969  1FB8  3001               	movlw	1
  4970  1FB9  00FB               	movwf	??___awdiv
  4971  1FBA  087B               	movf	??___awdiv,w
  4972  1FBB  06A1               	xorwf	___awdiv@sign,f
  4973  1FBC                     l2148:	
  4974  1FBC  01A2               	clrf	___awdiv@quotient
  4975  1FBD  01A3               	clrf	___awdiv@quotient+1
  4976  1FBE  0877               	movf	___awdiv@divisor,w
  4977  1FBF  0478               	iorwf	___awdiv@divisor+1,w
  4978  1FC0  1903               	btfsc	3,2
  4979  1FC1  2FF3               	goto	l2170
  4980  1FC2  01A0               	clrf	___awdiv@counter
  4981  1FC3  0AA0               	incf	___awdiv@counter,f
  4982  1FC4                     l2158:	
  4983  1FC4  1BF8               	btfsc	___awdiv@divisor+1,7
  4984  1FC5  2FD2               	goto	l2160
  4985  1FC6  3001               	movlw	1
  4986  1FC7                     u2795:	
  4987  1FC7  1003               	clrc
  4988  1FC8  0DF7               	rlf	___awdiv@divisor,f
  4989  1FC9  0DF8               	rlf	___awdiv@divisor+1,f
  4990  1FCA  3EFF               	addlw	-1
  4991  1FCB  1D03               	skipz
  4992  1FCC  2FC7               	goto	u2795
  4993  1FCD  3001               	movlw	1
  4994  1FCE  00FB               	movwf	??___awdiv
  4995  1FCF  087B               	movf	??___awdiv,w
  4996  1FD0  07A0               	addwf	___awdiv@counter,f
  4997  1FD1  2FC4               	goto	l2158
  4998  1FD2                     l2160:	
  4999  1FD2  3001               	movlw	1
  5000  1FD3                     u2815:	
  5001  1FD3  1003               	clrc
  5002  1FD4  0DA2               	rlf	___awdiv@quotient,f
  5003  1FD5  0DA3               	rlf	___awdiv@quotient+1,f
  5004  1FD6  3EFF               	addlw	-1
  5005  1FD7  1D03               	skipz
  5006  1FD8  2FD3               	goto	u2815
  5007  1FD9  0878               	movf	___awdiv@divisor+1,w
  5008  1FDA  027A               	subwf	___awdiv@dividend+1,w
  5009  1FDB  1D03               	skipz
  5010  1FDC  2FDF               	goto	u2825
  5011  1FDD  0877               	movf	___awdiv@divisor,w
  5012  1FDE  0279               	subwf	___awdiv@dividend,w
  5013  1FDF                     u2825:	
  5014  1FDF  1C03               	skipc
  5015  1FE0  2FE8               	goto	l2166
  5016  1FE1  0877               	movf	___awdiv@divisor,w
  5017  1FE2  02F9               	subwf	___awdiv@dividend,f
  5018  1FE3  0878               	movf	___awdiv@divisor+1,w
  5019  1FE4  1C03               	skipc
  5020  1FE5  03FA               	decf	___awdiv@dividend+1,f
  5021  1FE6  02FA               	subwf	___awdiv@dividend+1,f
  5022  1FE7  1422               	bsf	___awdiv@quotient,0
  5023  1FE8                     l2166:	
  5024  1FE8  3001               	movlw	1
  5025  1FE9                     u2835:	
  5026  1FE9  1003               	clrc
  5027  1FEA  0CF8               	rrf	___awdiv@divisor+1,f
  5028  1FEB  0CF7               	rrf	___awdiv@divisor,f
  5029  1FEC  3EFF               	addlw	-1
  5030  1FED  1D03               	skipz
  5031  1FEE  2FE9               	goto	u2835
  5032  1FEF  3001               	movlw	1
  5033  1FF0  02A0               	subwf	___awdiv@counter,f
  5034  1FF1  1D03               	btfss	3,2
  5035  1FF2  2FD2               	goto	l2160
  5036  1FF3                     l2170:	
  5037  1FF3  0821               	movf	___awdiv@sign,w
  5038  1FF4  1903               	btfsc	3,2
  5039  1FF5  2FFB               	goto	l2174
  5040  1FF6  09A2               	comf	___awdiv@quotient,f
  5041  1FF7  09A3               	comf	___awdiv@quotient+1,f
  5042  1FF8  0AA2               	incf	___awdiv@quotient,f
  5043  1FF9  1903               	skipnz
  5044  1FFA  0AA3               	incf	___awdiv@quotient+1,f
  5045  1FFB                     l2174:	
  5046  1FFB  0823               	movf	___awdiv@quotient+1,w
  5047  1FFC  00F8               	movwf	?___awdiv+1
  5048  1FFD  0822               	movf	___awdiv@quotient,w
  5049  1FFE  00F7               	movwf	?___awdiv
  5050  1FFF  0008               	return
  5051  2000                     __end_of___awdiv:	
  5052                           
  5053                           	psect	text8
  5054  142F                     __ptext8:	
  5055 ;; *************** function __tdiv_to_l_ *****************
  5056 ;; Defined at:
  5057 ;;		line 60 in file "E:\software\pic\XC8\sources\common\ftdivl.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  f1              3    0[COMMON] float 
  5060 ;;  f2              3    3[COMMON] float 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  quot            4    0[BANK0 ] unsigned long 
  5063 ;;  exp1            1    5[BANK0 ] unsigned char 
  5064 ;;  cntr            1    4[BANK0 ] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  4    0[COMMON] unsigned long 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5074 ;;      Params:         6       0       0       0       0
  5075 ;;      Locals:         0       6       0       0       0
  5076 ;;      Temps:          4       0       0       0       0
  5077 ;;      Totals:        10       6       0       0       0
  5078 ;;Total ram usage:       16 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_sprintf
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function __tdiv_to_l_
  5089  142F                     __tdiv_to_l_:	
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5093  142F  0870               	movf	__tdiv_to_l_@f1,w
  5094  1430  00F6               	movwf	??__tdiv_to_l_
  5095  1431  0871               	movf	__tdiv_to_l_@f1+1,w
  5096  1432  00F7               	movwf	??__tdiv_to_l_+1
  5097  1433  0872               	movf	__tdiv_to_l_@f1+2,w
  5098  1434  00F8               	movwf	??__tdiv_to_l_+2
  5099  1435  1003               	clrc
  5100  1436  0D77               	rlf	??__tdiv_to_l_+1,w
  5101  1437  0D78               	rlf	??__tdiv_to_l_+2,w
  5102  1438  00F9               	movwf	??__tdiv_to_l_+3
  5103  1439  0879               	movf	??__tdiv_to_l_+3,w
  5104  143A  1283               	bcf	3,5	;RP0=0, select bank0
  5105  143B  1303               	bcf	3,6	;RP1=0, select bank0
  5106  143C  00A5               	movwf	__tdiv_to_l_@exp1
  5107  143D  0825               	movf	__tdiv_to_l_@exp1,w
  5108  143E  1D03               	btfss	3,2
  5109  143F  2C49               	goto	l2544
  5110  1440  3000               	movlw	0
  5111  1441  00F3               	movwf	?__tdiv_to_l_+3
  5112  1442  3000               	movlw	0
  5113  1443  00F2               	movwf	?__tdiv_to_l_+2
  5114  1444  3000               	movlw	0
  5115  1445  00F1               	movwf	?__tdiv_to_l_+1
  5116  1446  3000               	movlw	0
  5117  1447  00F0               	movwf	?__tdiv_to_l_
  5118  1448  0008               	return
  5119  1449                     l2544:	
  5120  1449  0873               	movf	__tdiv_to_l_@f2,w
  5121  144A  00F6               	movwf	??__tdiv_to_l_
  5122  144B  0874               	movf	__tdiv_to_l_@f2+1,w
  5123  144C  00F7               	movwf	??__tdiv_to_l_+1
  5124  144D  0875               	movf	__tdiv_to_l_@f2+2,w
  5125  144E  00F8               	movwf	??__tdiv_to_l_+2
  5126  144F  1003               	clrc
  5127  1450  0D77               	rlf	??__tdiv_to_l_+1,w
  5128  1451  0D78               	rlf	??__tdiv_to_l_+2,w
  5129  1452  00F9               	movwf	??__tdiv_to_l_+3
  5130  1453  0879               	movf	??__tdiv_to_l_+3,w
  5131  1454  00A4               	movwf	__tdiv_to_l_@cntr
  5132  1455  0824               	movf	__tdiv_to_l_@cntr,w
  5133  1456  1D03               	btfss	3,2
  5134  1457  2C61               	goto	l608
  5135  1458  3000               	movlw	0
  5136  1459  00F3               	movwf	?__tdiv_to_l_+3
  5137  145A  3000               	movlw	0
  5138  145B  00F2               	movwf	?__tdiv_to_l_+2
  5139  145C  3000               	movlw	0
  5140  145D  00F1               	movwf	?__tdiv_to_l_+1
  5141  145E  3000               	movlw	0
  5142  145F  00F0               	movwf	?__tdiv_to_l_
  5143  1460  0008               	return
  5144  1461                     l608:	
  5145  1461  17F1               	bsf	__tdiv_to_l_@f1+1,7
  5146  1462  30FF               	movlw	255
  5147  1463  05F0               	andwf	__tdiv_to_l_@f1,f
  5148  1464  30FF               	movlw	255
  5149  1465  05F1               	andwf	__tdiv_to_l_@f1+1,f
  5150  1466  3000               	movlw	0
  5151  1467  05F2               	andwf	__tdiv_to_l_@f1+2,f
  5152  1468  17F4               	bsf	__tdiv_to_l_@f2+1,7
  5153  1469  30FF               	movlw	255
  5154  146A  05F3               	andwf	__tdiv_to_l_@f2,f
  5155  146B  30FF               	movlw	255
  5156  146C  05F4               	andwf	__tdiv_to_l_@f2+1,f
  5157  146D  3000               	movlw	0
  5158  146E  05F5               	andwf	__tdiv_to_l_@f2+2,f
  5159  146F  3000               	movlw	0
  5160  1470  00A3               	movwf	__tdiv_to_l_@quot+3
  5161  1471  3000               	movlw	0
  5162  1472  00A2               	movwf	__tdiv_to_l_@quot+2
  5163  1473  3000               	movlw	0
  5164  1474  00A1               	movwf	__tdiv_to_l_@quot+1
  5165  1475  3000               	movlw	0
  5166  1476  00A0               	movwf	__tdiv_to_l_@quot
  5167  1477  307F               	movlw	127
  5168  1478  02A5               	subwf	__tdiv_to_l_@exp1,f
  5169  1479  3098               	movlw	152
  5170  147A  0724               	addwf	__tdiv_to_l_@cntr,w
  5171  147B  00F6               	movwf	??__tdiv_to_l_
  5172  147C  0876               	movf	??__tdiv_to_l_,w
  5173  147D  02A5               	subwf	__tdiv_to_l_@exp1,f
  5174  147E  3018               	movlw	24
  5175  147F  00F6               	movwf	??__tdiv_to_l_
  5176  1480  0876               	movf	??__tdiv_to_l_,w
  5177  1481  00A4               	movwf	__tdiv_to_l_@cntr
  5178  1482                     l2558:	
  5179  1482  3001               	movlw	1
  5180  1483  00F6               	movwf	??__tdiv_to_l_
  5181  1484                     u3655:	
  5182  1484  1003               	clrc
  5183  1485  0DA0               	rlf	__tdiv_to_l_@quot,f
  5184  1486  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5185  1487  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5186  1488  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5187  1489  0BF6               	decfsz	??__tdiv_to_l_,f
  5188  148A  2C84               	goto	u3655
  5189  148B  0875               	movf	__tdiv_to_l_@f2+2,w
  5190  148C  0272               	subwf	__tdiv_to_l_@f1+2,w
  5191  148D  1D03               	skipz
  5192  148E  2C95               	goto	u3665
  5193  148F  0874               	movf	__tdiv_to_l_@f2+1,w
  5194  1490  0271               	subwf	__tdiv_to_l_@f1+1,w
  5195  1491  1D03               	skipz
  5196  1492  2C95               	goto	u3665
  5197  1493  0873               	movf	__tdiv_to_l_@f2,w
  5198  1494  0270               	subwf	__tdiv_to_l_@f1,w
  5199  1495                     u3665:	
  5200  1495  1C03               	skipc
  5201  1496  2CA2               	goto	l2566
  5202  1497  0873               	movf	__tdiv_to_l_@f2,w
  5203  1498  02F0               	subwf	__tdiv_to_l_@f1,f
  5204  1499  0874               	movf	__tdiv_to_l_@f2+1,w
  5205  149A  1C03               	skipc
  5206  149B  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  5207  149C  02F1               	subwf	__tdiv_to_l_@f1+1,f
  5208  149D  0875               	movf	__tdiv_to_l_@f2+2,w
  5209  149E  1C03               	skipc
  5210  149F  0A75               	incf	__tdiv_to_l_@f2+2,w
  5211  14A0  02F2               	subwf	__tdiv_to_l_@f1+2,f
  5212  14A1  1420               	bsf	__tdiv_to_l_@quot,0
  5213  14A2                     l2566:	
  5214  14A2  3001               	movlw	1
  5215  14A3                     u3675:	
  5216  14A3  1003               	clrc
  5217  14A4  0DF0               	rlf	__tdiv_to_l_@f1,f
  5218  14A5  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  5219  14A6  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  5220  14A7  3EFF               	addlw	-1
  5221  14A8  1D03               	skipz
  5222  14A9  2CA3               	goto	u3675
  5223  14AA  3001               	movlw	1
  5224  14AB  02A4               	subwf	__tdiv_to_l_@cntr,f
  5225  14AC  1D03               	btfss	3,2
  5226  14AD  2C82               	goto	l2558
  5227  14AE  1FA5               	btfss	__tdiv_to_l_@exp1,7
  5228  14AF  2CCE               	goto	l2578
  5229  14B0  0825               	movf	__tdiv_to_l_@exp1,w
  5230  14B1  3A80               	xorlw	128
  5231  14B2  3E97               	addlw	151
  5232  14B3  1803               	skipnc
  5233  14B4  2CBE               	goto	l2576
  5234  14B5  3000               	movlw	0
  5235  14B6  00F3               	movwf	?__tdiv_to_l_+3
  5236  14B7  3000               	movlw	0
  5237  14B8  00F2               	movwf	?__tdiv_to_l_+2
  5238  14B9  3000               	movlw	0
  5239  14BA  00F1               	movwf	?__tdiv_to_l_+1
  5240  14BB  3000               	movlw	0
  5241  14BC  00F0               	movwf	?__tdiv_to_l_
  5242  14BD  0008               	return
  5243  14BE                     l2576:	
  5244  14BE  3001               	movlw	1
  5245  14BF                     u3715:	
  5246  14BF  1003               	clrc
  5247  14C0  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  5248  14C1  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5249  14C2  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5250  14C3  0CA0               	rrf	__tdiv_to_l_@quot,f
  5251  14C4  3EFF               	addlw	-1
  5252  14C5  1D03               	skipz
  5253  14C6  2CBF               	goto	u3715
  5254  14C7  3001               	movlw	1
  5255  14C8  00F6               	movwf	??__tdiv_to_l_
  5256  14C9  0876               	movf	??__tdiv_to_l_,w
  5257  14CA  07A5               	addwf	__tdiv_to_l_@exp1,f
  5258  14CB  1903               	btfsc	3,2
  5259  14CC  2CE9               	goto	l2586
  5260  14CD  2CBE               	goto	l2576
  5261  14CE                     l2578:	
  5262  14CE  3018               	movlw	24
  5263  14CF  0225               	subwf	__tdiv_to_l_@exp1,w
  5264  14D0  1C03               	skipc
  5265  14D1  2CE6               	goto	l618
  5266  14D2  3000               	movlw	0
  5267  14D3  00F3               	movwf	?__tdiv_to_l_+3
  5268  14D4  3000               	movlw	0
  5269  14D5  00F2               	movwf	?__tdiv_to_l_+2
  5270  14D6  3000               	movlw	0
  5271  14D7  00F1               	movwf	?__tdiv_to_l_+1
  5272  14D8  3000               	movlw	0
  5273  14D9  00F0               	movwf	?__tdiv_to_l_
  5274  14DA  0008               	return
  5275  14DB                     l2584:	
  5276  14DB  3001               	movlw	1
  5277  14DC  00F6               	movwf	??__tdiv_to_l_
  5278  14DD                     u3745:	
  5279  14DD  1003               	clrc
  5280  14DE  0DA0               	rlf	__tdiv_to_l_@quot,f
  5281  14DF  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5282  14E0  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5283  14E1  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5284  14E2  0BF6               	decfsz	??__tdiv_to_l_,f
  5285  14E3  2CDD               	goto	u3745
  5286  14E4  3001               	movlw	1
  5287  14E5  02A5               	subwf	__tdiv_to_l_@exp1,f
  5288  14E6                     l618:	
  5289  14E6  0825               	movf	__tdiv_to_l_@exp1,w
  5290  14E7  1D03               	btfss	3,2
  5291  14E8  2CDB               	goto	l2584
  5292  14E9                     l2586:	
  5293  14E9  0823               	movf	__tdiv_to_l_@quot+3,w
  5294  14EA  00F3               	movwf	?__tdiv_to_l_+3
  5295  14EB  0822               	movf	__tdiv_to_l_@quot+2,w
  5296  14EC  00F2               	movwf	?__tdiv_to_l_+2
  5297  14ED  0821               	movf	__tdiv_to_l_@quot+1,w
  5298  14EE  00F1               	movwf	?__tdiv_to_l_+1
  5299  14EF  0820               	movf	__tdiv_to_l_@quot,w
  5300  14F0  00F0               	movwf	?__tdiv_to_l_
  5301  14F1  0008               	return
  5302  14F2                     __end_of__tdiv_to_l_:	
  5303                           
  5304                           	psect	text9
  5305  16CE                     __ptext9:	
  5306 ;; *************** function __div_to_l_ *****************
  5307 ;; Defined at:
  5308 ;;		line 60 in file "E:\software\pic\XC8\sources\common\fldivl.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  f1              3    0[COMMON] unsigned long 
  5311 ;;  f2              3    3[COMMON] unsigned long 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  quot            4    0[BANK0 ] unsigned long 
  5314 ;;  exp1            1    5[BANK0 ] unsigned char 
  5315 ;;  cntr            1    4[BANK0 ] unsigned char 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  4    0[COMMON] unsigned long 
  5318 ;; Registers used:
  5319 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5325 ;;      Params:         6       0       0       0       0
  5326 ;;      Locals:         0       6       0       0       0
  5327 ;;      Temps:          8       0       0       0       0
  5328 ;;      Totals:        14       6       0       0       0
  5329 ;;Total ram usage:       20 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_sprintf
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           
  5339                           ;psect for function __div_to_l_
  5340  16CE                     __div_to_l_:	
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  5344  16CE  3070               	movlw	low (__div_to_l_@f1| 0)
  5345  16CF  0084               	movwf	4
  5346  16D0  0800               	movf	0,w
  5347  16D1  00F6               	movwf	??__div_to_l_
  5348  16D2  0A84               	incf	4,f
  5349  16D3  0800               	movf	0,w
  5350  16D4  00F7               	movwf	??__div_to_l_+1
  5351  16D5  0A84               	incf	4,f
  5352  16D6  0800               	movf	0,w
  5353  16D7  00F8               	movwf	??__div_to_l_+2
  5354  16D8  0A84               	incf	4,f
  5355  16D9  0800               	movf	0,w
  5356  16DA  00F9               	movwf	??__div_to_l_+3
  5357  16DB  1003               	clrc
  5358  16DC  0D78               	rlf	??__div_to_l_+2,w
  5359  16DD  0D79               	rlf	??__div_to_l_+3,w
  5360  16DE  00FA               	movwf	??__div_to_l_+4
  5361  16DF  087A               	movf	??__div_to_l_+4,w
  5362  16E0  1283               	bcf	3,5	;RP0=0, select bank0
  5363  16E1  1303               	bcf	3,6	;RP1=0, select bank0
  5364  16E2  00A5               	movwf	__div_to_l_@exp1
  5365  16E3  0825               	movf	__div_to_l_@exp1,w
  5366  16E4  1D03               	btfss	3,2
  5367  16E5  2EEF               	goto	l2596
  5368  16E6  3000               	movlw	0
  5369  16E7  00F3               	movwf	?__div_to_l_+3
  5370  16E8  3000               	movlw	0
  5371  16E9  00F2               	movwf	?__div_to_l_+2
  5372  16EA  3000               	movlw	0
  5373  16EB  00F1               	movwf	?__div_to_l_+1
  5374  16EC  3000               	movlw	0
  5375  16ED  00F0               	movwf	?__div_to_l_
  5376  16EE  0008               	return
  5377  16EF                     l2596:	
  5378  16EF  3073               	movlw	low (__div_to_l_@f2| 0)
  5379  16F0  0084               	movwf	4
  5380  16F1  0800               	movf	0,w
  5381  16F2  00F6               	movwf	??__div_to_l_
  5382  16F3  0A84               	incf	4,f
  5383  16F4  0800               	movf	0,w
  5384  16F5  00F7               	movwf	??__div_to_l_+1
  5385  16F6  0A84               	incf	4,f
  5386  16F7  0800               	movf	0,w
  5387  16F8  00F8               	movwf	??__div_to_l_+2
  5388  16F9  0A84               	incf	4,f
  5389  16FA  0800               	movf	0,w
  5390  16FB  00F9               	movwf	??__div_to_l_+3
  5391  16FC  1003               	clrc
  5392  16FD  0D78               	rlf	??__div_to_l_+2,w
  5393  16FE  0D79               	rlf	??__div_to_l_+3,w
  5394  16FF  00FA               	movwf	??__div_to_l_+4
  5395  1700  087A               	movf	??__div_to_l_+4,w
  5396  1701  00A4               	movwf	__div_to_l_@cntr
  5397  1702  0824               	movf	__div_to_l_@cntr,w
  5398  1703  1D03               	btfss	3,2
  5399  1704  2F0E               	goto	l2602
  5400  1705  3000               	movlw	0
  5401  1706  00F3               	movwf	?__div_to_l_+3
  5402  1707  3000               	movlw	0
  5403  1708  00F2               	movwf	?__div_to_l_+2
  5404  1709  3000               	movlw	0
  5405  170A  00F1               	movwf	?__div_to_l_+1
  5406  170B  3000               	movlw	0
  5407  170C  00F0               	movwf	?__div_to_l_
  5408  170D  0008               	return
  5409  170E                     l2602:	
  5410  170E  3070               	movlw	low (__div_to_l_@f1| 0)
  5411  170F  0084               	movwf	4
  5412  1710  3000               	movlw	0
  5413  1711  0480               	iorwf	0,f
  5414  1712  0A84               	incf	4,f
  5415  1713  3000               	movlw	0
  5416  1714  0480               	iorwf	0,f
  5417  1715  0A84               	incf	4,f
  5418  1716  3080               	movlw	128
  5419  1717  0480               	iorwf	0,f
  5420  1718  0A84               	incf	4,f
  5421  1719  3000               	movlw	0
  5422  171A  0480               	iorwf	0,f
  5423  171B  3070               	movlw	low (__div_to_l_@f1| 0)
  5424  171C  0084               	movwf	4
  5425  171D  30FF               	movlw	255
  5426  171E  0580               	andwf	0,f
  5427  171F  0A84               	incf	4,f
  5428  1720  30FF               	movlw	255
  5429  1721  0580               	andwf	0,f
  5430  1722  0A84               	incf	4,f
  5431  1723  30FF               	movlw	255
  5432  1724  0580               	andwf	0,f
  5433  1725  0A84               	incf	4,f
  5434  1726  3000               	movlw	0
  5435  1727  0580               	andwf	0,f
  5436  1728  3073               	movlw	low (__div_to_l_@f2| 0)
  5437  1729  0084               	movwf	4
  5438  172A  3000               	movlw	0
  5439  172B  0480               	iorwf	0,f
  5440  172C  0A84               	incf	4,f
  5441  172D  3000               	movlw	0
  5442  172E  0480               	iorwf	0,f
  5443  172F  0A84               	incf	4,f
  5444  1730  3080               	movlw	128
  5445  1731  0480               	iorwf	0,f
  5446  1732  0A84               	incf	4,f
  5447  1733  3000               	movlw	0
  5448  1734  0480               	iorwf	0,f
  5449  1735  3073               	movlw	low (__div_to_l_@f2| 0)
  5450  1736  0084               	movwf	4
  5451  1737  30FF               	movlw	255
  5452  1738  0580               	andwf	0,f
  5453  1739  0A84               	incf	4,f
  5454  173A  30FF               	movlw	255
  5455  173B  0580               	andwf	0,f
  5456  173C  0A84               	incf	4,f
  5457  173D  30FF               	movlw	255
  5458  173E  0580               	andwf	0,f
  5459  173F  0A84               	incf	4,f
  5460  1740  3000               	movlw	0
  5461  1741  0580               	andwf	0,f
  5462  1742  3000               	movlw	0
  5463  1743  00A3               	movwf	__div_to_l_@quot+3
  5464  1744  3000               	movlw	0
  5465  1745  00A2               	movwf	__div_to_l_@quot+2
  5466  1746  3000               	movlw	0
  5467  1747  00A1               	movwf	__div_to_l_@quot+1
  5468  1748  3000               	movlw	0
  5469  1749  00A0               	movwf	__div_to_l_@quot
  5470  174A  307F               	movlw	127
  5471  174B  02A5               	subwf	__div_to_l_@exp1,f
  5472  174C  30A0               	movlw	160
  5473  174D  0724               	addwf	__div_to_l_@cntr,w
  5474  174E  00F6               	movwf	??__div_to_l_
  5475  174F  0876               	movf	??__div_to_l_,w
  5476  1750  02A5               	subwf	__div_to_l_@exp1,f
  5477  1751  3020               	movlw	32
  5478  1752  00F6               	movwf	??__div_to_l_
  5479  1753  0876               	movf	??__div_to_l_,w
  5480  1754  00A4               	movwf	__div_to_l_@cntr
  5481  1755                     l2612:	
  5482  1755  3001               	movlw	1
  5483  1756  00F6               	movwf	??__div_to_l_
  5484  1757                     u3785:	
  5485  1757  1003               	clrc
  5486  1758  0DA0               	rlf	__div_to_l_@quot,f
  5487  1759  0DA1               	rlf	__div_to_l_@quot+1,f
  5488  175A  0DA2               	rlf	__div_to_l_@quot+2,f
  5489  175B  0DA3               	rlf	__div_to_l_@quot+3,f
  5490  175C  0BF6               	decfsz	??__div_to_l_,f
  5491  175D  2F57               	goto	u3785
  5492  175E  3073               	movlw	low (__div_to_l_@f2| 0)
  5493  175F  0084               	movwf	4
  5494  1760  0800               	movf	0,w
  5495  1761  00F6               	movwf	??__div_to_l_
  5496  1762  0A84               	incf	4,f
  5497  1763  0800               	movf	0,w
  5498  1764  00F7               	movwf	??__div_to_l_+1
  5499  1765  0A84               	incf	4,f
  5500  1766  0800               	movf	0,w
  5501  1767  00F8               	movwf	??__div_to_l_+2
  5502  1768  0A84               	incf	4,f
  5503  1769  0800               	movf	0,w
  5504  176A  00F9               	movwf	??__div_to_l_+3
  5505  176B  3070               	movlw	low (__div_to_l_@f1| 0)
  5506  176C  0084               	movwf	4
  5507  176D  0800               	movf	0,w
  5508  176E  00FA               	movwf	??__div_to_l_+4
  5509  176F  0A84               	incf	4,f
  5510  1770  0800               	movf	0,w
  5511  1771  00FB               	movwf	??__div_to_l_+5
  5512  1772  0A84               	incf	4,f
  5513  1773  0800               	movf	0,w
  5514  1774  00FC               	movwf	??__div_to_l_+6
  5515  1775  0A84               	incf	4,f
  5516  1776  0800               	movf	0,w
  5517  1777  00FD               	movwf	??__div_to_l_+7
  5518  1778  0879               	movf	??__div_to_l_+3,w
  5519  1779  027D               	subwf	??__div_to_l_+7,w
  5520  177A  1D03               	skipz
  5521  177B  2F86               	goto	u3795
  5522  177C  0878               	movf	??__div_to_l_+2,w
  5523  177D  027C               	subwf	??__div_to_l_+6,w
  5524  177E  1D03               	skipz
  5525  177F  2F86               	goto	u3795
  5526  1780  0877               	movf	??__div_to_l_+1,w
  5527  1781  027B               	subwf	??__div_to_l_+5,w
  5528  1782  1D03               	skipz
  5529  1783  2F86               	goto	u3795
  5530  1784  0876               	movf	??__div_to_l_,w
  5531  1785  027A               	subwf	??__div_to_l_+4,w
  5532  1786                     u3795:	
  5533  1786  1C03               	skipc
  5534  1787  2FAB               	goto	l531
  5535  1788  3073               	movlw	low (__div_to_l_@f2| 0)
  5536  1789  0084               	movwf	4
  5537  178A  0800               	movf	0,w
  5538  178B  00F6               	movwf	??__div_to_l_
  5539  178C  0A84               	incf	4,f
  5540  178D  0800               	movf	0,w
  5541  178E  00F7               	movwf	??__div_to_l_+1
  5542  178F  0A84               	incf	4,f
  5543  1790  0800               	movf	0,w
  5544  1791  00F8               	movwf	??__div_to_l_+2
  5545  1792  0A84               	incf	4,f
  5546  1793  0800               	movf	0,w
  5547  1794  00F9               	movwf	??__div_to_l_+3
  5548  1795  3070               	movlw	low (__div_to_l_@f1| 0)
  5549  1796  0084               	movwf	4
  5550  1797  0876               	movf	??__div_to_l_,w
  5551  1798  0280               	subwf	0,f
  5552  1799  0A84               	incf	4,f
  5553  179A  0877               	movf	??__div_to_l_+1,w
  5554  179B  1C03               	skipc
  5555  179C  0F77               	incfsz	??__div_to_l_+1,w
  5556  179D  0280               	subwf	0,f
  5557  179E  0A84               	incf	4,f
  5558  179F  0878               	movf	??__div_to_l_+2,w
  5559  17A0  1C03               	skipc
  5560  17A1  0F78               	incfsz	??__div_to_l_+2,w
  5561  17A2  0280               	subwf	0,f
  5562  17A3  0A84               	incf	4,f
  5563  17A4  0879               	movf	??__div_to_l_+3,w
  5564  17A5  1C03               	skipc
  5565  17A6  0A79               	incf	??__div_to_l_+3,w
  5566  17A7  0280               	subwf	0,f
  5567  17A8  3003               	movlw	3
  5568  17A9  0284               	subwf	4,f
  5569  17AA  1420               	bsf	__div_to_l_@quot,0
  5570  17AB                     l531:	
  5571  17AB  3070               	movlw	low (__div_to_l_@f1| 0)
  5572  17AC  0084               	movwf	4
  5573  17AD  1003               	clrc
  5574  17AE  0D80               	rlf	0,f
  5575  17AF  0A84               	incf	4,f
  5576  17B0  0D80               	rlf	0,f
  5577  17B1  0A84               	incf	4,f
  5578  17B2  0D80               	rlf	0,f
  5579  17B3  0A84               	incf	4,f
  5580  17B4  0D80               	rlf	0,f
  5581  17B5  0384               	decf	4,f
  5582  17B6  0384               	decf	4,f
  5583  17B7  0384               	decf	4,f
  5584  17B8  3001               	movlw	1
  5585  17B9  02A4               	subwf	__div_to_l_@cntr,f
  5586  17BA  1D03               	btfss	3,2
  5587  17BB  2F55               	goto	l2612
  5588  17BC  1FA5               	btfss	__div_to_l_@exp1,7
  5589  17BD  2FDC               	goto	l2630
  5590  17BE  0825               	movf	__div_to_l_@exp1,w
  5591  17BF  3A80               	xorlw	128
  5592  17C0  3E9F               	addlw	159
  5593  17C1  1803               	skipnc
  5594  17C2  2FCC               	goto	l2628
  5595  17C3  3000               	movlw	0
  5596  17C4  00F3               	movwf	?__div_to_l_+3
  5597  17C5  3000               	movlw	0
  5598  17C6  00F2               	movwf	?__div_to_l_+2
  5599  17C7  3000               	movlw	0
  5600  17C8  00F1               	movwf	?__div_to_l_+1
  5601  17C9  3000               	movlw	0
  5602  17CA  00F0               	movwf	?__div_to_l_
  5603  17CB  0008               	return
  5604  17CC                     l2628:	
  5605  17CC  3001               	movlw	1
  5606  17CD                     u3835:	
  5607  17CD  1003               	clrc
  5608  17CE  0CA3               	rrf	__div_to_l_@quot+3,f
  5609  17CF  0CA2               	rrf	__div_to_l_@quot+2,f
  5610  17D0  0CA1               	rrf	__div_to_l_@quot+1,f
  5611  17D1  0CA0               	rrf	__div_to_l_@quot,f
  5612  17D2  3EFF               	addlw	-1
  5613  17D3  1D03               	skipz
  5614  17D4  2FCD               	goto	u3835
  5615  17D5  3001               	movlw	1
  5616  17D6  00F6               	movwf	??__div_to_l_
  5617  17D7  0876               	movf	??__div_to_l_,w
  5618  17D8  07A5               	addwf	__div_to_l_@exp1,f
  5619  17D9  1903               	btfsc	3,2
  5620  17DA  2FF7               	goto	l2638
  5621  17DB  2FCC               	goto	l2628
  5622  17DC                     l2630:	
  5623  17DC  3020               	movlw	32
  5624  17DD  0225               	subwf	__div_to_l_@exp1,w
  5625  17DE  1C03               	skipc
  5626  17DF  2FF4               	goto	l539
  5627  17E0  3000               	movlw	0
  5628  17E1  00F3               	movwf	?__div_to_l_+3
  5629  17E2  3000               	movlw	0
  5630  17E3  00F2               	movwf	?__div_to_l_+2
  5631  17E4  3000               	movlw	0
  5632  17E5  00F1               	movwf	?__div_to_l_+1
  5633  17E6  3000               	movlw	0
  5634  17E7  00F0               	movwf	?__div_to_l_
  5635  17E8  0008               	return
  5636  17E9                     l2636:	
  5637  17E9  3001               	movlw	1
  5638  17EA  00F6               	movwf	??__div_to_l_
  5639  17EB                     u3865:	
  5640  17EB  1003               	clrc
  5641  17EC  0DA0               	rlf	__div_to_l_@quot,f
  5642  17ED  0DA1               	rlf	__div_to_l_@quot+1,f
  5643  17EE  0DA2               	rlf	__div_to_l_@quot+2,f
  5644  17EF  0DA3               	rlf	__div_to_l_@quot+3,f
  5645  17F0  0BF6               	decfsz	??__div_to_l_,f
  5646  17F1  2FEB               	goto	u3865
  5647  17F2  3001               	movlw	1
  5648  17F3  02A5               	subwf	__div_to_l_@exp1,f
  5649  17F4                     l539:	
  5650  17F4  0825               	movf	__div_to_l_@exp1,w
  5651  17F5  1D03               	btfss	3,2
  5652  17F6  2FE9               	goto	l2636
  5653  17F7                     l2638:	
  5654  17F7  0823               	movf	__div_to_l_@quot+3,w
  5655  17F8  00F3               	movwf	?__div_to_l_+3
  5656  17F9  0822               	movf	__div_to_l_@quot+2,w
  5657  17FA  00F2               	movwf	?__div_to_l_+2
  5658  17FB  0821               	movf	__div_to_l_@quot+1,w
  5659  17FC  00F1               	movwf	?__div_to_l_+1
  5660  17FD  0820               	movf	__div_to_l_@quot,w
  5661  17FE  00F0               	movwf	?__div_to_l_
  5662  17FF  0008               	return
  5663  1800                     __end_of__div_to_l_:	
  5664                           
  5665                           	psect	text10
  5666  0005                     __ptext10:	
  5667 ;; *************** function ___wmul *****************
  5668 ;; Defined at:
  5669 ;;		line 15 in file "E:\software\pic\XC8\sources\common\Umul16.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  multiplier      2    0[COMMON] unsigned int 
  5672 ;;  multiplicand    2    2[COMMON] unsigned int 
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  product         2    4[COMMON] unsigned int 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  2    0[COMMON] unsigned int 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5684 ;;      Params:         4       0       0       0       0
  5685 ;;      Locals:         2       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0
  5687 ;;      Totals:         6       0       0       0       0
  5688 ;;Total ram usage:        6 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; This function calls:
  5691 ;;		Nothing
  5692 ;; This function is called by:
  5693 ;;		_sprintf
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           
  5698                           ;psect for function ___wmul
  5699  0005                     ___wmul:	
  5700                           
  5701                           ;incstack = 0
  5702                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5703  0005  01F4               	clrf	___wmul@product
  5704  0006  01F5               	clrf	___wmul@product+1
  5705  0007                     l2644:	
  5706  0007  1C70               	btfss	___wmul@multiplier,0
  5707  0008  280F               	goto	l373
  5708  0009  0872               	movf	___wmul@multiplicand,w
  5709  000A  07F4               	addwf	___wmul@product,f
  5710  000B  1803               	skipnc
  5711  000C  0AF5               	incf	___wmul@product+1,f
  5712  000D  0873               	movf	___wmul@multiplicand+1,w
  5713  000E  07F5               	addwf	___wmul@product+1,f
  5714  000F                     l373:	
  5715  000F  3001               	movlw	1
  5716  0010                     u3895:	
  5717  0010  1003               	clrc
  5718  0011  0DF2               	rlf	___wmul@multiplicand,f
  5719  0012  0DF3               	rlf	___wmul@multiplicand+1,f
  5720  0013  3EFF               	addlw	-1
  5721  0014  1D03               	skipz
  5722  0015  2810               	goto	u3895
  5723  0016  3001               	movlw	1
  5724  0017                     u3905:	
  5725  0017  1003               	clrc
  5726  0018  0CF1               	rrf	___wmul@multiplier+1,f
  5727  0019  0CF0               	rrf	___wmul@multiplier,f
  5728  001A  3EFF               	addlw	-1
  5729  001B  1D03               	skipz
  5730  001C  2817               	goto	u3905
  5731  001D  0870               	movf	___wmul@multiplier,w
  5732  001E  0471               	iorwf	___wmul@multiplier+1,w
  5733  001F  1D03               	btfss	3,2
  5734  0020  2807               	goto	l2644
  5735  0021  0875               	movf	___wmul@product+1,w
  5736  0022  00F1               	movwf	?___wmul+1
  5737  0023  0874               	movf	___wmul@product,w
  5738  0024  00F0               	movwf	?___wmul
  5739  0025  0008               	return
  5740  0026                     __end_of___wmul:	
  5741                           
  5742                           	psect	text11
  5743  1D88                     __ptext11:	
  5744 ;; *************** function ___lltoft *****************
  5745 ;; Defined at:
  5746 ;;		line 35 in file "E:\software\pic\XC8\sources\common\lltoft.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  c               4    8[COMMON] unsigned long 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  exp             1   13[COMMON] unsigned char 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  3    8[COMMON] float 
  5753 ;; Registers used:
  5754 ;;		wreg, status,2, status,0, pclath, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5760 ;;      Params:         4       0       0       0       0
  5761 ;;      Locals:         1       0       0       0       0
  5762 ;;      Temps:          1       0       0       0       0
  5763 ;;      Totals:         6       0       0       0       0
  5764 ;;Total ram usage:        6 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    1
  5767 ;; This function calls:
  5768 ;;		___ftpack
  5769 ;; This function is called by:
  5770 ;;		_sprintf
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function ___lltoft
  5776  1D88                     ___lltoft:	
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5780  1D88  308E               	movlw	142
  5781  1D89  00FC               	movwf	??___lltoft
  5782  1D8A  087C               	movf	??___lltoft,w
  5783  1D8B  00FD               	movwf	___lltoft@exp
  5784  1D8C                     l2740:	
  5785  1D8C  30FF               	movlw	255
  5786  1D8D  057B               	andwf	___lltoft@c+3,w
  5787  1D8E  1903               	btfsc	3,2
  5788  1D8F  2D9E               	goto	l2742
  5789  1D90  3001               	movlw	1
  5790  1D91                     u4125:	
  5791  1D91  1003               	clrc
  5792  1D92  0CFB               	rrf	___lltoft@c+3,f
  5793  1D93  0CFA               	rrf	___lltoft@c+2,f
  5794  1D94  0CF9               	rrf	___lltoft@c+1,f
  5795  1D95  0CF8               	rrf	___lltoft@c,f
  5796  1D96  3EFF               	addlw	-1
  5797  1D97  1D03               	skipz
  5798  1D98  2D91               	goto	u4125
  5799  1D99  3001               	movlw	1
  5800  1D9A  00FC               	movwf	??___lltoft
  5801  1D9B  087C               	movf	??___lltoft,w
  5802  1D9C  07FD               	addwf	___lltoft@exp,f
  5803  1D9D  2D8C               	goto	l2740
  5804  1D9E                     l2742:	
  5805  1D9E  0878               	movf	___lltoft@c,w
  5806  1D9F  00F0               	movwf	___ftpack@arg
  5807  1DA0  0879               	movf	___lltoft@c+1,w
  5808  1DA1  00F1               	movwf	___ftpack@arg+1
  5809  1DA2  087A               	movf	___lltoft@c+2,w
  5810  1DA3  00F2               	movwf	___ftpack@arg+2
  5811  1DA4  087D               	movf	___lltoft@exp,w
  5812  1DA5  00FC               	movwf	??___lltoft
  5813  1DA6  087C               	movf	??___lltoft,w
  5814  1DA7  00F3               	movwf	___ftpack@exp
  5815  1DA8  01F4               	clrf	___ftpack@sign
  5816  1DA9  160A  118A  2148   	fcall	___ftpack
  5817  1DAC  0870               	movf	?___ftpack,w
  5818  1DAD  00F8               	movwf	?___lltoft
  5819  1DAE  0871               	movf	?___ftpack+1,w
  5820  1DAF  00F9               	movwf	?___lltoft+1
  5821  1DB0  0872               	movf	?___ftpack+2,w
  5822  1DB1  00FA               	movwf	?___lltoft+2
  5823  1DB2  0008               	return
  5824  1DB3                     __end_of___lltoft:	
  5825                           
  5826                           	psect	text12
  5827  1EAB                     __ptext12:	
  5828 ;; *************** function ___llmod *****************
  5829 ;; Defined at:
  5830 ;;		line 6 in file "E:\software\pic\XC8\sources\common\llmod.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;  divisor         4    0[BANK0 ] unsigned long 
  5833 ;;  dividend        4    4[BANK0 ] unsigned long 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  counter         1    9[BANK0 ] unsigned char 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  4    0[BANK0 ] unsigned long 
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5845 ;;      Params:         0       8       0       0       0
  5846 ;;      Locals:         0       1       0       0       0
  5847 ;;      Temps:          0       1       0       0       0
  5848 ;;      Totals:         0      10       0       0       0
  5849 ;;Total ram usage:       10 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; This function calls:
  5852 ;;		Nothing
  5853 ;; This function is called by:
  5854 ;;		_sprintf
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function ___llmod
  5860  1EAB                     ___llmod:	
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5864  1EAB  1283               	bcf	3,5	;RP0=0, select bank0
  5865  1EAC  1303               	bcf	3,6	;RP1=0, select bank0
  5866  1EAD  0823               	movf	___llmod@divisor+3,w
  5867  1EAE  0422               	iorwf	___llmod@divisor+2,w
  5868  1EAF  0421               	iorwf	___llmod@divisor+1,w
  5869  1EB0  0420               	iorwf	___llmod@divisor,w
  5870  1EB1  1903               	skipnz
  5871  1EB2  2EF0               	goto	l2732
  5872  1EB3  01A9               	clrf	___llmod@counter
  5873  1EB4  0AA9               	incf	___llmod@counter,f
  5874  1EB5                     l2722:	
  5875  1EB5  1BA3               	btfsc	___llmod@divisor+3,7
  5876  1EB6  2EC5               	goto	l2724
  5877  1EB7  3001               	movlw	1
  5878  1EB8  00A8               	movwf	??___llmod
  5879  1EB9                     u4075:	
  5880  1EB9  1003               	clrc
  5881  1EBA  0DA0               	rlf	___llmod@divisor,f
  5882  1EBB  0DA1               	rlf	___llmod@divisor+1,f
  5883  1EBC  0DA2               	rlf	___llmod@divisor+2,f
  5884  1EBD  0DA3               	rlf	___llmod@divisor+3,f
  5885  1EBE  0BA8               	decfsz	??___llmod,f
  5886  1EBF  2EB9               	goto	u4075
  5887  1EC0  3001               	movlw	1
  5888  1EC1  00A8               	movwf	??___llmod
  5889  1EC2  0828               	movf	??___llmod,w
  5890  1EC3  07A9               	addwf	___llmod@counter,f
  5891  1EC4  2EB5               	goto	l2722
  5892  1EC5                     l2724:	
  5893  1EC5  0823               	movf	___llmod@divisor+3,w
  5894  1EC6  0227               	subwf	___llmod@dividend+3,w
  5895  1EC7  1D03               	skipz
  5896  1EC8  2ED3               	goto	u4095
  5897  1EC9  0822               	movf	___llmod@divisor+2,w
  5898  1ECA  0226               	subwf	___llmod@dividend+2,w
  5899  1ECB  1D03               	skipz
  5900  1ECC  2ED3               	goto	u4095
  5901  1ECD  0821               	movf	___llmod@divisor+1,w
  5902  1ECE  0225               	subwf	___llmod@dividend+1,w
  5903  1ECF  1D03               	skipz
  5904  1ED0  2ED3               	goto	u4095
  5905  1ED1  0820               	movf	___llmod@divisor,w
  5906  1ED2  0224               	subwf	___llmod@dividend,w
  5907  1ED3                     u4095:	
  5908  1ED3  1C03               	skipc
  5909  1ED4  2EE3               	goto	l2728
  5910  1ED5  0820               	movf	___llmod@divisor,w
  5911  1ED6  02A4               	subwf	___llmod@dividend,f
  5912  1ED7  0821               	movf	___llmod@divisor+1,w
  5913  1ED8  1C03               	skipc
  5914  1ED9  0F21               	incfsz	___llmod@divisor+1,w
  5915  1EDA  02A5               	subwf	___llmod@dividend+1,f
  5916  1EDB  0822               	movf	___llmod@divisor+2,w
  5917  1EDC  1C03               	skipc
  5918  1EDD  0F22               	incfsz	___llmod@divisor+2,w
  5919  1EDE  02A6               	subwf	___llmod@dividend+2,f
  5920  1EDF  0823               	movf	___llmod@divisor+3,w
  5921  1EE0  1C03               	skipc
  5922  1EE1  0F23               	incfsz	___llmod@divisor+3,w
  5923  1EE2  02A7               	subwf	___llmod@dividend+3,f
  5924  1EE3                     l2728:	
  5925  1EE3  3001               	movlw	1
  5926  1EE4                     u4105:	
  5927  1EE4  1003               	clrc
  5928  1EE5  0CA3               	rrf	___llmod@divisor+3,f
  5929  1EE6  0CA2               	rrf	___llmod@divisor+2,f
  5930  1EE7  0CA1               	rrf	___llmod@divisor+1,f
  5931  1EE8  0CA0               	rrf	___llmod@divisor,f
  5932  1EE9  3EFF               	addlw	-1
  5933  1EEA  1D03               	skipz
  5934  1EEB  2EE4               	goto	u4105
  5935  1EEC  3001               	movlw	1
  5936  1EED  02A9               	subwf	___llmod@counter,f
  5937  1EEE  1D03               	btfss	3,2
  5938  1EEF  2EC5               	goto	l2724
  5939  1EF0                     l2732:	
  5940  1EF0  0827               	movf	___llmod@dividend+3,w
  5941  1EF1  00A3               	movwf	?___llmod+3
  5942  1EF2  0826               	movf	___llmod@dividend+2,w
  5943  1EF3  00A2               	movwf	?___llmod+2
  5944  1EF4  0825               	movf	___llmod@dividend+1,w
  5945  1EF5  00A1               	movwf	?___llmod+1
  5946  1EF6  0824               	movf	___llmod@dividend,w
  5947  1EF7  00A0               	movwf	?___llmod
  5948  1EF8  0008               	return
  5949  1EF9                     __end_of___llmod:	
  5950                           
  5951                           	psect	text13
  5952  080A                     __ptext13:	
  5953 ;; *************** function ___lldiv *****************
  5954 ;; Defined at:
  5955 ;;		line 6 in file "E:\software\pic\XC8\sources\common\lldiv.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  divisor         4    0[COMMON] unsigned long 
  5958 ;;  dividend        4    4[COMMON] unsigned long 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  quotient        4    9[COMMON] unsigned long 
  5961 ;;  counter         1   13[COMMON] unsigned char 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  4    0[COMMON] unsigned long 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5971 ;;      Params:         8       0       0       0       0
  5972 ;;      Locals:         5       0       0       0       0
  5973 ;;      Temps:          1       0       0       0       0
  5974 ;;      Totals:        14       0       0       0       0
  5975 ;;Total ram usage:       14 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; This function calls:
  5978 ;;		Nothing
  5979 ;; This function is called by:
  5980 ;;		_sprintf
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           
  5985                           ;psect for function ___lldiv
  5986  080A                     ___lldiv:	
  5987                           
  5988                           ;incstack = 0
  5989                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5990  080A  3000               	movlw	0
  5991  080B  00FC               	movwf	___lldiv@quotient+3
  5992  080C  3000               	movlw	0
  5993  080D  00FB               	movwf	___lldiv@quotient+2
  5994  080E  3000               	movlw	0
  5995  080F  00FA               	movwf	___lldiv@quotient+1
  5996  0810  3000               	movlw	0
  5997  0811  00F9               	movwf	___lldiv@quotient
  5998  0812  0873               	movf	___lldiv@divisor+3,w
  5999  0813  0472               	iorwf	___lldiv@divisor+2,w
  6000  0814  0471               	iorwf	___lldiv@divisor+1,w
  6001  0815  0470               	iorwf	___lldiv@divisor,w
  6002  0816  1903               	skipnz
  6003  0817  285F               	goto	l2712
  6004  0818  01FD               	clrf	___lldiv@counter
  6005  0819  0AFD               	incf	___lldiv@counter,f
  6006  081A                     l2698:	
  6007  081A  1BF3               	btfsc	___lldiv@divisor+3,7
  6008  081B  282A               	goto	l2700
  6009  081C  3001               	movlw	1
  6010  081D  00F8               	movwf	??___lldiv
  6011  081E                     u4005:	
  6012  081E  1003               	clrc
  6013  081F  0DF0               	rlf	___lldiv@divisor,f
  6014  0820  0DF1               	rlf	___lldiv@divisor+1,f
  6015  0821  0DF2               	rlf	___lldiv@divisor+2,f
  6016  0822  0DF3               	rlf	___lldiv@divisor+3,f
  6017  0823  0BF8               	decfsz	??___lldiv,f
  6018  0824  281E               	goto	u4005
  6019  0825  3001               	movlw	1
  6020  0826  00F8               	movwf	??___lldiv
  6021  0827  0878               	movf	??___lldiv,w
  6022  0828  07FD               	addwf	___lldiv@counter,f
  6023  0829  281A               	goto	l2698
  6024  082A                     l2700:	
  6025  082A  3001               	movlw	1
  6026  082B  00F8               	movwf	??___lldiv
  6027  082C                     u4025:	
  6028  082C  1003               	clrc
  6029  082D  0DF9               	rlf	___lldiv@quotient,f
  6030  082E  0DFA               	rlf	___lldiv@quotient+1,f
  6031  082F  0DFB               	rlf	___lldiv@quotient+2,f
  6032  0830  0DFC               	rlf	___lldiv@quotient+3,f
  6033  0831  0BF8               	decfsz	??___lldiv,f
  6034  0832  282C               	goto	u4025
  6035  0833  0873               	movf	___lldiv@divisor+3,w
  6036  0834  0277               	subwf	___lldiv@dividend+3,w
  6037  0835  1D03               	skipz
  6038  0836  2841               	goto	u4035
  6039  0837  0872               	movf	___lldiv@divisor+2,w
  6040  0838  0276               	subwf	___lldiv@dividend+2,w
  6041  0839  1D03               	skipz
  6042  083A  2841               	goto	u4035
  6043  083B  0871               	movf	___lldiv@divisor+1,w
  6044  083C  0275               	subwf	___lldiv@dividend+1,w
  6045  083D  1D03               	skipz
  6046  083E  2841               	goto	u4035
  6047  083F  0870               	movf	___lldiv@divisor,w
  6048  0840  0274               	subwf	___lldiv@dividend,w
  6049  0841                     u4035:	
  6050  0841  1C03               	skipc
  6051  0842  2852               	goto	l2708
  6052  0843  0870               	movf	___lldiv@divisor,w
  6053  0844  02F4               	subwf	___lldiv@dividend,f
  6054  0845  0871               	movf	___lldiv@divisor+1,w
  6055  0846  1C03               	skipc
  6056  0847  0F71               	incfsz	___lldiv@divisor+1,w
  6057  0848  02F5               	subwf	___lldiv@dividend+1,f
  6058  0849  0872               	movf	___lldiv@divisor+2,w
  6059  084A  1C03               	skipc
  6060  084B  0F72               	incfsz	___lldiv@divisor+2,w
  6061  084C  02F6               	subwf	___lldiv@dividend+2,f
  6062  084D  0873               	movf	___lldiv@divisor+3,w
  6063  084E  1C03               	skipc
  6064  084F  0F73               	incfsz	___lldiv@divisor+3,w
  6065  0850  02F7               	subwf	___lldiv@dividend+3,f
  6066  0851  1479               	bsf	___lldiv@quotient,0
  6067  0852                     l2708:	
  6068  0852  3001               	movlw	1
  6069  0853                     u4045:	
  6070  0853  1003               	clrc
  6071  0854  0CF3               	rrf	___lldiv@divisor+3,f
  6072  0855  0CF2               	rrf	___lldiv@divisor+2,f
  6073  0856  0CF1               	rrf	___lldiv@divisor+1,f
  6074  0857  0CF0               	rrf	___lldiv@divisor,f
  6075  0858  3EFF               	addlw	-1
  6076  0859  1D03               	skipz
  6077  085A  2853               	goto	u4045
  6078  085B  3001               	movlw	1
  6079  085C  02FD               	subwf	___lldiv@counter,f
  6080  085D  1D03               	btfss	3,2
  6081  085E  282A               	goto	l2700
  6082  085F                     l2712:	
  6083  085F  087C               	movf	___lldiv@quotient+3,w
  6084  0860  00F3               	movwf	?___lldiv+3
  6085  0861  087B               	movf	___lldiv@quotient+2,w
  6086  0862  00F2               	movwf	?___lldiv+2
  6087  0863  087A               	movf	___lldiv@quotient+1,w
  6088  0864  00F1               	movwf	?___lldiv+1
  6089  0865  0879               	movf	___lldiv@quotient,w
  6090  0866  00F0               	movwf	?___lldiv
  6091  0867  0008               	return
  6092  0868                     __end_of___lldiv:	
  6093                           
  6094                           	psect	text14
  6095  1D17                     __ptext14:	
  6096 ;; *************** function ___ftsub *****************
  6097 ;; Defined at:
  6098 ;;		line 18 in file "E:\software\pic\XC8\sources\common\ftsub.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  f2              3   61[BANK0 ] float 
  6101 ;;  f1              3   64[BANK0 ] float 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  3   61[BANK0 ] float 
  6106 ;; Registers used:
  6107 ;;		wreg, status,2, status,0, pclath, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6113 ;;      Params:         0       6       0       0       0
  6114 ;;      Locals:         0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0
  6116 ;;      Totals:         0       6       0       0       0
  6117 ;;Total ram usage:        6 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    2
  6120 ;; This function calls:
  6121 ;;		___ftadd
  6122 ;; This function is called by:
  6123 ;;		_sprintf
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           
  6128                           ;psect for function ___ftsub
  6129  1D17                     ___ftsub:	
  6130                           
  6131                           ;incstack = 0
  6132                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6133  1D17  1283               	bcf	3,5	;RP0=0, select bank0
  6134  1D18  1303               	bcf	3,6	;RP1=0, select bank0
  6135  1D19  085F               	movf	___ftsub@f2+2,w
  6136  1D1A  045E               	iorwf	___ftsub@f2+1,w
  6137  1D1B  045D               	iorwf	___ftsub@f2,w
  6138  1D1C  1903               	skipnz
  6139  1D1D  2D20               	goto	l2688
  6140  1D1E  3080               	movlw	128
  6141  1D1F  06DF               	xorwf	___ftsub@f2+2,f
  6142  1D20                     l2688:	
  6143  1D20  0860               	movf	___ftsub@f1,w
  6144  1D21  00D0               	movwf	___ftadd@f1
  6145  1D22  0861               	movf	___ftsub@f1+1,w
  6146  1D23  00D1               	movwf	___ftadd@f1+1
  6147  1D24  0862               	movf	___ftsub@f1+2,w
  6148  1D25  00D2               	movwf	___ftadd@f1+2
  6149  1D26  085D               	movf	___ftsub@f2,w
  6150  1D27  00D3               	movwf	___ftadd@f2
  6151  1D28  085E               	movf	___ftsub@f2+1,w
  6152  1D29  00D4               	movwf	___ftadd@f2+1
  6153  1D2A  085F               	movf	___ftsub@f2+2,w
  6154  1D2B  00D5               	movwf	___ftadd@f2+2
  6155  1D2C  160A  118A  25C5   	fcall	___ftadd
  6156  1D2F  1283               	bcf	3,5	;RP0=0, select bank0
  6157  1D30  1303               	bcf	3,6	;RP1=0, select bank0
  6158  1D31  0850               	movf	?___ftadd,w
  6159  1D32  00DD               	movwf	?___ftsub
  6160  1D33  0851               	movf	?___ftadd+1,w
  6161  1D34  00DE               	movwf	?___ftsub+1
  6162  1D35  0852               	movf	?___ftadd+2,w
  6163  1D36  00DF               	movwf	?___ftsub+2
  6164  1D37  0008               	return
  6165  1D38                     __end_of___ftsub:	
  6166                           
  6167                           	psect	text15
  6168  15C5                     __ptext15:	
  6169 ;; *************** function ___ftadd *****************
  6170 ;; Defined at:
  6171 ;;		line 86 in file "E:\software\pic\XC8\sources\common\ftadd.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  f1              3   48[BANK0 ] float 
  6174 ;;  f2              3   51[BANK0 ] float 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  exp1            1   60[BANK0 ] unsigned char 
  6177 ;;  exp2            1   59[BANK0 ] unsigned char 
  6178 ;;  sign            1   58[BANK0 ] unsigned char 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  3   48[BANK0 ] float 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0, pclath, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6188 ;;      Params:         0       6       0       0       0
  6189 ;;      Locals:         0       3       0       0       0
  6190 ;;      Temps:          0       4       0       0       0
  6191 ;;      Totals:         0      13       0       0       0
  6192 ;;Total ram usage:       13 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    1
  6195 ;; This function calls:
  6196 ;;		___ftpack
  6197 ;; This function is called by:
  6198 ;;		_sprintf
  6199 ;;		___ftsub
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function ___ftadd
  6205  15C5                     ___ftadd:	
  6206                           
  6207                           ;incstack = 0
  6208                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6209  15C5  1283               	bcf	3,5	;RP0=0, select bank0
  6210  15C6  1303               	bcf	3,6	;RP1=0, select bank0
  6211  15C7  0850               	movf	___ftadd@f1,w
  6212  15C8  00D6               	movwf	??___ftadd
  6213  15C9  0851               	movf	___ftadd@f1+1,w
  6214  15CA  00D7               	movwf	??___ftadd+1
  6215  15CB  0852               	movf	___ftadd@f1+2,w
  6216  15CC  00D8               	movwf	??___ftadd+2
  6217  15CD  1003               	clrc
  6218  15CE  0D57               	rlf	??___ftadd+1,w
  6219  15CF  0D58               	rlf	??___ftadd+2,w
  6220  15D0  00D9               	movwf	??___ftadd+3
  6221  15D1  0859               	movf	??___ftadd+3,w
  6222  15D2  00DC               	movwf	___ftadd@exp1
  6223  15D3  0853               	movf	___ftadd@f2,w
  6224  15D4  00D6               	movwf	??___ftadd
  6225  15D5  0854               	movf	___ftadd@f2+1,w
  6226  15D6  00D7               	movwf	??___ftadd+1
  6227  15D7  0855               	movf	___ftadd@f2+2,w
  6228  15D8  00D8               	movwf	??___ftadd+2
  6229  15D9  1003               	clrc
  6230  15DA  0D57               	rlf	??___ftadd+1,w
  6231  15DB  0D58               	rlf	??___ftadd+2,w
  6232  15DC  00D9               	movwf	??___ftadd+3
  6233  15DD  0859               	movf	??___ftadd+3,w
  6234  15DE  00DB               	movwf	___ftadd@exp2
  6235  15DF  085C               	movf	___ftadd@exp1,w
  6236  15E0  1903               	btfsc	3,2
  6237  15E1  2DEE               	goto	l2222
  6238  15E2  085B               	movf	___ftadd@exp2,w
  6239  15E3  025C               	subwf	___ftadd@exp1,w
  6240  15E4  1803               	skipnc
  6241  15E5  2DF5               	goto	l2226
  6242  15E6  035C               	decf	___ftadd@exp1,w
  6243  15E7  3AFF               	xorlw	255
  6244  15E8  075B               	addwf	___ftadd@exp2,w
  6245  15E9  00D6               	movwf	??___ftadd
  6246  15EA  3019               	movlw	25
  6247  15EB  0256               	subwf	??___ftadd,w
  6248  15EC  1C03               	skipc
  6249  15ED  2DF5               	goto	l2226
  6250  15EE                     l2222:	
  6251  15EE  0853               	movf	___ftadd@f2,w
  6252  15EF  00D0               	movwf	?___ftadd
  6253  15F0  0854               	movf	___ftadd@f2+1,w
  6254  15F1  00D1               	movwf	?___ftadd+1
  6255  15F2  0855               	movf	___ftadd@f2+2,w
  6256  15F3  00D2               	movwf	?___ftadd+2
  6257  15F4  0008               	return
  6258  15F5                     l2226:	
  6259  15F5  085B               	movf	___ftadd@exp2,w
  6260  15F6  1903               	btfsc	3,2
  6261  15F7  0008               	return
  6262  15F8  085C               	movf	___ftadd@exp1,w
  6263  15F9  025B               	subwf	___ftadd@exp2,w
  6264  15FA  1803               	skipnc
  6265  15FB  2E04               	goto	l2232
  6266  15FC  035B               	decf	___ftadd@exp2,w
  6267  15FD  3AFF               	xorlw	255
  6268  15FE  075C               	addwf	___ftadd@exp1,w
  6269  15FF  00D6               	movwf	??___ftadd
  6270  1600  3019               	movlw	25
  6271  1601  0256               	subwf	??___ftadd,w
  6272  1602  1803               	btfsc	3,0
  6273  1603  0008               	return
  6274  1604                     l2232:	
  6275  1604  3006               	movlw	6
  6276  1605  00D6               	movwf	??___ftadd
  6277  1606  0856               	movf	??___ftadd,w
  6278  1607  00DA               	movwf	___ftadd@sign
  6279  1608  1BD2               	btfsc	___ftadd@f1+2,7
  6280  1609  17DA               	bsf	___ftadd@sign,7
  6281  160A  1BD5               	btfsc	___ftadd@f2+2,7
  6282  160B  175A               	bsf	___ftadd@sign,6
  6283  160C  17D1               	bsf	___ftadd@f1+1,7
  6284  160D  30FF               	movlw	255
  6285  160E  05D0               	andwf	___ftadd@f1,f
  6286  160F  30FF               	movlw	255
  6287  1610  05D1               	andwf	___ftadd@f1+1,f
  6288  1611  3000               	movlw	0
  6289  1612  05D2               	andwf	___ftadd@f1+2,f
  6290  1613  17D4               	bsf	___ftadd@f2+1,7
  6291  1614  30FF               	movlw	255
  6292  1615  05D3               	andwf	___ftadd@f2,f
  6293  1616  30FF               	movlw	255
  6294  1617  05D4               	andwf	___ftadd@f2+1,f
  6295  1618  3000               	movlw	0
  6296  1619  05D5               	andwf	___ftadd@f2+2,f
  6297  161A  085B               	movf	___ftadd@exp2,w
  6298  161B  025C               	subwf	___ftadd@exp1,w
  6299  161C  1803               	skipnc
  6300  161D  2E44               	goto	l2254
  6301  161E                     l2244:	
  6302  161E  3001               	movlw	1
  6303  161F                     u3045:	
  6304  161F  1003               	clrc
  6305  1620  0DD3               	rlf	___ftadd@f2,f
  6306  1621  0DD4               	rlf	___ftadd@f2+1,f
  6307  1622  0DD5               	rlf	___ftadd@f2+2,f
  6308  1623  3EFF               	addlw	-1
  6309  1624  1D03               	skipz
  6310  1625  2E1F               	goto	u3045
  6311  1626  3001               	movlw	1
  6312  1627  02DB               	subwf	___ftadd@exp2,f
  6313  1628  085B               	movf	___ftadd@exp2,w
  6314  1629  065C               	xorwf	___ftadd@exp1,w
  6315  162A  1903               	skipnz
  6316  162B  2E3F               	goto	l2252
  6317  162C  3001               	movlw	1
  6318  162D  02DA               	subwf	___ftadd@sign,f
  6319  162E  085A               	movf	___ftadd@sign,w
  6320  162F  3907               	andlw	7
  6321  1630  1903               	btfsc	3,2
  6322  1631  2E3F               	goto	l2252
  6323  1632  2E1E               	goto	l2244
  6324  1633                     l2250:	
  6325  1633  3001               	movlw	1
  6326  1634                     u3075:	
  6327  1634  1003               	clrc
  6328  1635  0CD2               	rrf	___ftadd@f1+2,f
  6329  1636  0CD1               	rrf	___ftadd@f1+1,f
  6330  1637  0CD0               	rrf	___ftadd@f1,f
  6331  1638  3EFF               	addlw	-1
  6332  1639  1D03               	skipz
  6333  163A  2E34               	goto	u3075
  6334  163B  3001               	movlw	1
  6335  163C  00D6               	movwf	??___ftadd
  6336  163D  0856               	movf	??___ftadd,w
  6337  163E  07DC               	addwf	___ftadd@exp1,f
  6338  163F                     l2252:	
  6339  163F  085C               	movf	___ftadd@exp1,w
  6340  1640  065B               	xorwf	___ftadd@exp2,w
  6341  1641  1903               	btfsc	3,2
  6342  1642  2E6D               	goto	l582
  6343  1643  2E33               	goto	l2250
  6344  1644                     l2254:	
  6345  1644  085C               	movf	___ftadd@exp1,w
  6346  1645  025B               	subwf	___ftadd@exp2,w
  6347  1646  1803               	skipnc
  6348  1647  2E6D               	goto	l582
  6349  1648                     l2256:	
  6350  1648  3001               	movlw	1
  6351  1649                     u3105:	
  6352  1649  1003               	clrc
  6353  164A  0DD0               	rlf	___ftadd@f1,f
  6354  164B  0DD1               	rlf	___ftadd@f1+1,f
  6355  164C  0DD2               	rlf	___ftadd@f1+2,f
  6356  164D  3EFF               	addlw	-1
  6357  164E  1D03               	skipz
  6358  164F  2E49               	goto	u3105
  6359  1650  3001               	movlw	1
  6360  1651  02DC               	subwf	___ftadd@exp1,f
  6361  1652  085B               	movf	___ftadd@exp2,w
  6362  1653  065C               	xorwf	___ftadd@exp1,w
  6363  1654  1903               	skipnz
  6364  1655  2E69               	goto	l2264
  6365  1656  3001               	movlw	1
  6366  1657  02DA               	subwf	___ftadd@sign,f
  6367  1658  085A               	movf	___ftadd@sign,w
  6368  1659  3907               	andlw	7
  6369  165A  1903               	btfsc	3,2
  6370  165B  2E69               	goto	l2264
  6371  165C  2E48               	goto	l2256
  6372  165D                     l2262:	
  6373  165D  3001               	movlw	1
  6374  165E                     u3135:	
  6375  165E  1003               	clrc
  6376  165F  0CD5               	rrf	___ftadd@f2+2,f
  6377  1660  0CD4               	rrf	___ftadd@f2+1,f
  6378  1661  0CD3               	rrf	___ftadd@f2,f
  6379  1662  3EFF               	addlw	-1
  6380  1663  1D03               	skipz
  6381  1664  2E5E               	goto	u3135
  6382  1665  3001               	movlw	1
  6383  1666  00D6               	movwf	??___ftadd
  6384  1667  0856               	movf	??___ftadd,w
  6385  1668  07DB               	addwf	___ftadd@exp2,f
  6386  1669                     l2264:	
  6387  1669  085C               	movf	___ftadd@exp1,w
  6388  166A  065B               	xorwf	___ftadd@exp2,w
  6389  166B  1D03               	skipz
  6390  166C  2E5D               	goto	l2262
  6391  166D                     l582:	
  6392  166D  1FDA               	btfss	___ftadd@sign,7
  6393  166E  2E7F               	goto	l2268
  6394  166F  30FF               	movlw	255
  6395  1670  06D0               	xorwf	___ftadd@f1,f
  6396  1671  30FF               	movlw	255
  6397  1672  06D1               	xorwf	___ftadd@f1+1,f
  6398  1673  30FF               	movlw	255
  6399  1674  06D2               	xorwf	___ftadd@f1+2,f
  6400  1675  3001               	movlw	1
  6401  1676  07D0               	addwf	___ftadd@f1,f
  6402  1677  3000               	movlw	0
  6403  1678  1803               	skipnc
  6404  1679  3001               	movlw	1
  6405  167A  07D1               	addwf	___ftadd@f1+1,f
  6406  167B  3000               	movlw	0
  6407  167C  1803               	skipnc
  6408  167D  3001               	movlw	1
  6409  167E  07D2               	addwf	___ftadd@f1+2,f
  6410  167F                     l2268:	
  6411  167F  1F5A               	btfss	___ftadd@sign,6
  6412  1680  2E91               	goto	l2272
  6413  1681  30FF               	movlw	255
  6414  1682  06D3               	xorwf	___ftadd@f2,f
  6415  1683  30FF               	movlw	255
  6416  1684  06D4               	xorwf	___ftadd@f2+1,f
  6417  1685  30FF               	movlw	255
  6418  1686  06D5               	xorwf	___ftadd@f2+2,f
  6419  1687  3001               	movlw	1
  6420  1688  07D3               	addwf	___ftadd@f2,f
  6421  1689  3000               	movlw	0
  6422  168A  1803               	skipnc
  6423  168B  3001               	movlw	1
  6424  168C  07D4               	addwf	___ftadd@f2+1,f
  6425  168D  3000               	movlw	0
  6426  168E  1803               	skipnc
  6427  168F  3001               	movlw	1
  6428  1690  07D5               	addwf	___ftadd@f2+2,f
  6429  1691                     l2272:	
  6430  1691  01DA               	clrf	___ftadd@sign
  6431  1692  0850               	movf	___ftadd@f1,w
  6432  1693  07D3               	addwf	___ftadd@f2,f
  6433  1694  0851               	movf	___ftadd@f1+1,w
  6434  1695  1103               	clrz
  6435  1696  1803               	skipnc
  6436  1697  0A51               	incf	___ftadd@f1+1,w
  6437  1698  1D03               	btfss	3,2
  6438  1699  07D4               	addwf	___ftadd@f2+1,f
  6439  169A  0852               	movf	___ftadd@f1+2,w
  6440  169B  1103               	clrz
  6441  169C  1803               	skipnc
  6442  169D  0A52               	incf	___ftadd@f1+2,w
  6443  169E  1D03               	btfss	3,2
  6444  169F  07D5               	addwf	___ftadd@f2+2,f
  6445  16A0  1FD5               	btfss	___ftadd@f2+2,7
  6446  16A1  2EB4               	goto	l2282
  6447  16A2  30FF               	movlw	255
  6448  16A3  06D3               	xorwf	___ftadd@f2,f
  6449  16A4  30FF               	movlw	255
  6450  16A5  06D4               	xorwf	___ftadd@f2+1,f
  6451  16A6  30FF               	movlw	255
  6452  16A7  06D5               	xorwf	___ftadd@f2+2,f
  6453  16A8  3001               	movlw	1
  6454  16A9  07D3               	addwf	___ftadd@f2,f
  6455  16AA  3000               	movlw	0
  6456  16AB  1803               	skipnc
  6457  16AC  3001               	movlw	1
  6458  16AD  07D4               	addwf	___ftadd@f2+1,f
  6459  16AE  3000               	movlw	0
  6460  16AF  1803               	skipnc
  6461  16B0  3001               	movlw	1
  6462  16B1  07D5               	addwf	___ftadd@f2+2,f
  6463  16B2  01DA               	clrf	___ftadd@sign
  6464  16B3  0ADA               	incf	___ftadd@sign,f
  6465  16B4                     l2282:	
  6466  16B4  0853               	movf	___ftadd@f2,w
  6467  16B5  00F0               	movwf	___ftpack@arg
  6468  16B6  0854               	movf	___ftadd@f2+1,w
  6469  16B7  00F1               	movwf	___ftpack@arg+1
  6470  16B8  0855               	movf	___ftadd@f2+2,w
  6471  16B9  00F2               	movwf	___ftpack@arg+2
  6472  16BA  085C               	movf	___ftadd@exp1,w
  6473  16BB  00D6               	movwf	??___ftadd
  6474  16BC  0856               	movf	??___ftadd,w
  6475  16BD  00F3               	movwf	___ftpack@exp
  6476  16BE  085A               	movf	___ftadd@sign,w
  6477  16BF  00D7               	movwf	??___ftadd+1
  6478  16C0  0857               	movf	??___ftadd+1,w
  6479  16C1  00F4               	movwf	___ftpack@sign
  6480  16C2  160A  118A  2148   	fcall	___ftpack
  6481  16C5  0870               	movf	?___ftpack,w
  6482  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  6483  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  6484  16C8  00D0               	movwf	?___ftadd
  6485  16C9  0871               	movf	?___ftpack+1,w
  6486  16CA  00D1               	movwf	?___ftadd+1
  6487  16CB  0872               	movf	?___ftpack+2,w
  6488  16CC  00D2               	movwf	?___ftadd+2
  6489  16CD  0008               	return
  6490  16CE                     __end_of___ftadd:	
  6491                           
  6492                           	psect	text16
  6493  0802                     __ptext16:	
  6494 ;; *************** function ___ftneg *****************
  6495 ;; Defined at:
  6496 ;;		line 15 in file "E:\software\pic\XC8\sources\common\ftneg.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;  f1              3    0[COMMON] float 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  3    0[COMMON] float 
  6503 ;; Registers used:
  6504 ;;		wreg
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6510 ;;      Params:         3       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0
  6513 ;;      Totals:         3       0       0       0       0
  6514 ;;Total ram usage:        3 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_sprintf
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function ___ftneg
  6525  0802                     ___ftneg:	
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in ___ftneg: [wreg]
  6529  0802  0872               	movf	___ftneg@f1+2,w
  6530  0803  0471               	iorwf	___ftneg@f1+1,w
  6531  0804  0470               	iorwf	___ftneg@f1,w
  6532  0805  1903               	skipnz
  6533  0806  0008               	return
  6534  0807  3080               	movlw	128
  6535  0808  06F2               	xorwf	___ftneg@f1+2,f
  6536  0809  0008               	return
  6537  080A                     __end_of___ftneg:	
  6538                           
  6539                           	psect	text17
  6540  10EB                     __ptext17:	
  6541 ;; *************** function ___ftge *****************
  6542 ;; Defined at:
  6543 ;;		line 4 in file "E:\software\pic\XC8\sources\common\ftge.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  ff1             3    0[COMMON] float 
  6546 ;;  ff2             3    3[COMMON] float 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6558 ;;      Params:         6       0       0       0       0
  6559 ;;      Locals:         0       0       0       0       0
  6560 ;;      Temps:          6       0       0       0       0
  6561 ;;      Totals:        12       0       0       0       0
  6562 ;;Total ram usage:       12 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_sprintf
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function ___ftge
  6573  10EB                     ___ftge:	
  6574                           
  6575                           ;incstack = 0
  6576                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6577  10EB  1FF2               	btfss	___ftge@ff1+2,7
  6578  10EC  2912               	goto	l2660
  6579  10ED  3000               	movlw	0
  6580  10EE  00F6               	movwf	??___ftge
  6581  10EF  3000               	movlw	0
  6582  10F0  00F7               	movwf	??___ftge+1
  6583  10F1  3080               	movlw	128
  6584  10F2  00F8               	movwf	??___ftge+2
  6585  10F3  0970               	comf	___ftge@ff1,w
  6586  10F4  00F9               	movwf	??___ftge+3
  6587  10F5  0971               	comf	___ftge@ff1+1,w
  6588  10F6  00FA               	movwf	??___ftge+4
  6589  10F7  0972               	comf	___ftge@ff1+2,w
  6590  10F8  00FB               	movwf	??___ftge+5
  6591  10F9  0AF9               	incf	??___ftge+3,f
  6592  10FA  1903               	skipnz
  6593  10FB  0AFA               	incf	??___ftge+4,f
  6594  10FC  1903               	skipnz
  6595  10FD  0AFB               	incf	??___ftge+5,f
  6596  10FE  0879               	movf	??___ftge+3,w
  6597  10FF  07F6               	addwf	??___ftge,f
  6598  1100  087A               	movf	??___ftge+4,w
  6599  1101  1803               	skipnc
  6600  1102  0F7A               	incfsz	??___ftge+4,w
  6601  1103  2905               	goto	u3931
  6602  1104  2906               	goto	u3932
  6603  1105                     u3931:	
  6604  1105  07F7               	addwf	??___ftge+1,f
  6605  1106                     u3932:	
  6606  1106  087B               	movf	??___ftge+5,w
  6607  1107  1803               	skipnc
  6608  1108  0F7B               	incfsz	??___ftge+5,w
  6609  1109  290B               	goto	u3933
  6610  110A  290C               	goto	u3934
  6611  110B                     u3933:	
  6612  110B  07F8               	addwf	??___ftge+2,f
  6613  110C                     u3934:	
  6614  110C  0876               	movf	??___ftge,w
  6615  110D  00F0               	movwf	___ftge@ff1
  6616  110E  0877               	movf	??___ftge+1,w
  6617  110F  00F1               	movwf	___ftge@ff1+1
  6618  1110  0878               	movf	??___ftge+2,w
  6619  1111  00F2               	movwf	___ftge@ff1+2
  6620  1112                     l2660:	
  6621  1112  1FF5               	btfss	___ftge@ff2+2,7
  6622  1113  2939               	goto	l2664
  6623  1114  3000               	movlw	0
  6624  1115  00F6               	movwf	??___ftge
  6625  1116  3000               	movlw	0
  6626  1117  00F7               	movwf	??___ftge+1
  6627  1118  3080               	movlw	128
  6628  1119  00F8               	movwf	??___ftge+2
  6629  111A  0973               	comf	___ftge@ff2,w
  6630  111B  00F9               	movwf	??___ftge+3
  6631  111C  0974               	comf	___ftge@ff2+1,w
  6632  111D  00FA               	movwf	??___ftge+4
  6633  111E  0975               	comf	___ftge@ff2+2,w
  6634  111F  00FB               	movwf	??___ftge+5
  6635  1120  0AF9               	incf	??___ftge+3,f
  6636  1121  1903               	skipnz
  6637  1122  0AFA               	incf	??___ftge+4,f
  6638  1123  1903               	skipnz
  6639  1124  0AFB               	incf	??___ftge+5,f
  6640  1125  0879               	movf	??___ftge+3,w
  6641  1126  07F6               	addwf	??___ftge,f
  6642  1127  087A               	movf	??___ftge+4,w
  6643  1128  1803               	skipnc
  6644  1129  0F7A               	incfsz	??___ftge+4,w
  6645  112A  292C               	goto	u3951
  6646  112B  292D               	goto	u3952
  6647  112C                     u3951:	
  6648  112C  07F7               	addwf	??___ftge+1,f
  6649  112D                     u3952:	
  6650  112D  087B               	movf	??___ftge+5,w
  6651  112E  1803               	skipnc
  6652  112F  0F7B               	incfsz	??___ftge+5,w
  6653  1130  2932               	goto	u3953
  6654  1131  2933               	goto	u3954
  6655  1132                     u3953:	
  6656  1132  07F8               	addwf	??___ftge+2,f
  6657  1133                     u3954:	
  6658  1133  0876               	movf	??___ftge,w
  6659  1134  00F3               	movwf	___ftge@ff2
  6660  1135  0877               	movf	??___ftge+1,w
  6661  1136  00F4               	movwf	___ftge@ff2+1
  6662  1137  0878               	movf	??___ftge+2,w
  6663  1138  00F5               	movwf	___ftge@ff2+2
  6664  1139                     l2664:	
  6665  1139  3080               	movlw	128
  6666  113A  06F2               	xorwf	___ftge@ff1+2,f
  6667  113B  3080               	movlw	128
  6668  113C  06F5               	xorwf	___ftge@ff2+2,f
  6669  113D  0875               	movf	___ftge@ff2+2,w
  6670  113E  0272               	subwf	___ftge@ff1+2,w
  6671  113F  1D03               	skipz
  6672  1140  0008               	return
  6673  1141  0874               	movf	___ftge@ff2+1,w
  6674  1142  0271               	subwf	___ftge@ff1+1,w
  6675  1143  1D03               	skipz
  6676  1144  0008               	return
  6677  1145  0873               	movf	___ftge@ff2,w
  6678  1146  0270               	subwf	___ftge@ff1,w
  6679  1147  0008               	return
  6680  1148                     __end_of___ftge:	
  6681                           
  6682                           	psect	text18
  6683  1D38                     __ptext18:	
  6684 ;; *************** function _set_H_bridge_pins *****************
  6685 ;; Defined at:
  6686 ;;		line 160 in file "main.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6700 ;;      Params:         0       0       0       0       0
  6701 ;;      Locals:         0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0
  6703 ;;      Totals:         0       0       0       0       0
  6704 ;;Total ram usage:        0 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; This function calls:
  6707 ;;		Nothing
  6708 ;; This function is called by:
  6709 ;;		_main
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _set_H_bridge_pins
  6715  1D38                     _set_H_bridge_pins:	
  6716                           
  6717                           ;main.c: 161: if (current_direction == 0){
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _set_H_bridge_pins: [wreg+status,2+status,0]
  6721  1D38  1683               	bsf	3,5	;RP0=1, select bank1
  6722  1D39  1303               	bcf	3,6	;RP1=0, select bank1
  6723  1D3A  086D               	movf	_current_direction^(0+128),w
  6724  1D3B  1D03               	btfss	3,2
  6725  1D3C  2D4E               	goto	l150
  6726                           
  6727                           ;main.c: 162: RA1 = 1;
  6728  1D3D  1283               	bcf	3,5	;RP0=0, select bank0
  6729  1D3E  1303               	bcf	3,6	;RP1=0, select bank0
  6730  1D3F  1485               	bsf	5,1	;volatile
  6731                           
  6732                           ;main.c: 163: TRISCbits.TRISC2 = 0;
  6733  1D40  1683               	bsf	3,5	;RP0=1, select bank1
  6734  1D41  1303               	bcf	3,6	;RP1=0, select bank1
  6735  1D42  1107               	bcf	7,2	;volatile
  6736                           
  6737                           ;main.c: 164: PORTBbits.RB0 = 1;
  6738  1D43  1283               	bcf	3,5	;RP0=0, select bank0
  6739  1D44  1303               	bcf	3,6	;RP1=0, select bank0
  6740  1D45  1406               	bsf	6,0	;volatile
  6741                           
  6742                           ;main.c: 165: RA2 = 0;
  6743  1D46  1105               	bcf	5,2	;volatile
  6744                           
  6745                           ;main.c: 166: TRISBbits.TRISB2 = 1;
  6746  1D47  1683               	bsf	3,5	;RP0=1, select bank1
  6747  1D48  1303               	bcf	3,6	;RP1=0, select bank1
  6748  1D49  1506               	bsf	6,2	;volatile
  6749                           
  6750                           ;main.c: 167: PORTBbits.RB1 = 0;
  6751  1D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6752  1D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6753  1D4C  1086               	bcf	6,1	;volatile
  6754                           
  6755                           ;main.c: 168: }
  6756  1D4D  0008               	return
  6757  1D4E                     l150:	
  6758                           
  6759                           ;main.c: 169: else{
  6760                           ;main.c: 170: RA2 = 1;
  6761  1D4E  1283               	bcf	3,5	;RP0=0, select bank0
  6762  1D4F  1303               	bcf	3,6	;RP1=0, select bank0
  6763  1D50  1505               	bsf	5,2	;volatile
  6764                           
  6765                           ;main.c: 171: TRISBbits.TRISB2 = 0;
  6766  1D51  1683               	bsf	3,5	;RP0=1, select bank1
  6767  1D52  1303               	bcf	3,6	;RP1=0, select bank1
  6768  1D53  1106               	bcf	6,2	;volatile
  6769                           
  6770                           ;main.c: 172: PORTBbits.RB1 = 1;
  6771  1D54  1283               	bcf	3,5	;RP0=0, select bank0
  6772  1D55  1303               	bcf	3,6	;RP1=0, select bank0
  6773  1D56  1486               	bsf	6,1	;volatile
  6774                           
  6775                           ;main.c: 173: RA1 = 0;
  6776  1D57  1085               	bcf	5,1	;volatile
  6777                           
  6778                           ;main.c: 174: TRISCbits.TRISC2 = 1;
  6779  1D58  1683               	bsf	3,5	;RP0=1, select bank1
  6780  1D59  1303               	bcf	3,6	;RP1=0, select bank1
  6781  1D5A  1507               	bsf	7,2	;volatile
  6782                           
  6783                           ;main.c: 175: PORTBbits.RB0 = 0;
  6784  1D5B  1283               	bcf	3,5	;RP0=0, select bank0
  6785  1D5C  1303               	bcf	3,6	;RP1=0, select bank0
  6786  1D5D  1006               	bcf	6,0	;volatile
  6787  1D5E  0008               	return
  6788  1D5F                     __end_of_set_H_bridge_pins:	
  6789                           ;main.c: 176: }
  6790                           ;main.c: 177: return;
  6791                           
  6792                           
  6793                           	psect	text19
  6794  1EF9                     __ptext19:	
  6795 ;; *************** function _PWM_Initialize *****************
  6796 ;; Defined at:
  6797 ;;		line 113 in file "main.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  PWM_freq        4   61[BANK0 ] long 
  6800 ;;  init_pulse_w    2   65[BANK0 ] unsigned int 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, pclath, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6812 ;;      Params:         0       6       0       0       0
  6813 ;;      Locals:         0       0       0       0       0
  6814 ;;      Temps:          0       4       0       0       0
  6815 ;;      Totals:         0      10       0       0       0
  6816 ;;Total ram usage:       10 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    3
  6819 ;; This function calls:
  6820 ;;		___aldiv
  6821 ;;		_set_PWM_duty_cycle
  6822 ;; This function is called by:
  6823 ;;		_main
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _PWM_Initialize
  6829  1EF9                     _PWM_Initialize:	
  6830                           
  6831                           ;main.c: 115: PR2 = (unsigned)((4000000/(PWM_freq*4*4)) - 1);
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6835  1EF9  1283               	bcf	3,5	;RP0=0, select bank0
  6836  1EFA  1303               	bcf	3,6	;RP1=0, select bank0
  6837  1EFB  085D               	movf	PWM_Initialize@PWM_freq,w
  6838  1EFC  00E3               	movwf	??_PWM_Initialize
  6839  1EFD  085E               	movf	PWM_Initialize@PWM_freq+1,w
  6840  1EFE  00E4               	movwf	??_PWM_Initialize+1
  6841  1EFF  085F               	movf	PWM_Initialize@PWM_freq+2,w
  6842  1F00  00E5               	movwf	??_PWM_Initialize+2
  6843  1F01  0860               	movf	PWM_Initialize@PWM_freq+3,w
  6844  1F02  00E6               	movwf	??_PWM_Initialize+3
  6845  1F03  3002               	movlw	2
  6846  1F04                     u4195:	
  6847  1F04  1003               	clrc
  6848  1F05  0DE3               	rlf	??_PWM_Initialize,f
  6849  1F06  0DE4               	rlf	??_PWM_Initialize+1,f
  6850  1F07  0DE5               	rlf	??_PWM_Initialize+2,f
  6851  1F08  0DE6               	rlf	??_PWM_Initialize+3,f
  6852  1F09  3EFF               	addlw	-1
  6853  1F0A  1D03               	skipz
  6854  1F0B  2F04               	goto	u4195
  6855  1F0C  3002               	movlw	2
  6856  1F0D                     u4205:	
  6857  1F0D  1003               	clrc
  6858  1F0E  0DE3               	rlf	??_PWM_Initialize,f
  6859  1F0F  0DE4               	rlf	??_PWM_Initialize+1,f
  6860  1F10  0DE5               	rlf	??_PWM_Initialize+2,f
  6861  1F11  0DE6               	rlf	??_PWM_Initialize+3,f
  6862  1F12  3EFF               	addlw	-1
  6863  1F13  1D03               	skipz
  6864  1F14  2F0D               	goto	u4205
  6865  1F15  0866               	movf	??_PWM_Initialize+3,w
  6866  1F16  00F3               	movwf	___aldiv@divisor+3
  6867  1F17  0865               	movf	??_PWM_Initialize+2,w
  6868  1F18  00F2               	movwf	___aldiv@divisor+2
  6869  1F19  0864               	movf	??_PWM_Initialize+1,w
  6870  1F1A  00F1               	movwf	___aldiv@divisor+1
  6871  1F1B  0863               	movf	??_PWM_Initialize,w
  6872  1F1C  00F0               	movwf	___aldiv@divisor
  6873  1F1D  3000               	movlw	0
  6874  1F1E  00F7               	movwf	___aldiv@dividend+3
  6875  1F1F  303D               	movlw	61
  6876  1F20  00F6               	movwf	___aldiv@dividend+2
  6877  1F21  3009               	movlw	9
  6878  1F22  00F5               	movwf	___aldiv@dividend+1
  6879  1F23  3000               	movlw	0
  6880  1F24  00F4               	movwf	___aldiv@dividend
  6881  1F25  160A  118A  2242  160A  158A  	fcall	___aldiv
  6882  1F2A  0870               	movf	?___aldiv,w
  6883  1F2B  3EFF               	addlw	255
  6884  1F2C  1683               	bsf	3,5	;RP0=1, select bank1
  6885  1F2D  1303               	bcf	3,6	;RP1=0, select bank1
  6886  1F2E  0092               	movwf	18	;volatile
  6887                           
  6888                           ;main.c: 116: CCP1CONbits.P1M = 0b10;
  6889  1F2F  1283               	bcf	3,5	;RP0=0, select bank0
  6890  1F30  1303               	bcf	3,6	;RP1=0, select bank0
  6891  1F31  0817               	movf	23,w	;volatile
  6892  1F32  393F               	andlw	-193
  6893  1F33  3880               	iorlw	128
  6894  1F34  0097               	movwf	23	;volatile
  6895                           
  6896                           ;main.c: 117: CCP1CONbits.CCP1M = 0b1101;
  6897  1F35  0817               	movf	23,w	;volatile
  6898  1F36  39F0               	andlw	-16
  6899  1F37  380D               	iorlw	13
  6900  1F38  0097               	movwf	23	;volatile
  6901                           
  6902                           ;main.c: 119: T2CONbits.T2CKPS = 0b01;
  6903  1F39  0812               	movf	18,w	;volatile
  6904  1F3A  39FC               	andlw	-4
  6905  1F3B  3801               	iorlw	1
  6906  1F3C  0092               	movwf	18	;volatile
  6907                           
  6908                           ;main.c: 120: T2CONbits.TMR2ON = 0b1;
  6909  1F3D  1512               	bsf	18,2	;volatile
  6910                           
  6911                           ;main.c: 124: set_PWM_duty_cycle(init_pulse_width);
  6912  1F3E  0862               	movf	PWM_Initialize@init_pulse_width+1,w
  6913  1F3F  00D8               	movwf	set_PWM_duty_cycle@duty+1
  6914  1F40  0861               	movf	PWM_Initialize@init_pulse_width,w
  6915  1F41  00D7               	movwf	set_PWM_duty_cycle@duty
  6916  1F42  160A  118A  22D1   	fcall	_set_PWM_duty_cycle
  6917                           
  6918                           ;main.c: 126: TRISC2 = 0;
  6919  1F45  1683               	bsf	3,5	;RP0=1, select bank1
  6920  1F46  1303               	bcf	3,6	;RP1=0, select bank1
  6921  1F47  1107               	bcf	7,2	;volatile
  6922                           
  6923                           ;main.c: 127: TRISB2 = 0;
  6924  1F48  1106               	bcf	6,2	;volatile
  6925  1F49  0008               	return
  6926  1F4A                     __end_of_PWM_Initialize:	
  6927                           ;main.c: 129: return;
  6928                           
  6929                           
  6930                           	psect	text20
  6931  12D1                     __ptext20:	
  6932 ;; *************** function _set_PWM_duty_cycle *****************
  6933 ;; Defined at:
  6934 ;;		line 132 in file "main.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;  duty            2   55[BANK0 ] unsigned int 
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;		None
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0, pclath, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6948 ;;      Params:         0       2       0       0       0
  6949 ;;      Locals:         0       0       0       0       0
  6950 ;;      Temps:          0       4       0       0       0
  6951 ;;      Totals:         0       6       0       0       0
  6952 ;;Total ram usage:        6 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    2
  6955 ;; This function calls:
  6956 ;;		___aldiv
  6957 ;;		___altoft
  6958 ;;		___ftdiv
  6959 ;;		___ftmul
  6960 ;;		___fttol
  6961 ;;		___lwtoft
  6962 ;; This function is called by:
  6963 ;;		_main
  6964 ;;		_PWM_Initialize
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _set_PWM_duty_cycle
  6970  12D1                     _set_PWM_duty_cycle:	
  6971                           
  6972                           ;main.c: 133: if(duty<1023){
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _set_PWM_duty_cycle: [wreg+status,2+status,0+pclath+cstack]
  6976  12D1  3003               	movlw	3
  6977  12D2  1283               	bcf	3,5	;RP0=0, select bank0
  6978  12D3  1303               	bcf	3,6	;RP1=0, select bank0
  6979  12D4  0258               	subwf	set_PWM_duty_cycle@duty+1,w
  6980  12D5  30FF               	movlw	255
  6981  12D6  1903               	skipnz
  6982  12D7  0257               	subwf	set_PWM_duty_cycle@duty,w
  6983  12D8  1803               	skipnc
  6984  12D9  0008               	return
  6985                           
  6986                           ;main.c: 134: duty = (uint16_t)(((float)duty/1023)*(4000000/(PWM_freq*4)));
  6987  12DA  0858               	movf	set_PWM_duty_cycle@duty+1,w
  6988  12DB  00F9               	movwf	___lwtoft@c+1
  6989  12DC  0857               	movf	set_PWM_duty_cycle@duty,w
  6990  12DD  00F8               	movwf	___lwtoft@c
  6991  12DE  160A  158A  24CF  160A  118A  	fcall	___lwtoft
  6992  12E3  0878               	movf	?___lwtoft,w
  6993  12E4  1283               	bcf	3,5	;RP0=0, select bank0
  6994  12E5  1303               	bcf	3,6	;RP1=0, select bank0
  6995  12E6  00A3               	movwf	___ftdiv@f1
  6996  12E7  0879               	movf	?___lwtoft+1,w
  6997  12E8  00A4               	movwf	___ftdiv@f1+1
  6998  12E9  087A               	movf	?___lwtoft+2,w
  6999  12EA  00A5               	movwf	___ftdiv@f1+2
  7000  12EB  30C0               	movlw	192
  7001  12EC  00A0               	movwf	___ftdiv@f2
  7002  12ED  307F               	movlw	127
  7003  12EE  00A1               	movwf	___ftdiv@f2+1
  7004  12EF  3044               	movlw	68
  7005  12F0  00A2               	movwf	___ftdiv@f2+2
  7006  12F1  160A  118A  2377  160A  118A  	fcall	___ftdiv
  7007  12F6  1283               	bcf	3,5	;RP0=0, select bank0
  7008  12F7  1303               	bcf	3,6	;RP1=0, select bank0
  7009  12F8  0820               	movf	?___ftdiv,w
  7010  12F9  00B3               	movwf	___ftmul@f2
  7011  12FA  0821               	movf	?___ftdiv+1,w
  7012  12FB  00B4               	movwf	___ftmul@f2+1
  7013  12FC  0822               	movf	?___ftdiv+2,w
  7014  12FD  00B5               	movwf	___ftmul@f2+2
  7015  12FE  3000               	movlw	0
  7016  12FF  00F7               	movwf	___aldiv@dividend+3
  7017  1300  303D               	movlw	61
  7018  1301  00F6               	movwf	___aldiv@dividend+2
  7019  1302  3009               	movlw	9
  7020  1303  00F5               	movwf	___aldiv@dividend+1
  7021  1304  3000               	movlw	0
  7022  1305  00F4               	movwf	___aldiv@dividend
  7023  1306  1683               	bsf	3,5	;RP0=1, select bank3
  7024  1307  1703               	bsf	3,6	;RP1=1, select bank3
  7025  1308  0810               	movf	_PWM_freq^(0+384),w
  7026  1309  1283               	bcf	3,5	;RP0=0, select bank0
  7027  130A  1303               	bcf	3,6	;RP1=0, select bank0
  7028  130B  00D9               	movwf	??_set_PWM_duty_cycle
  7029  130C  1683               	bsf	3,5	;RP0=1, select bank3
  7030  130D  1703               	bsf	3,6	;RP1=1, select bank3
  7031  130E  0811               	movf	(_PWM_freq+1)^(0+384),w
  7032  130F  1283               	bcf	3,5	;RP0=0, select bank0
  7033  1310  1303               	bcf	3,6	;RP1=0, select bank0
  7034  1311  00DA               	movwf	??_set_PWM_duty_cycle+1
  7035  1312  1683               	bsf	3,5	;RP0=1, select bank3
  7036  1313  1703               	bsf	3,6	;RP1=1, select bank3
  7037  1314  0812               	movf	(_PWM_freq+2)^(0+384),w
  7038  1315  1283               	bcf	3,5	;RP0=0, select bank0
  7039  1316  1303               	bcf	3,6	;RP1=0, select bank0
  7040  1317  00DB               	movwf	??_set_PWM_duty_cycle+2
  7041  1318  1683               	bsf	3,5	;RP0=1, select bank3
  7042  1319  1703               	bsf	3,6	;RP1=1, select bank3
  7043  131A  0813               	movf	(_PWM_freq+3)^(0+384),w
  7044  131B  1283               	bcf	3,5	;RP0=0, select bank0
  7045  131C  1303               	bcf	3,6	;RP1=0, select bank0
  7046  131D  00DC               	movwf	??_set_PWM_duty_cycle+3
  7047  131E  3002               	movlw	2
  7048  131F                     u3535:	
  7049  131F  1003               	clrc
  7050  1320  0DD9               	rlf	??_set_PWM_duty_cycle,f
  7051  1321  0DDA               	rlf	??_set_PWM_duty_cycle+1,f
  7052  1322  0DDB               	rlf	??_set_PWM_duty_cycle+2,f
  7053  1323  0DDC               	rlf	??_set_PWM_duty_cycle+3,f
  7054  1324  3EFF               	addlw	-1
  7055  1325  1D03               	skipz
  7056  1326  2B1F               	goto	u3535
  7057  1327  085C               	movf	??_set_PWM_duty_cycle+3,w
  7058  1328  00F3               	movwf	___aldiv@divisor+3
  7059  1329  085B               	movf	??_set_PWM_duty_cycle+2,w
  7060  132A  00F2               	movwf	___aldiv@divisor+2
  7061  132B  085A               	movf	??_set_PWM_duty_cycle+1,w
  7062  132C  00F1               	movwf	___aldiv@divisor+1
  7063  132D  0859               	movf	??_set_PWM_duty_cycle,w
  7064  132E  00F0               	movwf	___aldiv@divisor
  7065  132F  160A  118A  2242  160A  118A  	fcall	___aldiv
  7066  1334  0873               	movf	?___aldiv+3,w
  7067  1335  1283               	bcf	3,5	;RP0=0, select bank0
  7068  1336  1303               	bcf	3,6	;RP1=0, select bank0
  7069  1337  00A9               	movwf	___altoft@c+3
  7070  1338  0872               	movf	?___aldiv+2,w
  7071  1339  00A8               	movwf	___altoft@c+2
  7072  133A  0871               	movf	?___aldiv+1,w
  7073  133B  00A7               	movwf	___altoft@c+1
  7074  133C  0870               	movf	?___aldiv,w
  7075  133D  00A6               	movwf	___altoft@c
  7076  133E  160A  118A  20A9  160A  118A  	fcall	___altoft
  7077  1343  1283               	bcf	3,5	;RP0=0, select bank0
  7078  1344  1303               	bcf	3,6	;RP1=0, select bank0
  7079  1345  0826               	movf	?___altoft,w
  7080  1346  00B0               	movwf	___ftmul@f1
  7081  1347  0827               	movf	?___altoft+1,w
  7082  1348  00B1               	movwf	___ftmul@f1+1
  7083  1349  0828               	movf	?___altoft+2,w
  7084  134A  00B2               	movwf	___ftmul@f1+2
  7085  134B  160A  118A  24F2  160A  118A  	fcall	___ftmul
  7086  1350  1283               	bcf	3,5	;RP0=0, select bank0
  7087  1351  1303               	bcf	3,6	;RP1=0, select bank0
  7088  1352  0830               	movf	?___ftmul,w
  7089  1353  00C9               	movwf	___fttol@f1
  7090  1354  0831               	movf	?___ftmul+1,w
  7091  1355  00CA               	movwf	___fttol@f1+1
  7092  1356  0832               	movf	?___ftmul+2,w
  7093  1357  00CB               	movwf	___fttol@f1+2
  7094  1358  160A  118A  21B4   	fcall	___fttol
  7095  135B  1283               	bcf	3,5	;RP0=0, select bank0
  7096  135C  1303               	bcf	3,6	;RP1=0, select bank0
  7097  135D  084A               	movf	?___fttol+1,w
  7098  135E  00D8               	movwf	set_PWM_duty_cycle@duty+1
  7099  135F  0849               	movf	?___fttol,w
  7100  1360  00D7               	movwf	set_PWM_duty_cycle@duty
  7101                           
  7102                           ;main.c: 136: CCP1CONbits.DC1B = duty & 0x03;
  7103  1361  0857               	movf	set_PWM_duty_cycle@duty,w
  7104  1362  3903               	andlw	3
  7105  1363  00D9               	movwf	??_set_PWM_duty_cycle
  7106  1364  0ED9               	swapf	??_set_PWM_duty_cycle,f
  7107  1365  0817               	movf	23,w	;volatile
  7108  1366  0659               	xorwf	??_set_PWM_duty_cycle,w
  7109  1367  39CF               	andlw	-49
  7110  1368  0659               	xorwf	??_set_PWM_duty_cycle,w
  7111  1369  0097               	movwf	23	;volatile
  7112                           
  7113                           ;main.c: 137: CCPR1L = duty>>2;
  7114  136A  0858               	movf	set_PWM_duty_cycle@duty+1,w
  7115  136B  00DA               	movwf	??_set_PWM_duty_cycle+1
  7116  136C  0857               	movf	set_PWM_duty_cycle@duty,w
  7117  136D  00D9               	movwf	??_set_PWM_duty_cycle
  7118  136E  1003               	clrc
  7119  136F  0CDA               	rrf	??_set_PWM_duty_cycle+1,f
  7120  1370  0CD9               	rrf	??_set_PWM_duty_cycle,f
  7121  1371  1003               	clrc
  7122  1372  0CDA               	rrf	??_set_PWM_duty_cycle+1,f
  7123  1373  0CD9               	rrf	??_set_PWM_duty_cycle,f
  7124  1374  0859               	movf	??_set_PWM_duty_cycle,w
  7125  1375  0095               	movwf	21	;volatile
  7126  1376  0008               	return
  7127  1377                     __end_of_set_PWM_duty_cycle:	
  7128                           ;main.c: 138: }
  7129                           ;main.c: 139: return;
  7130                           
  7131                           
  7132                           	psect	text21
  7133  1CCF                     __ptext21:	
  7134 ;; *************** function ___lwtoft *****************
  7135 ;; Defined at:
  7136 ;;		line 28 in file "E:\software\pic\XC8\sources\common\lwtoft.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  c               2    8[COMMON] unsigned int 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  3    8[COMMON] float 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0, pclath, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7150 ;;      Params:         3       0       0       0       0
  7151 ;;      Locals:         0       0       0       0       0
  7152 ;;      Temps:          1       0       0       0       0
  7153 ;;      Totals:         4       0       0       0       0
  7154 ;;Total ram usage:        4 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    1
  7157 ;; This function calls:
  7158 ;;		___ftpack
  7159 ;; This function is called by:
  7160 ;;		_main
  7161 ;;		_set_PWM_duty_cycle
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function ___lwtoft
  7167  1CCF                     ___lwtoft:	
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7171  1CCF  0878               	movf	___lwtoft@c,w
  7172  1CD0  00F0               	movwf	___ftpack@arg
  7173  1CD1  0879               	movf	___lwtoft@c+1,w
  7174  1CD2  00F1               	movwf	___ftpack@arg+1
  7175  1CD3  01F2               	clrf	___ftpack@arg+2
  7176  1CD4  308E               	movlw	142
  7177  1CD5  00FB               	movwf	??___lwtoft
  7178  1CD6  087B               	movf	??___lwtoft,w
  7179  1CD7  00F3               	movwf	___ftpack@exp
  7180  1CD8  01F4               	clrf	___ftpack@sign
  7181  1CD9  160A  118A  2148   	fcall	___ftpack
  7182  1CDC  0870               	movf	?___ftpack,w
  7183  1CDD  00F8               	movwf	?___lwtoft
  7184  1CDE  0871               	movf	?___ftpack+1,w
  7185  1CDF  00F9               	movwf	?___lwtoft+1
  7186  1CE0  0872               	movf	?___ftpack+2,w
  7187  1CE1  00FA               	movwf	?___lwtoft+2
  7188  1CE2  0008               	return
  7189  1CE3                     __end_of___lwtoft:	
  7190                           
  7191                           	psect	text22
  7192  11B4                     __ptext22:	
  7193 ;; *************** function ___fttol *****************
  7194 ;; Defined at:
  7195 ;;		line 44 in file "E:\software\pic\XC8\sources\common\fttol.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  f1              3   41[BANK0 ] float 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  lval            4   50[BANK0 ] unsigned long 
  7200 ;;  exp1            1   54[BANK0 ] unsigned char 
  7201 ;;  sign1           1   49[BANK0 ] unsigned char 
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  4   41[BANK0 ] long 
  7204 ;; Registers used:
  7205 ;;		wreg, status,2, status,0
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7211 ;;      Params:         0       4       0       0       0
  7212 ;;      Locals:         0       6       0       0       0
  7213 ;;      Temps:          0       4       0       0       0
  7214 ;;      Totals:         0      14       0       0       0
  7215 ;;Total ram usage:       14 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; This function calls:
  7218 ;;		Nothing
  7219 ;; This function is called by:
  7220 ;;		_set_PWM_duty_cycle
  7221 ;;		_sprintf
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           
  7226                           ;psect for function ___fttol
  7227  11B4                     ___fttol:	
  7228                           
  7229                           ;incstack = 0
  7230                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7231  11B4  1283               	bcf	3,5	;RP0=0, select bank0
  7232  11B5  1303               	bcf	3,6	;RP1=0, select bank0
  7233  11B6  0849               	movf	___fttol@f1,w
  7234  11B7  00CD               	movwf	??___fttol
  7235  11B8  084A               	movf	___fttol@f1+1,w
  7236  11B9  00CE               	movwf	??___fttol+1
  7237  11BA  084B               	movf	___fttol@f1+2,w
  7238  11BB  00CF               	movwf	??___fttol+2
  7239  11BC  1003               	clrc
  7240  11BD  0D4E               	rlf	??___fttol+1,w
  7241  11BE  0D4F               	rlf	??___fttol+2,w
  7242  11BF  00D0               	movwf	??___fttol+3
  7243  11C0  0850               	movf	??___fttol+3,w
  7244  11C1  00D6               	movwf	___fttol@exp1
  7245  11C2  0856               	movf	___fttol@exp1,w
  7246  11C3  1D03               	btfss	3,2
  7247  11C4  29CE               	goto	l2384
  7248  11C5  3000               	movlw	0
  7249  11C6  00CC               	movwf	?___fttol+3
  7250  11C7  3000               	movlw	0
  7251  11C8  00CB               	movwf	?___fttol+2
  7252  11C9  3000               	movlw	0
  7253  11CA  00CA               	movwf	?___fttol+1
  7254  11CB  3000               	movlw	0
  7255  11CC  00C9               	movwf	?___fttol
  7256  11CD  0008               	return
  7257  11CE                     l2384:	
  7258  11CE  0849               	movf	___fttol@f1,w
  7259  11CF  00CD               	movwf	??___fttol
  7260  11D0  084A               	movf	___fttol@f1+1,w
  7261  11D1  00CE               	movwf	??___fttol+1
  7262  11D2  084B               	movf	___fttol@f1+2,w
  7263  11D3  00CF               	movwf	??___fttol+2
  7264  11D4  3017               	movlw	23
  7265  11D5                     u3425:	
  7266  11D5  1003               	clrc
  7267  11D6  0CCF               	rrf	??___fttol+2,f
  7268  11D7  0CCE               	rrf	??___fttol+1,f
  7269  11D8  0CCD               	rrf	??___fttol,f
  7270  11D9  3EFF               	addlw	-1
  7271  11DA  1D03               	skipz
  7272  11DB  29D5               	goto	u3425
  7273  11DC  084D               	movf	??___fttol,w
  7274  11DD  00D0               	movwf	??___fttol+3
  7275  11DE  0850               	movf	??___fttol+3,w
  7276  11DF  00D1               	movwf	___fttol@sign1
  7277  11E0  17CA               	bsf	___fttol@f1+1,7
  7278  11E1  30FF               	movlw	255
  7279  11E2  05C9               	andwf	___fttol@f1,f
  7280  11E3  30FF               	movlw	255
  7281  11E4  05CA               	andwf	___fttol@f1+1,f
  7282  11E5  3000               	movlw	0
  7283  11E6  05CB               	andwf	___fttol@f1+2,f
  7284  11E7  0849               	movf	___fttol@f1,w
  7285  11E8  00D2               	movwf	___fttol@lval
  7286  11E9  084A               	movf	___fttol@f1+1,w
  7287  11EA  00D3               	movwf	___fttol@lval+1
  7288  11EB  084B               	movf	___fttol@f1+2,w
  7289  11EC  00D4               	movwf	___fttol@lval+2
  7290  11ED  01D5               	clrf	___fttol@lval+3
  7291  11EE  308E               	movlw	142
  7292  11EF  02D6               	subwf	___fttol@exp1,f
  7293  11F0  1FD6               	btfss	___fttol@exp1,7
  7294  11F1  2A10               	goto	l2404
  7295  11F2  0856               	movf	___fttol@exp1,w
  7296  11F3  3A80               	xorlw	128
  7297  11F4  3E8F               	addlw	143
  7298  11F5  1803               	skipnc
  7299  11F6  2A00               	goto	l2402
  7300  11F7  3000               	movlw	0
  7301  11F8  00CC               	movwf	?___fttol+3
  7302  11F9  3000               	movlw	0
  7303  11FA  00CB               	movwf	?___fttol+2
  7304  11FB  3000               	movlw	0
  7305  11FC  00CA               	movwf	?___fttol+1
  7306  11FD  3000               	movlw	0
  7307  11FE  00C9               	movwf	?___fttol
  7308  11FF  0008               	return
  7309  1200                     l2402:	
  7310  1200  3001               	movlw	1
  7311  1201                     u3455:	
  7312  1201  1003               	clrc
  7313  1202  0CD5               	rrf	___fttol@lval+3,f
  7314  1203  0CD4               	rrf	___fttol@lval+2,f
  7315  1204  0CD3               	rrf	___fttol@lval+1,f
  7316  1205  0CD2               	rrf	___fttol@lval,f
  7317  1206  3EFF               	addlw	-1
  7318  1207  1D03               	skipz
  7319  1208  2A01               	goto	u3455
  7320  1209  3001               	movlw	1
  7321  120A  00CD               	movwf	??___fttol
  7322  120B  084D               	movf	??___fttol,w
  7323  120C  07D6               	addwf	___fttol@exp1,f
  7324  120D  1903               	btfsc	3,2
  7325  120E  2A2B               	goto	l2412
  7326  120F  2A00               	goto	l2402
  7327  1210                     l2404:	
  7328  1210  3018               	movlw	24
  7329  1211  0256               	subwf	___fttol@exp1,w
  7330  1212  1C03               	skipc
  7331  1213  2A28               	goto	l659
  7332  1214  3000               	movlw	0
  7333  1215  00CC               	movwf	?___fttol+3
  7334  1216  3000               	movlw	0
  7335  1217  00CB               	movwf	?___fttol+2
  7336  1218  3000               	movlw	0
  7337  1219  00CA               	movwf	?___fttol+1
  7338  121A  3000               	movlw	0
  7339  121B  00C9               	movwf	?___fttol
  7340  121C  0008               	return
  7341  121D                     l2410:	
  7342  121D  3001               	movlw	1
  7343  121E  00CD               	movwf	??___fttol
  7344  121F                     u3485:	
  7345  121F  1003               	clrc
  7346  1220  0DD2               	rlf	___fttol@lval,f
  7347  1221  0DD3               	rlf	___fttol@lval+1,f
  7348  1222  0DD4               	rlf	___fttol@lval+2,f
  7349  1223  0DD5               	rlf	___fttol@lval+3,f
  7350  1224  0BCD               	decfsz	??___fttol,f
  7351  1225  2A1F               	goto	u3485
  7352  1226  3001               	movlw	1
  7353  1227  02D6               	subwf	___fttol@exp1,f
  7354  1228                     l659:	
  7355  1228  0856               	movf	___fttol@exp1,w
  7356  1229  1D03               	btfss	3,2
  7357  122A  2A1D               	goto	l2410
  7358  122B                     l2412:	
  7359  122B  0851               	movf	___fttol@sign1,w
  7360  122C  1903               	btfsc	3,2
  7361  122D  2A39               	goto	l2416
  7362  122E  09D2               	comf	___fttol@lval,f
  7363  122F  09D3               	comf	___fttol@lval+1,f
  7364  1230  09D4               	comf	___fttol@lval+2,f
  7365  1231  09D5               	comf	___fttol@lval+3,f
  7366  1232  0AD2               	incf	___fttol@lval,f
  7367  1233  1903               	skipnz
  7368  1234  0AD3               	incf	___fttol@lval+1,f
  7369  1235  1903               	skipnz
  7370  1236  0AD4               	incf	___fttol@lval+2,f
  7371  1237  1903               	skipnz
  7372  1238  0AD5               	incf	___fttol@lval+3,f
  7373  1239                     l2416:	
  7374  1239  0855               	movf	___fttol@lval+3,w
  7375  123A  00CC               	movwf	?___fttol+3
  7376  123B  0854               	movf	___fttol@lval+2,w
  7377  123C  00CB               	movwf	?___fttol+2
  7378  123D  0853               	movf	___fttol@lval+1,w
  7379  123E  00CA               	movwf	?___fttol+1
  7380  123F  0852               	movf	___fttol@lval,w
  7381  1240  00C9               	movwf	?___fttol
  7382  1241  0008               	return
  7383  1242                     __end_of___fttol:	
  7384                           
  7385                           	psect	text23
  7386  14F2                     __ptext23:	
  7387 ;; *************** function ___ftmul *****************
  7388 ;; Defined at:
  7389 ;;		line 62 in file "E:\software\pic\XC8\sources\common\ftmul.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  f1              3   16[BANK0 ] float 
  7392 ;;  f2              3   19[BANK0 ] float 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  7395 ;;  sign            1   31[BANK0 ] unsigned char 
  7396 ;;  cntr            1   30[BANK0 ] unsigned char 
  7397 ;;  exp             1   26[BANK0 ] unsigned char 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  3   16[BANK0 ] float 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0, pclath, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7407 ;;      Params:         0       6       0       0       0
  7408 ;;      Locals:         0       6       0       0       0
  7409 ;;      Temps:          0       4       0       0       0
  7410 ;;      Totals:         0      16       0       0       0
  7411 ;;Total ram usage:       16 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    1
  7414 ;; This function calls:
  7415 ;;		___ftpack
  7416 ;; This function is called by:
  7417 ;;		_set_PWM_duty_cycle
  7418 ;;		_fround
  7419 ;;		_scale
  7420 ;;		_sprintf
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function ___ftmul
  7426  14F2                     ___ftmul:	
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7430  14F2  1283               	bcf	3,5	;RP0=0, select bank0
  7431  14F3  1303               	bcf	3,6	;RP1=0, select bank0
  7432  14F4  0830               	movf	___ftmul@f1,w
  7433  14F5  00B6               	movwf	??___ftmul
  7434  14F6  0831               	movf	___ftmul@f1+1,w
  7435  14F7  00B7               	movwf	??___ftmul+1
  7436  14F8  0832               	movf	___ftmul@f1+2,w
  7437  14F9  00B8               	movwf	??___ftmul+2
  7438  14FA  1003               	clrc
  7439  14FB  0D37               	rlf	??___ftmul+1,w
  7440  14FC  0D38               	rlf	??___ftmul+2,w
  7441  14FD  00B9               	movwf	??___ftmul+3
  7442  14FE  0839               	movf	??___ftmul+3,w
  7443  14FF  00BA               	movwf	___ftmul@exp
  7444  1500  083A               	movf	___ftmul@exp,w
  7445  1501  1D03               	btfss	3,2
  7446  1502  2D0A               	goto	l2334
  7447  1503  3000               	movlw	0
  7448  1504  00B0               	movwf	?___ftmul
  7449  1505  3000               	movlw	0
  7450  1506  00B1               	movwf	?___ftmul+1
  7451  1507  3000               	movlw	0
  7452  1508  00B2               	movwf	?___ftmul+2
  7453  1509  0008               	return
  7454  150A                     l2334:	
  7455  150A  0833               	movf	___ftmul@f2,w
  7456  150B  00B6               	movwf	??___ftmul
  7457  150C  0834               	movf	___ftmul@f2+1,w
  7458  150D  00B7               	movwf	??___ftmul+1
  7459  150E  0835               	movf	___ftmul@f2+2,w
  7460  150F  00B8               	movwf	??___ftmul+2
  7461  1510  1003               	clrc
  7462  1511  0D37               	rlf	??___ftmul+1,w
  7463  1512  0D38               	rlf	??___ftmul+2,w
  7464  1513  00B9               	movwf	??___ftmul+3
  7465  1514  0839               	movf	??___ftmul+3,w
  7466  1515  00BF               	movwf	___ftmul@sign
  7467  1516  083F               	movf	___ftmul@sign,w
  7468  1517  1D03               	btfss	3,2
  7469  1518  2D20               	goto	l2340
  7470  1519  3000               	movlw	0
  7471  151A  00B0               	movwf	?___ftmul
  7472  151B  3000               	movlw	0
  7473  151C  00B1               	movwf	?___ftmul+1
  7474  151D  3000               	movlw	0
  7475  151E  00B2               	movwf	?___ftmul+2
  7476  151F  0008               	return
  7477  1520                     l2340:	
  7478  1520  083F               	movf	___ftmul@sign,w
  7479  1521  3E7B               	addlw	123
  7480  1522  00B6               	movwf	??___ftmul
  7481  1523  0836               	movf	??___ftmul,w
  7482  1524  07BA               	addwf	___ftmul@exp,f
  7483  1525  0830               	movf	___ftmul@f1,w
  7484  1526  00B6               	movwf	??___ftmul
  7485  1527  0831               	movf	___ftmul@f1+1,w
  7486  1528  00B7               	movwf	??___ftmul+1
  7487  1529  0832               	movf	___ftmul@f1+2,w
  7488  152A  00B8               	movwf	??___ftmul+2
  7489  152B  3010               	movlw	16
  7490  152C                     u3295:	
  7491  152C  1003               	clrc
  7492  152D  0CB8               	rrf	??___ftmul+2,f
  7493  152E  0CB7               	rrf	??___ftmul+1,f
  7494  152F  0CB6               	rrf	??___ftmul,f
  7495  1530  3EFF               	addlw	-1
  7496  1531  1D03               	skipz
  7497  1532  2D2C               	goto	u3295
  7498  1533  0836               	movf	??___ftmul,w
  7499  1534  00B9               	movwf	??___ftmul+3
  7500  1535  0839               	movf	??___ftmul+3,w
  7501  1536  00BF               	movwf	___ftmul@sign
  7502  1537  0833               	movf	___ftmul@f2,w
  7503  1538  00B6               	movwf	??___ftmul
  7504  1539  0834               	movf	___ftmul@f2+1,w
  7505  153A  00B7               	movwf	??___ftmul+1
  7506  153B  0835               	movf	___ftmul@f2+2,w
  7507  153C  00B8               	movwf	??___ftmul+2
  7508  153D  3010               	movlw	16
  7509  153E                     u3305:	
  7510  153E  1003               	clrc
  7511  153F  0CB8               	rrf	??___ftmul+2,f
  7512  1540  0CB7               	rrf	??___ftmul+1,f
  7513  1541  0CB6               	rrf	??___ftmul,f
  7514  1542  3EFF               	addlw	-1
  7515  1543  1D03               	skipz
  7516  1544  2D3E               	goto	u3305
  7517  1545  0836               	movf	??___ftmul,w
  7518  1546  00B9               	movwf	??___ftmul+3
  7519  1547  0839               	movf	??___ftmul+3,w
  7520  1548  06BF               	xorwf	___ftmul@sign,f
  7521  1549  3080               	movlw	128
  7522  154A  00B6               	movwf	??___ftmul
  7523  154B  0836               	movf	??___ftmul,w
  7524  154C  05BF               	andwf	___ftmul@sign,f
  7525  154D  17B1               	bsf	___ftmul@f1+1,7
  7526  154E  17B4               	bsf	___ftmul@f2+1,7
  7527  154F  30FF               	movlw	255
  7528  1550  05B3               	andwf	___ftmul@f2,f
  7529  1551  30FF               	movlw	255
  7530  1552  05B4               	andwf	___ftmul@f2+1,f
  7531  1553  3000               	movlw	0
  7532  1554  05B5               	andwf	___ftmul@f2+2,f
  7533  1555  3000               	movlw	0
  7534  1556  00BB               	movwf	___ftmul@f3_as_product
  7535  1557  3000               	movlw	0
  7536  1558  00BC               	movwf	___ftmul@f3_as_product+1
  7537  1559  3000               	movlw	0
  7538  155A  00BD               	movwf	___ftmul@f3_as_product+2
  7539  155B  3007               	movlw	7
  7540  155C  00B6               	movwf	??___ftmul
  7541  155D  0836               	movf	??___ftmul,w
  7542  155E  00BE               	movwf	___ftmul@cntr
  7543  155F                     l2352:	
  7544  155F  1C30               	btfss	___ftmul@f1,0
  7545  1560  2D6F               	goto	l2356
  7546  1561  0833               	movf	___ftmul@f2,w
  7547  1562  07BB               	addwf	___ftmul@f3_as_product,f
  7548  1563  0834               	movf	___ftmul@f2+1,w
  7549  1564  1103               	clrz
  7550  1565  1803               	skipnc
  7551  1566  0A34               	incf	___ftmul@f2+1,w
  7552  1567  1D03               	btfss	3,2
  7553  1568  07BC               	addwf	___ftmul@f3_as_product+1,f
  7554  1569  0835               	movf	___ftmul@f2+2,w
  7555  156A  1103               	clrz
  7556  156B  1803               	skipnc
  7557  156C  0A35               	incf	___ftmul@f2+2,w
  7558  156D  1D03               	btfss	3,2
  7559  156E  07BD               	addwf	___ftmul@f3_as_product+2,f
  7560  156F                     l2356:	
  7561  156F  3001               	movlw	1
  7562  1570                     u3335:	
  7563  1570  1003               	clrc
  7564  1571  0CB2               	rrf	___ftmul@f1+2,f
  7565  1572  0CB1               	rrf	___ftmul@f1+1,f
  7566  1573  0CB0               	rrf	___ftmul@f1,f
  7567  1574  3EFF               	addlw	-1
  7568  1575  1D03               	skipz
  7569  1576  2D70               	goto	u3335
  7570  1577  3001               	movlw	1
  7571  1578                     u3345:	
  7572  1578  1003               	clrc
  7573  1579  0DB3               	rlf	___ftmul@f2,f
  7574  157A  0DB4               	rlf	___ftmul@f2+1,f
  7575  157B  0DB5               	rlf	___ftmul@f2+2,f
  7576  157C  3EFF               	addlw	-1
  7577  157D  1D03               	skipz
  7578  157E  2D78               	goto	u3345
  7579  157F  3001               	movlw	1
  7580  1580  02BE               	subwf	___ftmul@cntr,f
  7581  1581  1D03               	btfss	3,2
  7582  1582  2D5F               	goto	l2352
  7583  1583  3009               	movlw	9
  7584  1584  00B6               	movwf	??___ftmul
  7585  1585  0836               	movf	??___ftmul,w
  7586  1586  00BE               	movwf	___ftmul@cntr
  7587  1587                     l2364:	
  7588  1587  1C30               	btfss	___ftmul@f1,0
  7589  1588  2D97               	goto	l2368
  7590  1589  0833               	movf	___ftmul@f2,w
  7591  158A  07BB               	addwf	___ftmul@f3_as_product,f
  7592  158B  0834               	movf	___ftmul@f2+1,w
  7593  158C  1103               	clrz
  7594  158D  1803               	skipnc
  7595  158E  0A34               	incf	___ftmul@f2+1,w
  7596  158F  1D03               	btfss	3,2
  7597  1590  07BC               	addwf	___ftmul@f3_as_product+1,f
  7598  1591  0835               	movf	___ftmul@f2+2,w
  7599  1592  1103               	clrz
  7600  1593  1803               	skipnc
  7601  1594  0A35               	incf	___ftmul@f2+2,w
  7602  1595  1D03               	btfss	3,2
  7603  1596  07BD               	addwf	___ftmul@f3_as_product+2,f
  7604  1597                     l2368:	
  7605  1597  3001               	movlw	1
  7606  1598                     u3385:	
  7607  1598  1003               	clrc
  7608  1599  0CB2               	rrf	___ftmul@f1+2,f
  7609  159A  0CB1               	rrf	___ftmul@f1+1,f
  7610  159B  0CB0               	rrf	___ftmul@f1,f
  7611  159C  3EFF               	addlw	-1
  7612  159D  1D03               	skipz
  7613  159E  2D98               	goto	u3385
  7614  159F  3001               	movlw	1
  7615  15A0                     u3395:	
  7616  15A0  1003               	clrc
  7617  15A1  0CBD               	rrf	___ftmul@f3_as_product+2,f
  7618  15A2  0CBC               	rrf	___ftmul@f3_as_product+1,f
  7619  15A3  0CBB               	rrf	___ftmul@f3_as_product,f
  7620  15A4  3EFF               	addlw	-1
  7621  15A5  1D03               	skipz
  7622  15A6  2DA0               	goto	u3395
  7623  15A7  3001               	movlw	1
  7624  15A8  02BE               	subwf	___ftmul@cntr,f
  7625  15A9  1D03               	btfss	3,2
  7626  15AA  2D87               	goto	l2364
  7627  15AB  083B               	movf	___ftmul@f3_as_product,w
  7628  15AC  00F0               	movwf	___ftpack@arg
  7629  15AD  083C               	movf	___ftmul@f3_as_product+1,w
  7630  15AE  00F1               	movwf	___ftpack@arg+1
  7631  15AF  083D               	movf	___ftmul@f3_as_product+2,w
  7632  15B0  00F2               	movwf	___ftpack@arg+2
  7633  15B1  083A               	movf	___ftmul@exp,w
  7634  15B2  00B6               	movwf	??___ftmul
  7635  15B3  0836               	movf	??___ftmul,w
  7636  15B4  00F3               	movwf	___ftpack@exp
  7637  15B5  083F               	movf	___ftmul@sign,w
  7638  15B6  00B7               	movwf	??___ftmul+1
  7639  15B7  0837               	movf	??___ftmul+1,w
  7640  15B8  00F4               	movwf	___ftpack@sign
  7641  15B9  160A  118A  2148   	fcall	___ftpack
  7642  15BC  0870               	movf	?___ftpack,w
  7643  15BD  1283               	bcf	3,5	;RP0=0, select bank0
  7644  15BE  1303               	bcf	3,6	;RP1=0, select bank0
  7645  15BF  00B0               	movwf	?___ftmul
  7646  15C0  0871               	movf	?___ftpack+1,w
  7647  15C1  00B1               	movwf	?___ftmul+1
  7648  15C2  0872               	movf	?___ftpack+2,w
  7649  15C3  00B2               	movwf	?___ftmul+2
  7650  15C4  0008               	return
  7651  15C5                     __end_of___ftmul:	
  7652                           
  7653                           	psect	text24
  7654  1377                     __ptext24:	
  7655 ;; *************** function ___ftdiv *****************
  7656 ;; Defined at:
  7657 ;;		line 56 in file "E:\software\pic\XC8\sources\common\ftdiv.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  f2              3    0[BANK0 ] float 
  7660 ;;  f1              3    3[BANK0 ] float 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  f3              3   11[BANK0 ] float 
  7663 ;;  sign            1   15[BANK0 ] unsigned char 
  7664 ;;  exp             1   14[BANK0 ] unsigned char 
  7665 ;;  cntr            1   10[BANK0 ] unsigned char 
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  3    0[BANK0 ] float 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2, status,0, pclath, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7675 ;;      Params:         0       6       0       0       0
  7676 ;;      Locals:         0       6       0       0       0
  7677 ;;      Temps:          0       4       0       0       0
  7678 ;;      Totals:         0      16       0       0       0
  7679 ;;Total ram usage:       16 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    1
  7682 ;; This function calls:
  7683 ;;		___ftpack
  7684 ;; This function is called by:
  7685 ;;		_main
  7686 ;;		_set_PWM_duty_cycle
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           
  7691                           ;psect for function ___ftdiv
  7692  1377                     ___ftdiv:	
  7693                           
  7694                           ;incstack = 0
  7695                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7696  1377  1283               	bcf	3,5	;RP0=0, select bank0
  7697  1378  1303               	bcf	3,6	;RP1=0, select bank0
  7698  1379  0823               	movf	___ftdiv@f1,w
  7699  137A  00A6               	movwf	??___ftdiv
  7700  137B  0824               	movf	___ftdiv@f1+1,w
  7701  137C  00A7               	movwf	??___ftdiv+1
  7702  137D  0825               	movf	___ftdiv@f1+2,w
  7703  137E  00A8               	movwf	??___ftdiv+2
  7704  137F  1003               	clrc
  7705  1380  0D27               	rlf	??___ftdiv+1,w
  7706  1381  0D28               	rlf	??___ftdiv+2,w
  7707  1382  00A9               	movwf	??___ftdiv+3
  7708  1383  0829               	movf	??___ftdiv+3,w
  7709  1384  00AE               	movwf	___ftdiv@exp
  7710  1385  082E               	movf	___ftdiv@exp,w
  7711  1386  1D03               	btfss	3,2
  7712  1387  2B8F               	goto	l2292
  7713  1388  3000               	movlw	0
  7714  1389  00A0               	movwf	?___ftdiv
  7715  138A  3000               	movlw	0
  7716  138B  00A1               	movwf	?___ftdiv+1
  7717  138C  3000               	movlw	0
  7718  138D  00A2               	movwf	?___ftdiv+2
  7719  138E  0008               	return
  7720  138F                     l2292:	
  7721  138F  0820               	movf	___ftdiv@f2,w
  7722  1390  00A6               	movwf	??___ftdiv
  7723  1391  0821               	movf	___ftdiv@f2+1,w
  7724  1392  00A7               	movwf	??___ftdiv+1
  7725  1393  0822               	movf	___ftdiv@f2+2,w
  7726  1394  00A8               	movwf	??___ftdiv+2
  7727  1395  1003               	clrc
  7728  1396  0D27               	rlf	??___ftdiv+1,w
  7729  1397  0D28               	rlf	??___ftdiv+2,w
  7730  1398  00A9               	movwf	??___ftdiv+3
  7731  1399  0829               	movf	??___ftdiv+3,w
  7732  139A  00AF               	movwf	___ftdiv@sign
  7733  139B  082F               	movf	___ftdiv@sign,w
  7734  139C  1D03               	btfss	3,2
  7735  139D  2BA5               	goto	l2298
  7736  139E  3000               	movlw	0
  7737  139F  00A0               	movwf	?___ftdiv
  7738  13A0  3000               	movlw	0
  7739  13A1  00A1               	movwf	?___ftdiv+1
  7740  13A2  3000               	movlw	0
  7741  13A3  00A2               	movwf	?___ftdiv+2
  7742  13A4  0008               	return
  7743  13A5                     l2298:	
  7744  13A5  3000               	movlw	0
  7745  13A6  00AB               	movwf	___ftdiv@f3
  7746  13A7  3000               	movlw	0
  7747  13A8  00AC               	movwf	___ftdiv@f3+1
  7748  13A9  3000               	movlw	0
  7749  13AA  00AD               	movwf	___ftdiv@f3+2
  7750  13AB  3089               	movlw	137
  7751  13AC  072F               	addwf	___ftdiv@sign,w
  7752  13AD  00A6               	movwf	??___ftdiv
  7753  13AE  0826               	movf	??___ftdiv,w
  7754  13AF  02AE               	subwf	___ftdiv@exp,f
  7755  13B0  0823               	movf	___ftdiv@f1,w
  7756  13B1  00A6               	movwf	??___ftdiv
  7757  13B2  0824               	movf	___ftdiv@f1+1,w
  7758  13B3  00A7               	movwf	??___ftdiv+1
  7759  13B4  0825               	movf	___ftdiv@f1+2,w
  7760  13B5  00A8               	movwf	??___ftdiv+2
  7761  13B6  3010               	movlw	16
  7762  13B7                     u3215:	
  7763  13B7  1003               	clrc
  7764  13B8  0CA8               	rrf	??___ftdiv+2,f
  7765  13B9  0CA7               	rrf	??___ftdiv+1,f
  7766  13BA  0CA6               	rrf	??___ftdiv,f
  7767  13BB  3EFF               	addlw	-1
  7768  13BC  1D03               	skipz
  7769  13BD  2BB7               	goto	u3215
  7770  13BE  0826               	movf	??___ftdiv,w
  7771  13BF  00A9               	movwf	??___ftdiv+3
  7772  13C0  0829               	movf	??___ftdiv+3,w
  7773  13C1  00AF               	movwf	___ftdiv@sign
  7774  13C2  0820               	movf	___ftdiv@f2,w
  7775  13C3  00A6               	movwf	??___ftdiv
  7776  13C4  0821               	movf	___ftdiv@f2+1,w
  7777  13C5  00A7               	movwf	??___ftdiv+1
  7778  13C6  0822               	movf	___ftdiv@f2+2,w
  7779  13C7  00A8               	movwf	??___ftdiv+2
  7780  13C8  3010               	movlw	16
  7781  13C9                     u3225:	
  7782  13C9  1003               	clrc
  7783  13CA  0CA8               	rrf	??___ftdiv+2,f
  7784  13CB  0CA7               	rrf	??___ftdiv+1,f
  7785  13CC  0CA6               	rrf	??___ftdiv,f
  7786  13CD  3EFF               	addlw	-1
  7787  13CE  1D03               	skipz
  7788  13CF  2BC9               	goto	u3225
  7789  13D0  0826               	movf	??___ftdiv,w
  7790  13D1  00A9               	movwf	??___ftdiv+3
  7791  13D2  0829               	movf	??___ftdiv+3,w
  7792  13D3  06AF               	xorwf	___ftdiv@sign,f
  7793  13D4  3080               	movlw	128
  7794  13D5  00A6               	movwf	??___ftdiv
  7795  13D6  0826               	movf	??___ftdiv,w
  7796  13D7  05AF               	andwf	___ftdiv@sign,f
  7797  13D8  17A4               	bsf	___ftdiv@f1+1,7
  7798  13D9  30FF               	movlw	255
  7799  13DA  05A3               	andwf	___ftdiv@f1,f
  7800  13DB  30FF               	movlw	255
  7801  13DC  05A4               	andwf	___ftdiv@f1+1,f
  7802  13DD  3000               	movlw	0
  7803  13DE  05A5               	andwf	___ftdiv@f1+2,f
  7804  13DF  17A1               	bsf	___ftdiv@f2+1,7
  7805  13E0  30FF               	movlw	255
  7806  13E1  05A0               	andwf	___ftdiv@f2,f
  7807  13E2  30FF               	movlw	255
  7808  13E3  05A1               	andwf	___ftdiv@f2+1,f
  7809  13E4  3000               	movlw	0
  7810  13E5  05A2               	andwf	___ftdiv@f2+2,f
  7811  13E6  3018               	movlw	24
  7812  13E7  00A6               	movwf	??___ftdiv
  7813  13E8  0826               	movf	??___ftdiv,w
  7814  13E9  00AA               	movwf	___ftdiv@cntr
  7815  13EA                     l2312:	
  7816  13EA  3001               	movlw	1
  7817  13EB                     u3235:	
  7818  13EB  1003               	clrc
  7819  13EC  0DAB               	rlf	___ftdiv@f3,f
  7820  13ED  0DAC               	rlf	___ftdiv@f3+1,f
  7821  13EE  0DAD               	rlf	___ftdiv@f3+2,f
  7822  13EF  3EFF               	addlw	-1
  7823  13F0  1D03               	skipz
  7824  13F1  2BEB               	goto	u3235
  7825  13F2  0822               	movf	___ftdiv@f2+2,w
  7826  13F3  0225               	subwf	___ftdiv@f1+2,w
  7827  13F4  1D03               	skipz
  7828  13F5  2BFC               	goto	u3245
  7829  13F6  0821               	movf	___ftdiv@f2+1,w
  7830  13F7  0224               	subwf	___ftdiv@f1+1,w
  7831  13F8  1D03               	skipz
  7832  13F9  2BFC               	goto	u3245
  7833  13FA  0820               	movf	___ftdiv@f2,w
  7834  13FB  0223               	subwf	___ftdiv@f1,w
  7835  13FC                     u3245:	
  7836  13FC  1C03               	skipc
  7837  13FD  2C09               	goto	l2320
  7838  13FE  0820               	movf	___ftdiv@f2,w
  7839  13FF  02A3               	subwf	___ftdiv@f1,f
  7840  1400  0821               	movf	___ftdiv@f2+1,w
  7841  1401  1C03               	skipc
  7842  1402  0F21               	incfsz	___ftdiv@f2+1,w
  7843  1403  02A4               	subwf	___ftdiv@f1+1,f
  7844  1404  0822               	movf	___ftdiv@f2+2,w
  7845  1405  1C03               	skipc
  7846  1406  0A22               	incf	___ftdiv@f2+2,w
  7847  1407  02A5               	subwf	___ftdiv@f1+2,f
  7848  1408  142B               	bsf	___ftdiv@f3,0
  7849  1409                     l2320:	
  7850  1409  3001               	movlw	1
  7851  140A                     u3255:	
  7852  140A  1003               	clrc
  7853  140B  0DA3               	rlf	___ftdiv@f1,f
  7854  140C  0DA4               	rlf	___ftdiv@f1+1,f
  7855  140D  0DA5               	rlf	___ftdiv@f1+2,f
  7856  140E  3EFF               	addlw	-1
  7857  140F  1D03               	skipz
  7858  1410  2C0A               	goto	u3255
  7859  1411  3001               	movlw	1
  7860  1412  02AA               	subwf	___ftdiv@cntr,f
  7861  1413  1D03               	btfss	3,2
  7862  1414  2BEA               	goto	l2312
  7863  1415  082B               	movf	___ftdiv@f3,w
  7864  1416  00F0               	movwf	___ftpack@arg
  7865  1417  082C               	movf	___ftdiv@f3+1,w
  7866  1418  00F1               	movwf	___ftpack@arg+1
  7867  1419  082D               	movf	___ftdiv@f3+2,w
  7868  141A  00F2               	movwf	___ftpack@arg+2
  7869  141B  082E               	movf	___ftdiv@exp,w
  7870  141C  00A6               	movwf	??___ftdiv
  7871  141D  0826               	movf	??___ftdiv,w
  7872  141E  00F3               	movwf	___ftpack@exp
  7873  141F  082F               	movf	___ftdiv@sign,w
  7874  1420  00A7               	movwf	??___ftdiv+1
  7875  1421  0827               	movf	??___ftdiv+1,w
  7876  1422  00F4               	movwf	___ftpack@sign
  7877  1423  160A  118A  2148   	fcall	___ftpack
  7878  1426  0870               	movf	?___ftpack,w
  7879  1427  1283               	bcf	3,5	;RP0=0, select bank0
  7880  1428  1303               	bcf	3,6	;RP1=0, select bank0
  7881  1429  00A0               	movwf	?___ftdiv
  7882  142A  0871               	movf	?___ftpack+1,w
  7883  142B  00A1               	movwf	?___ftdiv+1
  7884  142C  0872               	movf	?___ftpack+2,w
  7885  142D  00A2               	movwf	?___ftdiv+2
  7886  142E  0008               	return
  7887  142F                     __end_of___ftdiv:	
  7888                           
  7889                           	psect	text25
  7890  10A9                     __ptext25:	
  7891 ;; *************** function ___altoft *****************
  7892 ;; Defined at:
  7893 ;;		line 42 in file "E:\software\pic\XC8\sources\common\altoft.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;  c               4    6[BANK0 ] long 
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  sign            1   12[COMMON] unsigned char 
  7898 ;;  exp             1   11[COMMON] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  3    6[BANK0 ] float 
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0, pclath, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7908 ;;      Params:         0       4       0       0       0
  7909 ;;      Locals:         2       0       0       0       0
  7910 ;;      Temps:          2       0       0       0       0
  7911 ;;      Totals:         4       4       0       0       0
  7912 ;;Total ram usage:        8 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    1
  7915 ;; This function calls:
  7916 ;;		___ftpack
  7917 ;; This function is called by:
  7918 ;;		_set_PWM_duty_cycle
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function ___altoft
  7924  10A9                     ___altoft:	
  7925                           
  7926                           ;incstack = 0
  7927                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  7928  10A9  01FC               	clrf	___altoft@sign
  7929  10AA  308E               	movlw	142
  7930  10AB  00F9               	movwf	??___altoft
  7931  10AC  0879               	movf	??___altoft,w
  7932  10AD  00FB               	movwf	___altoft@exp
  7933  10AE  1283               	bcf	3,5	;RP0=0, select bank0
  7934  10AF  1303               	bcf	3,6	;RP1=0, select bank0
  7935  10B0  1FA9               	btfss	___altoft@c+3,7
  7936  10B1  28BF               	goto	l2128
  7937  10B2  09A6               	comf	___altoft@c,f
  7938  10B3  09A7               	comf	___altoft@c+1,f
  7939  10B4  09A8               	comf	___altoft@c+2,f
  7940  10B5  09A9               	comf	___altoft@c+3,f
  7941  10B6  0AA6               	incf	___altoft@c,f
  7942  10B7  1903               	skipnz
  7943  10B8  0AA7               	incf	___altoft@c+1,f
  7944  10B9  1903               	skipnz
  7945  10BA  0AA8               	incf	___altoft@c+2,f
  7946  10BB  1903               	skipnz
  7947  10BC  0AA9               	incf	___altoft@c+3,f
  7948  10BD  01FC               	clrf	___altoft@sign
  7949  10BE  0AFC               	incf	___altoft@sign,f
  7950  10BF                     l2128:	
  7951  10BF  30FF               	movlw	255
  7952  10C0  0529               	andwf	___altoft@c+3,w
  7953  10C1  1903               	btfsc	3,2
  7954  10C2  28D1               	goto	l2130
  7955  10C3  3001               	movlw	1
  7956  10C4                     u2745:	
  7957  10C4  1003               	clrc
  7958  10C5  0CA9               	rrf	___altoft@c+3,f
  7959  10C6  0CA8               	rrf	___altoft@c+2,f
  7960  10C7  0CA7               	rrf	___altoft@c+1,f
  7961  10C8  0CA6               	rrf	___altoft@c,f
  7962  10C9  3EFF               	addlw	-1
  7963  10CA  1D03               	skipz
  7964  10CB  28C4               	goto	u2745
  7965  10CC  3001               	movlw	1
  7966  10CD  00F9               	movwf	??___altoft
  7967  10CE  0879               	movf	??___altoft,w
  7968  10CF  07FB               	addwf	___altoft@exp,f
  7969  10D0  28BF               	goto	l2128
  7970  10D1                     l2130:	
  7971  10D1  0826               	movf	___altoft@c,w
  7972  10D2  00F0               	movwf	___ftpack@arg
  7973  10D3  0827               	movf	___altoft@c+1,w
  7974  10D4  00F1               	movwf	___ftpack@arg+1
  7975  10D5  0828               	movf	___altoft@c+2,w
  7976  10D6  00F2               	movwf	___ftpack@arg+2
  7977  10D7  087B               	movf	___altoft@exp,w
  7978  10D8  00F9               	movwf	??___altoft
  7979  10D9  0879               	movf	??___altoft,w
  7980  10DA  00F3               	movwf	___ftpack@exp
  7981  10DB  087C               	movf	___altoft@sign,w
  7982  10DC  00FA               	movwf	??___altoft+1
  7983  10DD  087A               	movf	??___altoft+1,w
  7984  10DE  00F4               	movwf	___ftpack@sign
  7985  10DF  160A  118A  2148   	fcall	___ftpack
  7986  10E2  0870               	movf	?___ftpack,w
  7987  10E3  1283               	bcf	3,5	;RP0=0, select bank0
  7988  10E4  1303               	bcf	3,6	;RP1=0, select bank0
  7989  10E5  00A6               	movwf	?___altoft
  7990  10E6  0871               	movf	?___ftpack+1,w
  7991  10E7  00A7               	movwf	?___altoft+1
  7992  10E8  0872               	movf	?___ftpack+2,w
  7993  10E9  00A8               	movwf	?___altoft+2
  7994  10EA  0008               	return
  7995  10EB                     __end_of___altoft:	
  7996                           
  7997                           	psect	text26
  7998  1148                     __ptext26:	
  7999 ;; *************** function ___ftpack *****************
  8000 ;; Defined at:
  8001 ;;		line 62 in file "E:\software\pic\XC8\sources\common\float.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  arg             3    0[COMMON] unsigned um
  8004 ;;  exp             1    3[COMMON] unsigned char 
  8005 ;;  sign            1    4[COMMON] unsigned char 
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;		None
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  3    0[COMMON] float 
  8010 ;; Registers used:
  8011 ;;		wreg, status,2, status,0
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8017 ;;      Params:         5       0       0       0       0
  8018 ;;      Locals:         0       0       0       0       0
  8019 ;;      Temps:          3       0       0       0       0
  8020 ;;      Totals:         8       0       0       0       0
  8021 ;;Total ram usage:        8 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		___altoft
  8027 ;;		___ftadd
  8028 ;;		___ftdiv
  8029 ;;		___ftmul
  8030 ;;		___lltoft
  8031 ;;		___lwtoft
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function ___ftpack
  8037  1148                     ___ftpack:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8041  1148  0873               	movf	___ftpack@exp,w
  8042  1149  1903               	btfsc	3,2
  8043  114A  2950               	goto	l2026
  8044  114B  0872               	movf	___ftpack@arg+2,w
  8045  114C  0471               	iorwf	___ftpack@arg+1,w
  8046  114D  0470               	iorwf	___ftpack@arg,w
  8047  114E  1D03               	skipz
  8048  114F  2963               	goto	l2032
  8049  1150                     l2026:	
  8050  1150  3000               	movlw	0
  8051  1151  00F0               	movwf	?___ftpack
  8052  1152  3000               	movlw	0
  8053  1153  00F1               	movwf	?___ftpack+1
  8054  1154  3000               	movlw	0
  8055  1155  00F2               	movwf	?___ftpack+2
  8056  1156  0008               	return
  8057  1157                     l2030:	
  8058  1157  3001               	movlw	1
  8059  1158  00F5               	movwf	??___ftpack
  8060  1159  0875               	movf	??___ftpack,w
  8061  115A  07F3               	addwf	___ftpack@exp,f
  8062  115B  3001               	movlw	1
  8063  115C                     u2475:	
  8064  115C  1003               	clrc
  8065  115D  0CF2               	rrf	___ftpack@arg+2,f
  8066  115E  0CF1               	rrf	___ftpack@arg+1,f
  8067  115F  0CF0               	rrf	___ftpack@arg,f
  8068  1160  3EFF               	addlw	-1
  8069  1161  1D03               	skipz
  8070  1162  295C               	goto	u2475
  8071  1163                     l2032:	
  8072  1163  30FE               	movlw	254
  8073  1164  0572               	andwf	___ftpack@arg+2,w
  8074  1165  1903               	btfsc	3,2
  8075  1166  297E               	goto	l551
  8076  1167  2957               	goto	l2030
  8077  1168                     l2034:	
  8078  1168  3001               	movlw	1
  8079  1169  00F5               	movwf	??___ftpack
  8080  116A  0875               	movf	??___ftpack,w
  8081  116B  07F3               	addwf	___ftpack@exp,f
  8082  116C  3001               	movlw	1
  8083  116D  07F0               	addwf	___ftpack@arg,f
  8084  116E  3000               	movlw	0
  8085  116F  1803               	skipnc
  8086  1170  3001               	movlw	1
  8087  1171  07F1               	addwf	___ftpack@arg+1,f
  8088  1172  3000               	movlw	0
  8089  1173  1803               	skipnc
  8090  1174  3001               	movlw	1
  8091  1175  07F2               	addwf	___ftpack@arg+2,f
  8092  1176  3001               	movlw	1
  8093  1177                     u2495:	
  8094  1177  1003               	clrc
  8095  1178  0CF2               	rrf	___ftpack@arg+2,f
  8096  1179  0CF1               	rrf	___ftpack@arg+1,f
  8097  117A  0CF0               	rrf	___ftpack@arg,f
  8098  117B  3EFF               	addlw	-1
  8099  117C  1D03               	skipz
  8100  117D  2977               	goto	u2495
  8101  117E                     l551:	
  8102  117E  30FF               	movlw	255
  8103  117F  0572               	andwf	___ftpack@arg+2,w
  8104  1180  1903               	btfsc	3,2
  8105  1181  298D               	goto	l2042
  8106  1182  2968               	goto	l2034
  8107  1183                     l2040:	
  8108  1183  3001               	movlw	1
  8109  1184  02F3               	subwf	___ftpack@exp,f
  8110  1185  3001               	movlw	1
  8111  1186                     u2515:	
  8112  1186  1003               	clrc
  8113  1187  0DF0               	rlf	___ftpack@arg,f
  8114  1188  0DF1               	rlf	___ftpack@arg+1,f
  8115  1189  0DF2               	rlf	___ftpack@arg+2,f
  8116  118A  3EFF               	addlw	-1
  8117  118B  1D03               	skipz
  8118  118C  2986               	goto	u2515
  8119  118D                     l2042:	
  8120  118D  1BF1               	btfsc	___ftpack@arg+1,7
  8121  118E  2993               	goto	l558
  8122  118F  3002               	movlw	2
  8123  1190  0273               	subwf	___ftpack@exp,w
  8124  1191  1803               	skipnc
  8125  1192  2983               	goto	l2040
  8126  1193                     l558:	
  8127  1193  1873               	btfsc	___ftpack@exp,0
  8128  1194  299B               	goto	l559
  8129  1195  30FF               	movlw	255
  8130  1196  05F0               	andwf	___ftpack@arg,f
  8131  1197  307F               	movlw	127
  8132  1198  05F1               	andwf	___ftpack@arg+1,f
  8133  1199  30FF               	movlw	255
  8134  119A  05F2               	andwf	___ftpack@arg+2,f
  8135  119B                     l559:	
  8136  119B  1003               	clrc
  8137  119C  0CF3               	rrf	___ftpack@exp,f
  8138  119D  0873               	movf	___ftpack@exp,w
  8139  119E  00F5               	movwf	??___ftpack
  8140  119F  01F6               	clrf	??___ftpack+1
  8141  11A0  01F7               	clrf	??___ftpack+2
  8142  11A1  3010               	movlw	16
  8143  11A2                     u2555:	
  8144  11A2  1003               	clrc
  8145  11A3  0DF5               	rlf	??___ftpack,f
  8146  11A4  0DF6               	rlf	??___ftpack+1,f
  8147  11A5  0DF7               	rlf	??___ftpack+2,f
  8148  11A6  3EFF               	addlw	-1
  8149  11A7  1D03               	skipz
  8150  11A8  29A2               	goto	u2555
  8151  11A9  0875               	movf	??___ftpack,w
  8152  11AA  04F0               	iorwf	___ftpack@arg,f
  8153  11AB  0876               	movf	??___ftpack+1,w
  8154  11AC  04F1               	iorwf	___ftpack@arg+1,f
  8155  11AD  0877               	movf	??___ftpack+2,w
  8156  11AE  04F2               	iorwf	___ftpack@arg+2,f
  8157  11AF  0874               	movf	___ftpack@sign,w
  8158  11B0  1903               	btfsc	3,2
  8159  11B1  0008               	return
  8160  11B2  17F2               	bsf	___ftpack@arg+2,7
  8161  11B3  0008               	return
  8162  11B4                     __end_of___ftpack:	
  8163                           
  8164                           	psect	text27
  8165  1242                     __ptext27:	
  8166 ;; *************** function ___aldiv *****************
  8167 ;; Defined at:
  8168 ;;		line 6 in file "E:\software\pic\XC8\sources\common\aldiv.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  divisor         4    0[COMMON] long 
  8171 ;;  dividend        4    4[COMMON] long 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  quotient        4    2[BANK0 ] long 
  8174 ;;  sign            1    1[BANK0 ] unsigned char 
  8175 ;;  counter         1    0[BANK0 ] unsigned char 
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  4    0[COMMON] long 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2, status,0
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8185 ;;      Params:         8       0       0       0       0
  8186 ;;      Locals:         0       6       0       0       0
  8187 ;;      Temps:          1       0       0       0       0
  8188 ;;      Totals:         9       6       0       0       0
  8189 ;;Total ram usage:       15 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_main
  8195 ;;		_PWM_Initialize
  8196 ;;		_set_PWM_duty_cycle
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           
  8201                           ;psect for function ___aldiv
  8202  1242                     ___aldiv:	
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  8206  1242  1283               	bcf	3,5	;RP0=0, select bank0
  8207  1243  1303               	bcf	3,6	;RP1=0, select bank0
  8208  1244  01A1               	clrf	___aldiv@sign
  8209  1245  1FF3               	btfss	___aldiv@divisor+3,7
  8210  1246  2A54               	goto	l428
  8211  1247  09F0               	comf	___aldiv@divisor,f
  8212  1248  09F1               	comf	___aldiv@divisor+1,f
  8213  1249  09F2               	comf	___aldiv@divisor+2,f
  8214  124A  09F3               	comf	___aldiv@divisor+3,f
  8215  124B  0AF0               	incf	___aldiv@divisor,f
  8216  124C  1903               	skipnz
  8217  124D  0AF1               	incf	___aldiv@divisor+1,f
  8218  124E  1903               	skipnz
  8219  124F  0AF2               	incf	___aldiv@divisor+2,f
  8220  1250  1903               	skipnz
  8221  1251  0AF3               	incf	___aldiv@divisor+3,f
  8222  1252  01A1               	clrf	___aldiv@sign
  8223  1253  0AA1               	incf	___aldiv@sign,f
  8224  1254                     l428:	
  8225  1254  1FF7               	btfss	___aldiv@dividend+3,7
  8226  1255  2A65               	goto	l2088
  8227  1256  09F4               	comf	___aldiv@dividend,f
  8228  1257  09F5               	comf	___aldiv@dividend+1,f
  8229  1258  09F6               	comf	___aldiv@dividend+2,f
  8230  1259  09F7               	comf	___aldiv@dividend+3,f
  8231  125A  0AF4               	incf	___aldiv@dividend,f
  8232  125B  1903               	skipnz
  8233  125C  0AF5               	incf	___aldiv@dividend+1,f
  8234  125D  1903               	skipnz
  8235  125E  0AF6               	incf	___aldiv@dividend+2,f
  8236  125F  1903               	skipnz
  8237  1260  0AF7               	incf	___aldiv@dividend+3,f
  8238  1261  3001               	movlw	1
  8239  1262  00F8               	movwf	??___aldiv
  8240  1263  0878               	movf	??___aldiv,w
  8241  1264  06A1               	xorwf	___aldiv@sign,f
  8242  1265                     l2088:	
  8243  1265  3000               	movlw	0
  8244  1266  00A5               	movwf	___aldiv@quotient+3
  8245  1267  3000               	movlw	0
  8246  1268  00A4               	movwf	___aldiv@quotient+2
  8247  1269  3000               	movlw	0
  8248  126A  00A3               	movwf	___aldiv@quotient+1
  8249  126B  3000               	movlw	0
  8250  126C  00A2               	movwf	___aldiv@quotient
  8251  126D  0873               	movf	___aldiv@divisor+3,w
  8252  126E  0472               	iorwf	___aldiv@divisor+2,w
  8253  126F  0471               	iorwf	___aldiv@divisor+1,w
  8254  1270  0470               	iorwf	___aldiv@divisor,w
  8255  1271  1903               	skipnz
  8256  1272  2ABA               	goto	l2110
  8257  1273  01A0               	clrf	___aldiv@counter
  8258  1274  0AA0               	incf	___aldiv@counter,f
  8259  1275                     l2096:	
  8260  1275  1BF3               	btfsc	___aldiv@divisor+3,7
  8261  1276  2A85               	goto	l2098
  8262  1277  3001               	movlw	1
  8263  1278  00F8               	movwf	??___aldiv
  8264  1279                     u2665:	
  8265  1279  1003               	clrc
  8266  127A  0DF0               	rlf	___aldiv@divisor,f
  8267  127B  0DF1               	rlf	___aldiv@divisor+1,f
  8268  127C  0DF2               	rlf	___aldiv@divisor+2,f
  8269  127D  0DF3               	rlf	___aldiv@divisor+3,f
  8270  127E  0BF8               	decfsz	??___aldiv,f
  8271  127F  2A79               	goto	u2665
  8272  1280  3001               	movlw	1
  8273  1281  00F8               	movwf	??___aldiv
  8274  1282  0878               	movf	??___aldiv,w
  8275  1283  07A0               	addwf	___aldiv@counter,f
  8276  1284  2A75               	goto	l2096
  8277  1285                     l2098:	
  8278  1285  3001               	movlw	1
  8279  1286  00F8               	movwf	??___aldiv
  8280  1287                     u2685:	
  8281  1287  1003               	clrc
  8282  1288  0DA2               	rlf	___aldiv@quotient,f
  8283  1289  0DA3               	rlf	___aldiv@quotient+1,f
  8284  128A  0DA4               	rlf	___aldiv@quotient+2,f
  8285  128B  0DA5               	rlf	___aldiv@quotient+3,f
  8286  128C  0BF8               	decfsz	??___aldiv,f
  8287  128D  2A87               	goto	u2685
  8288  128E  0873               	movf	___aldiv@divisor+3,w
  8289  128F  0277               	subwf	___aldiv@dividend+3,w
  8290  1290  1D03               	skipz
  8291  1291  2A9C               	goto	u2695
  8292  1292  0872               	movf	___aldiv@divisor+2,w
  8293  1293  0276               	subwf	___aldiv@dividend+2,w
  8294  1294  1D03               	skipz
  8295  1295  2A9C               	goto	u2695
  8296  1296  0871               	movf	___aldiv@divisor+1,w
  8297  1297  0275               	subwf	___aldiv@dividend+1,w
  8298  1298  1D03               	skipz
  8299  1299  2A9C               	goto	u2695
  8300  129A  0870               	movf	___aldiv@divisor,w
  8301  129B  0274               	subwf	___aldiv@dividend,w
  8302  129C                     u2695:	
  8303  129C  1C03               	skipc
  8304  129D  2AAD               	goto	l2106
  8305  129E  0870               	movf	___aldiv@divisor,w
  8306  129F  02F4               	subwf	___aldiv@dividend,f
  8307  12A0  0871               	movf	___aldiv@divisor+1,w
  8308  12A1  1C03               	skipc
  8309  12A2  0F71               	incfsz	___aldiv@divisor+1,w
  8310  12A3  02F5               	subwf	___aldiv@dividend+1,f
  8311  12A4  0872               	movf	___aldiv@divisor+2,w
  8312  12A5  1C03               	skipc
  8313  12A6  0F72               	incfsz	___aldiv@divisor+2,w
  8314  12A7  02F6               	subwf	___aldiv@dividend+2,f
  8315  12A8  0873               	movf	___aldiv@divisor+3,w
  8316  12A9  1C03               	skipc
  8317  12AA  0F73               	incfsz	___aldiv@divisor+3,w
  8318  12AB  02F7               	subwf	___aldiv@dividend+3,f
  8319  12AC  1422               	bsf	___aldiv@quotient,0
  8320  12AD                     l2106:	
  8321  12AD  3001               	movlw	1
  8322  12AE                     u2705:	
  8323  12AE  1003               	clrc
  8324  12AF  0CF3               	rrf	___aldiv@divisor+3,f
  8325  12B0  0CF2               	rrf	___aldiv@divisor+2,f
  8326  12B1  0CF1               	rrf	___aldiv@divisor+1,f
  8327  12B2  0CF0               	rrf	___aldiv@divisor,f
  8328  12B3  3EFF               	addlw	-1
  8329  12B4  1D03               	skipz
  8330  12B5  2AAE               	goto	u2705
  8331  12B6  3001               	movlw	1
  8332  12B7  02A0               	subwf	___aldiv@counter,f
  8333  12B8  1D03               	btfss	3,2
  8334  12B9  2A85               	goto	l2098
  8335  12BA                     l2110:	
  8336  12BA  0821               	movf	___aldiv@sign,w
  8337  12BB  1903               	btfsc	3,2
  8338  12BC  2AC8               	goto	l2114
  8339  12BD  09A2               	comf	___aldiv@quotient,f
  8340  12BE  09A3               	comf	___aldiv@quotient+1,f
  8341  12BF  09A4               	comf	___aldiv@quotient+2,f
  8342  12C0  09A5               	comf	___aldiv@quotient+3,f
  8343  12C1  0AA2               	incf	___aldiv@quotient,f
  8344  12C2  1903               	skipnz
  8345  12C3  0AA3               	incf	___aldiv@quotient+1,f
  8346  12C4  1903               	skipnz
  8347  12C5  0AA4               	incf	___aldiv@quotient+2,f
  8348  12C6  1903               	skipnz
  8349  12C7  0AA5               	incf	___aldiv@quotient+3,f
  8350  12C8                     l2114:	
  8351  12C8  0825               	movf	___aldiv@quotient+3,w
  8352  12C9  00F3               	movwf	?___aldiv+3
  8353  12CA  0824               	movf	___aldiv@quotient+2,w
  8354  12CB  00F2               	movwf	?___aldiv+2
  8355  12CC  0823               	movf	___aldiv@quotient+1,w
  8356  12CD  00F1               	movwf	?___aldiv+1
  8357  12CE  0822               	movf	___aldiv@quotient,w
  8358  12CF  00F0               	movwf	?___aldiv
  8359  12D0  0008               	return
  8360  12D1                     __end_of___aldiv:	
  8361                           
  8362                           	psect	text28
  8363  1DB3                     __ptext28:	
  8364 ;; *************** function _Lcd_Write_String *****************
  8365 ;; Defined at:
  8366 ;;		line 95 in file "lcd.h"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  a               2    5[COMMON] PTR unsigned char 
  8369 ;;		 -> RAM(512), main@duty_str(5), main@line2(16), main@line1(16), 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;  i               2    9[COMMON] int 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      void 
  8374 ;; Registers used:
  8375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8381 ;;      Params:         2       0       0       0       0
  8382 ;;      Locals:         2       0       0       0       0
  8383 ;;      Temps:          2       0       0       0       0
  8384 ;;      Totals:         6       0       0       0       0
  8385 ;;Total ram usage:        6 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:    2
  8388 ;; This function calls:
  8389 ;;		_Lcd_Write_Char
  8390 ;; This function is called by:
  8391 ;;		_main
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           
  8396                           ;psect for function _Lcd_Write_String
  8397  1DB3                     _Lcd_Write_String:	
  8398                           
  8399                           ;lcd.h: 97: int i;
  8400                           ;lcd.h: 98: for(i=0;a[i]!='\0';i++)
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8404  1DB3  01F9               	clrf	Lcd_Write_String@i
  8405  1DB4  01FA               	clrf	Lcd_Write_String@i+1
  8406  1DB5                     l2786:	
  8407  1DB5  0879               	movf	Lcd_Write_String@i,w
  8408  1DB6  0775               	addwf	Lcd_Write_String@a,w
  8409  1DB7  00F7               	movwf	??_Lcd_Write_String
  8410  1DB8  087A               	movf	Lcd_Write_String@i+1,w
  8411  1DB9  1803               	skipnc
  8412  1DBA  0A7A               	incf	Lcd_Write_String@i+1,w
  8413  1DBB  0776               	addwf	Lcd_Write_String@a+1,w
  8414  1DBC  00F8               	movwf	??_Lcd_Write_String+1
  8415  1DBD  0877               	movf	??_Lcd_Write_String,w
  8416  1DBE  0084               	movwf	4
  8417  1DBF  1783               	bsf	3,7
  8418  1DC0  1C78               	btfss	??_Lcd_Write_String+1,0
  8419  1DC1  1383               	bcf	3,7
  8420  1DC2  0800               	movf	0,w
  8421  1DC3  1903               	btfsc	3,2
  8422  1DC4  0008               	return
  8423                           
  8424                           ;lcd.h: 99: Lcd_Write_Char(a[i]);
  8425  1DC5  0879               	movf	Lcd_Write_String@i,w
  8426  1DC6  0775               	addwf	Lcd_Write_String@a,w
  8427  1DC7  00F7               	movwf	??_Lcd_Write_String
  8428  1DC8  087A               	movf	Lcd_Write_String@i+1,w
  8429  1DC9  1803               	skipnc
  8430  1DCA  0A7A               	incf	Lcd_Write_String@i+1,w
  8431  1DCB  0776               	addwf	Lcd_Write_String@a+1,w
  8432  1DCC  00F8               	movwf	??_Lcd_Write_String+1
  8433  1DCD  0877               	movf	??_Lcd_Write_String,w
  8434  1DCE  0084               	movwf	4
  8435  1DCF  1783               	bsf	3,7
  8436  1DD0  1C78               	btfss	??_Lcd_Write_String+1,0
  8437  1DD1  1383               	bcf	3,7
  8438  1DD2  0800               	movf	0,w
  8439  1DD3  160A  158A  25DF  160A  158A  	fcall	_Lcd_Write_Char
  8440  1DD8  3001               	movlw	1
  8441  1DD9  07F9               	addwf	Lcd_Write_String@i,f
  8442  1DDA  1803               	skipnc
  8443  1DDB  0AFA               	incf	Lcd_Write_String@i+1,f
  8444  1DDC  3000               	movlw	0
  8445  1DDD  07FA               	addwf	Lcd_Write_String@i+1,f
  8446  1DDE  2DB5               	goto	l2786
  8447  1DDF                     __end_of_Lcd_Write_String:	
  8448                           
  8449                           	psect	text29
  8450  1DDF                     __ptext29:	
  8451 ;; *************** function _Lcd_Write_Char *****************
  8452 ;; Defined at:
  8453 ;;		line 79 in file "lcd.h"
  8454 ;; Parameters:    Size  Location     Type
  8455 ;;  a               1    wreg     unsigned char 
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;  a               1    4[COMMON] unsigned char 
  8458 ;;  y               1    3[COMMON] unsigned char 
  8459 ;;  temp            1    2[COMMON] unsigned char 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  1    wreg      void 
  8462 ;; Registers used:
  8463 ;;		wreg, status,2, status,0, pclath, cstack
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8469 ;;      Params:         0       0       0       0       0
  8470 ;;      Locals:         3       0       0       0       0
  8471 ;;      Temps:          1       0       0       0       0
  8472 ;;      Totals:         4       0       0       0       0
  8473 ;;Total ram usage:        4 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    1
  8476 ;; This function calls:
  8477 ;;		_Lcd_Port
  8478 ;; This function is called by:
  8479 ;;		_Lcd_Write_String
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           
  8484                           ;psect for function _Lcd_Write_Char
  8485  1DDF                     _Lcd_Write_Char:	
  8486                           
  8487                           ;incstack = 0
  8488                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  8489                           ;Lcd_Write_Char@a stored from wreg
  8490  1DDF  00F4               	movwf	Lcd_Write_Char@a
  8491                           
  8492                           ;lcd.h: 81: char temp,y;
  8493                           ;lcd.h: 82: temp = a & 0x0FU;
  8494  1DE0  0874               	movf	Lcd_Write_Char@a,w
  8495  1DE1  390F               	andlw	15
  8496  1DE2  00F1               	movwf	??_Lcd_Write_Char
  8497  1DE3  0871               	movf	??_Lcd_Write_Char,w
  8498  1DE4  00F2               	movwf	Lcd_Write_Char@temp
  8499                           
  8500                           ;lcd.h: 83: y = a & 0xF0U;
  8501  1DE5  0874               	movf	Lcd_Write_Char@a,w
  8502  1DE6  39F0               	andlw	240
  8503  1DE7  00F1               	movwf	??_Lcd_Write_Char
  8504  1DE8  0871               	movf	??_Lcd_Write_Char,w
  8505  1DE9  00F3               	movwf	Lcd_Write_Char@y
  8506                           
  8507                           ;lcd.h: 84: RC4 = 1;
  8508  1DEA  1283               	bcf	3,5	;RP0=0, select bank0
  8509  1DEB  1303               	bcf	3,6	;RP1=0, select bank0
  8510  1DEC  1607               	bsf	7,4	;volatile
  8511                           
  8512                           ;lcd.h: 85: Lcd_Port((unsigned)y>>4);
  8513  1DED  0873               	movf	Lcd_Write_Char@y,w
  8514  1DEE  00F1               	movwf	??_Lcd_Write_Char
  8515  1DEF  3004               	movlw	4
  8516  1DF0                     u3515:	
  8517  1DF0  1003               	clrc
  8518  1DF1  0CF1               	rrf	??_Lcd_Write_Char,f
  8519  1DF2  3EFF               	addlw	-1
  8520  1DF3  1D03               	skipz
  8521  1DF4  2DF0               	goto	u3515
  8522  1DF5  0871               	movf	??_Lcd_Write_Char,w
  8523  1DF6  160A  158A  24E3  160A  158A  	fcall	_Lcd_Port
  8524                           
  8525                           ;lcd.h: 86: RC5 = 1;
  8526  1DFB  1283               	bcf	3,5	;RP0=0, select bank0
  8527  1DFC  1303               	bcf	3,6	;RP1=0, select bank0
  8528  1DFD  1687               	bsf	7,5	;volatile
  8529                           
  8530                           ;lcd.h: 87: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8531  1DFE  300D               	movlw	13
  8532  1DFF  00F1               	movwf	??_Lcd_Write_Char
  8533  1E00                     u4907:	
  8534  1E00  0BF1               	decfsz	??_Lcd_Write_Char,f
  8535  1E01  2E00               	goto	u4907
  8536                           
  8537                           ;lcd.h: 88: RC5 = 0;
  8538  1E02  1283               	bcf	3,5	;RP0=0, select bank0
  8539  1E03  1303               	bcf	3,6	;RP1=0, select bank0
  8540  1E04  1287               	bcf	7,5	;volatile
  8541                           
  8542                           ;lcd.h: 89: Lcd_Port(temp);
  8543  1E05  0872               	movf	Lcd_Write_Char@temp,w
  8544  1E06  160A  158A  24E3  160A  158A  	fcall	_Lcd_Port
  8545                           
  8546                           ;lcd.h: 90: RC5 = 1;
  8547  1E0B  1283               	bcf	3,5	;RP0=0, select bank0
  8548  1E0C  1303               	bcf	3,6	;RP1=0, select bank0
  8549  1E0D  1687               	bsf	7,5	;volatile
  8550                           
  8551                           ;lcd.h: 91: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8552  1E0E  300D               	movlw	13
  8553  1E0F  00F1               	movwf	??_Lcd_Write_Char
  8554  1E10                     u4917:	
  8555  1E10  0BF1               	decfsz	??_Lcd_Write_Char,f
  8556  1E11  2E10               	goto	u4917
  8557                           
  8558                           ;lcd.h: 92: RC5 = 0;
  8559  1E12  1283               	bcf	3,5	;RP0=0, select bank0
  8560  1E13  1303               	bcf	3,6	;RP1=0, select bank0
  8561  1E14  1287               	bcf	7,5	;volatile
  8562  1E15  0008               	return
  8563  1E16                     __end_of_Lcd_Write_Char:	
  8564                           
  8565                           	psect	text30
  8566  1E16                     __ptext30:	
  8567 ;; *************** function _Lcd_Set_Cursor *****************
  8568 ;; Defined at:
  8569 ;;		line 39 in file "lcd.h"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  a               1    wreg     unsigned char 
  8572 ;;  b               1    4[COMMON] unsigned char 
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;  a               1    7[COMMON] unsigned char 
  8575 ;;  temp            1   10[COMMON] unsigned char 
  8576 ;;  y               1    9[COMMON] unsigned char 
  8577 ;;  z               1    8[COMMON] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      void 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0, pclath, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8587 ;;      Params:         1       0       0       0       0
  8588 ;;      Locals:         4       0       0       0       0
  8589 ;;      Temps:          2       0       0       0       0
  8590 ;;      Totals:         7       0       0       0       0
  8591 ;;Total ram usage:        7 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    2
  8594 ;; This function calls:
  8595 ;;		_Lcd_Cmd
  8596 ;; This function is called by:
  8597 ;;		_main
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           
  8602                           ;psect for function _Lcd_Set_Cursor
  8603  1E16                     _Lcd_Set_Cursor:	
  8604                           
  8605                           ;incstack = 0
  8606                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  8607                           ;Lcd_Set_Cursor@a stored from wreg
  8608  1E16  00F7               	movwf	Lcd_Set_Cursor@a
  8609                           
  8610                           ;lcd.h: 41: char temp,z,y;
  8611                           ;lcd.h: 42: if(a == 1)
  8612  1E17  0377               	decf	Lcd_Set_Cursor@a,w
  8613  1E18  1D03               	btfss	3,2
  8614  1E19  2E3B               	goto	l2760
  8615                           
  8616                           ;lcd.h: 43: {
  8617                           ;lcd.h: 44: temp = 0x80U + b - 1U;
  8618  1E1A  0874               	movf	Lcd_Set_Cursor@b,w
  8619  1E1B  3E7F               	addlw	127
  8620  1E1C  00F5               	movwf	??_Lcd_Set_Cursor
  8621  1E1D  0875               	movf	??_Lcd_Set_Cursor,w
  8622  1E1E  00FA               	movwf	Lcd_Set_Cursor@temp
  8623                           
  8624                           ;lcd.h: 45: z = (unsigned)temp>>4;
  8625  1E1F  087A               	movf	Lcd_Set_Cursor@temp,w
  8626  1E20  00F5               	movwf	??_Lcd_Set_Cursor
  8627  1E21  3004               	movlw	4
  8628  1E22                     u4155:	
  8629  1E22  1003               	clrc
  8630  1E23  0CF5               	rrf	??_Lcd_Set_Cursor,f
  8631  1E24  3EFF               	addlw	-1
  8632  1E25  1D03               	skipz
  8633  1E26  2E22               	goto	u4155
  8634  1E27  0875               	movf	??_Lcd_Set_Cursor,w
  8635  1E28  00F6               	movwf	??_Lcd_Set_Cursor+1
  8636  1E29  0876               	movf	??_Lcd_Set_Cursor+1,w
  8637  1E2A  00F8               	movwf	Lcd_Set_Cursor@z
  8638                           
  8639                           ;lcd.h: 46: y = temp & 0x0FU;
  8640  1E2B  087A               	movf	Lcd_Set_Cursor@temp,w
  8641  1E2C  390F               	andlw	15
  8642  1E2D  00F5               	movwf	??_Lcd_Set_Cursor
  8643  1E2E  0875               	movf	??_Lcd_Set_Cursor,w
  8644  1E2F  00F9               	movwf	Lcd_Set_Cursor@y
  8645                           
  8646                           ;lcd.h: 47: Lcd_Cmd(z);
  8647  1E30  0878               	movf	Lcd_Set_Cursor@z,w
  8648  1E31  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8649                           
  8650                           ;lcd.h: 48: Lcd_Cmd(y);
  8651  1E36  0879               	movf	Lcd_Set_Cursor@y,w
  8652  1E37  160A  158A  24FD   	fcall	_Lcd_Cmd
  8653                           
  8654                           ;lcd.h: 49: }
  8655  1E3A  0008               	return
  8656  1E3B                     l2760:	
  8657                           
  8658                           ;lcd.h: 50: else if(a == 2)
  8659  1E3B  3002               	movlw	2
  8660  1E3C  0677               	xorwf	Lcd_Set_Cursor@a,w
  8661  1E3D  1D03               	btfss	3,2
  8662  1E3E  0008               	return
  8663                           
  8664                           ;lcd.h: 51: {
  8665                           ;lcd.h: 52: temp = 0xC0U + b - 1U;
  8666  1E3F  0874               	movf	Lcd_Set_Cursor@b,w
  8667  1E40  3EBF               	addlw	191
  8668  1E41  00F5               	movwf	??_Lcd_Set_Cursor
  8669  1E42  0875               	movf	??_Lcd_Set_Cursor,w
  8670  1E43  00FA               	movwf	Lcd_Set_Cursor@temp
  8671                           
  8672                           ;lcd.h: 53: z = (unsigned)temp>>4;
  8673  1E44  087A               	movf	Lcd_Set_Cursor@temp,w
  8674  1E45  00F5               	movwf	??_Lcd_Set_Cursor
  8675  1E46  3004               	movlw	4
  8676  1E47                     u4175:	
  8677  1E47  1003               	clrc
  8678  1E48  0CF5               	rrf	??_Lcd_Set_Cursor,f
  8679  1E49  3EFF               	addlw	-1
  8680  1E4A  1D03               	skipz
  8681  1E4B  2E47               	goto	u4175
  8682  1E4C  0875               	movf	??_Lcd_Set_Cursor,w
  8683  1E4D  00F6               	movwf	??_Lcd_Set_Cursor+1
  8684  1E4E  0876               	movf	??_Lcd_Set_Cursor+1,w
  8685  1E4F  00F8               	movwf	Lcd_Set_Cursor@z
  8686                           
  8687                           ;lcd.h: 54: y = temp & 0x0FU;
  8688  1E50  087A               	movf	Lcd_Set_Cursor@temp,w
  8689  1E51  390F               	andlw	15
  8690  1E52  00F5               	movwf	??_Lcd_Set_Cursor
  8691  1E53  0875               	movf	??_Lcd_Set_Cursor,w
  8692  1E54  00F9               	movwf	Lcd_Set_Cursor@y
  8693                           
  8694                           ;lcd.h: 55: Lcd_Cmd(z);
  8695  1E55  0878               	movf	Lcd_Set_Cursor@z,w
  8696  1E56  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8697                           
  8698                           ;lcd.h: 56: Lcd_Cmd(y);
  8699  1E5B  0879               	movf	Lcd_Set_Cursor@y,w
  8700  1E5C  160A  158A  24FD   	fcall	_Lcd_Cmd
  8701  1E5F  0008               	return
  8702  1E60                     __end_of_Lcd_Set_Cursor:	
  8703                           
  8704                           	psect	text31
  8705  1F4A                     __ptext31:	
  8706 ;; *************** function _Lcd_Init *****************
  8707 ;; Defined at:
  8708 ;;		line 60 in file "lcd.h"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8722 ;;      Params:         0       0       0       0       0
  8723 ;;      Locals:         0       0       0       0       0
  8724 ;;      Temps:          2       0       0       0       0
  8725 ;;      Totals:         2       0       0       0       0
  8726 ;;Total ram usage:        2 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    2
  8729 ;; This function calls:
  8730 ;;		_Lcd_Cmd
  8731 ;;		_Lcd_Port
  8732 ;; This function is called by:
  8733 ;;		_main
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           
  8738                           ;psect for function _Lcd_Init
  8739  1F4A                     _Lcd_Init:	
  8740                           
  8741                           ;lcd.h: 62: Lcd_Port(0x00);
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  8745  1F4A  3000               	movlw	0
  8746  1F4B  160A  158A  24E3  160A  158A  	fcall	_Lcd_Port
  8747                           
  8748                           ;lcd.h: 63: _delay((unsigned long)((20)*(4000000/4000.0)));
  8749  1F50  301A               	movlw	26
  8750  1F51  00F5               	movwf	??_Lcd_Init+1
  8751  1F52  30F8               	movlw	248
  8752  1F53  00F4               	movwf	??_Lcd_Init
  8753  1F54                     u4927:	
  8754  1F54  0BF4               	decfsz	??_Lcd_Init,f
  8755  1F55  2F54               	goto	u4927
  8756  1F56  0BF5               	decfsz	??_Lcd_Init+1,f
  8757  1F57  2F54               	goto	u4927
  8758  1F58  0000               	nop
  8759                           
  8760                           ;lcd.h: 64: Lcd_Cmd(0x03);
  8761  1F59  3003               	movlw	3
  8762  1F5A  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8763                           
  8764                           ;lcd.h: 65: _delay((unsigned long)((5)*(4000000/4000.0)));
  8765  1F5F  3007               	movlw	7
  8766  1F60  00F5               	movwf	??_Lcd_Init+1
  8767  1F61  307D               	movlw	125
  8768  1F62  00F4               	movwf	??_Lcd_Init
  8769  1F63                     u4937:	
  8770  1F63  0BF4               	decfsz	??_Lcd_Init,f
  8771  1F64  2F63               	goto	u4937
  8772  1F65  0BF5               	decfsz	??_Lcd_Init+1,f
  8773  1F66  2F63               	goto	u4937
  8774                           
  8775                           ;lcd.h: 66: Lcd_Cmd(0x03);
  8776  1F67  3003               	movlw	3
  8777  1F68  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8778                           
  8779                           ;lcd.h: 67: _delay((unsigned long)((11)*(4000000/4000.0)));
  8780  1F6D  300F               	movlw	15
  8781  1F6E  00F5               	movwf	??_Lcd_Init+1
  8782  1F6F  3047               	movlw	71
  8783  1F70  00F4               	movwf	??_Lcd_Init
  8784  1F71                     u4947:	
  8785  1F71  0BF4               	decfsz	??_Lcd_Init,f
  8786  1F72  2F71               	goto	u4947
  8787  1F73  0BF5               	decfsz	??_Lcd_Init+1,f
  8788  1F74  2F71               	goto	u4947
  8789  1F75  2F76               	nop2
  8790                           
  8791                           ;lcd.h: 68: Lcd_Cmd(0x03);
  8792  1F76  3003               	movlw	3
  8793  1F77  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8794                           
  8795                           ;lcd.h: 70: Lcd_Cmd(0x02);
  8796  1F7C  3002               	movlw	2
  8797  1F7D  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8798                           
  8799                           ;lcd.h: 71: Lcd_Cmd(0x02);
  8800  1F82  3002               	movlw	2
  8801  1F83  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8802                           
  8803                           ;lcd.h: 72: Lcd_Cmd(0x08);
  8804  1F88  3008               	movlw	8
  8805  1F89  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8806                           
  8807                           ;lcd.h: 73: Lcd_Cmd(0x00);
  8808  1F8E  3000               	movlw	0
  8809  1F8F  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8810                           
  8811                           ;lcd.h: 74: Lcd_Cmd(0x0C);
  8812  1F94  300C               	movlw	12
  8813  1F95  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8814                           
  8815                           ;lcd.h: 75: Lcd_Cmd(0x00);
  8816  1F9A  3000               	movlw	0
  8817  1F9B  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8818                           
  8819                           ;lcd.h: 76: Lcd_Cmd(0x06);
  8820  1FA0  3006               	movlw	6
  8821  1FA1  160A  158A  24FD   	fcall	_Lcd_Cmd
  8822  1FA4  0008               	return
  8823  1FA5                     __end_of_Lcd_Init:	
  8824                           
  8825                           	psect	text32
  8826  1C94                     __ptext32:	
  8827 ;; *************** function _Lcd_Clear *****************
  8828 ;; Defined at:
  8829 ;;		line 32 in file "lcd.h"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;		None
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;		None
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      void 
  8836 ;; Registers used:
  8837 ;;		wreg, status,2, status,0, pclath, cstack
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8843 ;;      Params:         0       0       0       0       0
  8844 ;;      Locals:         0       0       0       0       0
  8845 ;;      Temps:          0       0       0       0       0
  8846 ;;      Totals:         0       0       0       0       0
  8847 ;;Total ram usage:        0 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    2
  8850 ;; This function calls:
  8851 ;;		_Lcd_Cmd
  8852 ;; This function is called by:
  8853 ;;		_main
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _Lcd_Clear
  8859  1C94                     _Lcd_Clear:	
  8860                           
  8861                           ;lcd.h: 34: Lcd_Cmd(0);
  8862                           
  8863                           ;incstack = 0
  8864                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  8865  1C94  3000               	movlw	0
  8866  1C95  160A  158A  24FD  160A  158A  	fcall	_Lcd_Cmd
  8867                           
  8868                           ;lcd.h: 35: Lcd_Cmd(1);
  8869  1C9A  3001               	movlw	1
  8870  1C9B  160A  158A  24FD   	fcall	_Lcd_Cmd
  8871  1C9E  0008               	return
  8872  1C9F                     __end_of_Lcd_Clear:	
  8873                           ;lcd.h: 36: return;
  8874                           
  8875                           
  8876                           	psect	text33
  8877  1CFD                     __ptext33:	
  8878 ;; *************** function _Lcd_Cmd *****************
  8879 ;; Defined at:
  8880 ;;		line 23 in file "lcd.h"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;  a               1    wreg     unsigned char 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  a               1    3[COMMON] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      void 
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8894 ;;      Params:         0       0       0       0       0
  8895 ;;      Locals:         1       0       0       0       0
  8896 ;;      Temps:          2       0       0       0       0
  8897 ;;      Totals:         3       0       0       0       0
  8898 ;;Total ram usage:        3 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    1
  8901 ;; This function calls:
  8902 ;;		_Lcd_Port
  8903 ;; This function is called by:
  8904 ;;		_Lcd_Clear
  8905 ;;		_Lcd_Set_Cursor
  8906 ;;		_Lcd_Init
  8907 ;;		_Lcd_Shift_Right
  8908 ;;		_Lcd_Shift_Left
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           
  8913                           ;psect for function _Lcd_Cmd
  8914  1CFD                     _Lcd_Cmd:	
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  8918                           ;Lcd_Cmd@a stored from wreg
  8919  1CFD  00F3               	movwf	Lcd_Cmd@a
  8920                           
  8921                           ;lcd.h: 25: RC4 = 0;
  8922  1CFE  1283               	bcf	3,5	;RP0=0, select bank0
  8923  1CFF  1303               	bcf	3,6	;RP1=0, select bank0
  8924  1D00  1207               	bcf	7,4	;volatile
  8925                           
  8926                           ;lcd.h: 26: Lcd_Port(a);
  8927  1D01  0873               	movf	Lcd_Cmd@a,w
  8928  1D02  160A  158A  24E3  160A  158A  	fcall	_Lcd_Port
  8929                           
  8930                           ;lcd.h: 27: RC5 = 1;
  8931  1D07  1283               	bcf	3,5	;RP0=0, select bank0
  8932  1D08  1303               	bcf	3,6	;RP1=0, select bank0
  8933  1D09  1687               	bsf	7,5	;volatile
  8934                           
  8935                           ;lcd.h: 28: _delay((unsigned long)((4)*(4000000/4000.0)));
  8936  1D0A  3006               	movlw	6
  8937  1D0B  00F2               	movwf	??_Lcd_Cmd+1
  8938  1D0C  3030               	movlw	48
  8939  1D0D  00F1               	movwf	??_Lcd_Cmd
  8940  1D0E                     u4957:	
  8941  1D0E  0BF1               	decfsz	??_Lcd_Cmd,f
  8942  1D0F  2D0E               	goto	u4957
  8943  1D10  0BF2               	decfsz	??_Lcd_Cmd+1,f
  8944  1D11  2D0E               	goto	u4957
  8945  1D12  0000               	nop
  8946                           
  8947                           ;lcd.h: 29: RC5 = 0;
  8948  1D13  1283               	bcf	3,5	;RP0=0, select bank0
  8949  1D14  1303               	bcf	3,6	;RP1=0, select bank0
  8950  1D15  1287               	bcf	7,5	;volatile
  8951  1D16  0008               	return
  8952  1D17                     __end_of_Lcd_Cmd:	
  8953                           
  8954                           	psect	text34
  8955  1CE3                     __ptext34:	
  8956 ;; *************** function _Lcd_Port *****************
  8957 ;; Defined at:
  8958 ;;		line 1 in file "lcd.h"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;  a               1    wreg     unsigned char 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  a               1    0[COMMON] unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      void 
  8965 ;; Registers used:
  8966 ;;		wreg
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8972 ;;      Params:         0       0       0       0       0
  8973 ;;      Locals:         1       0       0       0       0
  8974 ;;      Temps:          0       0       0       0       0
  8975 ;;      Totals:         1       0       0       0       0
  8976 ;;Total ram usage:        1 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; This function calls:
  8979 ;;		Nothing
  8980 ;; This function is called by:
  8981 ;;		_Lcd_Cmd
  8982 ;;		_Lcd_Init
  8983 ;;		_Lcd_Write_Char
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _Lcd_Port
  8989  1CE3                     _Lcd_Port:	
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _Lcd_Port: [wreg]
  8993                           ;Lcd_Port@a stored from wreg
  8994  1CE3  00F0               	movwf	Lcd_Port@a
  8995                           
  8996                           ;lcd.h: 3: if(a & 1)
  8997  1CE4  1C70               	btfss	Lcd_Port@a,0
  8998  1CE5  2CEA               	goto	l75
  8999                           
  9000                           ;lcd.h: 4: RC6 = 1;
  9001  1CE6  1283               	bcf	3,5	;RP0=0, select bank0
  9002  1CE7  1303               	bcf	3,6	;RP1=0, select bank0
  9003  1CE8  1707               	bsf	7,6	;volatile
  9004  1CE9  2CED               	goto	l76
  9005  1CEA                     l75:	
  9006                           
  9007                           ;lcd.h: 5: else
  9008                           ;lcd.h: 6: RC6 = 0;
  9009  1CEA  1283               	bcf	3,5	;RP0=0, select bank0
  9010  1CEB  1303               	bcf	3,6	;RP1=0, select bank0
  9011  1CEC  1307               	bcf	7,6	;volatile
  9012  1CED                     l76:	
  9013                           
  9014                           ;lcd.h: 8: if(a & 2)
  9015  1CED  1CF0               	btfss	Lcd_Port@a,1
  9016  1CEE  2CF1               	goto	l77
  9017                           
  9018                           ;lcd.h: 9: RC7 = 1;
  9019  1CEF  1787               	bsf	7,7	;volatile
  9020  1CF0  2CF2               	goto	l78
  9021  1CF1                     l77:	
  9022                           
  9023                           ;lcd.h: 10: else
  9024                           ;lcd.h: 11: RC7 = 0;
  9025  1CF1  1387               	bcf	7,7	;volatile
  9026  1CF2                     l78:	
  9027                           
  9028                           ;lcd.h: 13: if(a & 4)
  9029  1CF2  1D70               	btfss	Lcd_Port@a,2
  9030  1CF3  2CF6               	goto	l79
  9031                           
  9032                           ;lcd.h: 14: RB6 = 1;
  9033  1CF4  1706               	bsf	6,6	;volatile
  9034  1CF5  2CF7               	goto	l80
  9035  1CF6                     l79:	
  9036                           
  9037                           ;lcd.h: 15: else
  9038                           ;lcd.h: 16: RB6 = 0;
  9039  1CF6  1306               	bcf	6,6	;volatile
  9040  1CF7                     l80:	
  9041                           
  9042                           ;lcd.h: 18: if(a & 8)
  9043  1CF7  1DF0               	btfss	Lcd_Port@a,3
  9044  1CF8  2CFB               	goto	l81
  9045                           
  9046                           ;lcd.h: 19: RB7 = 1;
  9047  1CF9  1786               	bsf	6,7	;volatile
  9048  1CFA  0008               	return
  9049  1CFB                     l81:	
  9050                           
  9051                           ;lcd.h: 20: else
  9052                           ;lcd.h: 21: RB7 = 0;
  9053  1CFB  1386               	bcf	6,7	;volatile
  9054  1CFC  0008               	return
  9055  1CFD                     __end_of_Lcd_Port:	
  9056                           
  9057                           	psect	text35
  9058  1D5F                     __ptext35:	
  9059 ;; *************** function _ADC_Read *****************
  9060 ;; Defined at:
  9061 ;;		line 151 in file "main.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;  channel         1    wreg     unsigned char 
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;  channel         1    4[COMMON] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  2    0[COMMON] unsigned int 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2, status,0
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9075 ;;      Params:         2       0       0       0       0
  9076 ;;      Locals:         1       0       0       0       0
  9077 ;;      Temps:          2       0       0       0       0
  9078 ;;      Totals:         5       0       0       0       0
  9079 ;;Total ram usage:        5 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; This function calls:
  9082 ;;		Nothing
  9083 ;; This function is called by:
  9084 ;;		_main
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           
  9089                           ;psect for function _ADC_Read
  9090  1D5F                     _ADC_Read:	
  9091                           
  9092                           ;incstack = 0
  9093                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  9094                           ;ADC_Read@channel stored from wreg
  9095  1D5F  00F4               	movwf	ADC_Read@channel
  9096                           
  9097                           ;main.c: 152: ADCON0 &= 0x11000101;
  9098  1D60  3001               	movlw	1
  9099  1D61  00F2               	movwf	??_ADC_Read
  9100  1D62  0872               	movf	??_ADC_Read,w
  9101  1D63  1283               	bcf	3,5	;RP0=0, select bank0
  9102  1D64  1303               	bcf	3,6	;RP1=0, select bank0
  9103  1D65  059F               	andwf	31,f	;volatile
  9104                           
  9105                           ;main.c: 153: ADCON0 |= (unsigned)channel<<3;
  9106  1D66  0874               	movf	ADC_Read@channel,w
  9107  1D67  00F2               	movwf	??_ADC_Read
  9108  1D68  3002               	movlw	2
  9109  1D69                     u4855:	
  9110  1D69  1003               	clrc
  9111  1D6A  0DF2               	rlf	??_ADC_Read,f
  9112  1D6B  3EFF               	addlw	-1
  9113  1D6C  1D03               	skipz
  9114  1D6D  2D69               	goto	u4855
  9115  1D6E  1003               	clrc
  9116  1D6F  0D72               	rlf	??_ADC_Read,w
  9117  1D70  00F3               	movwf	??_ADC_Read+1
  9118  1D71  0873               	movf	??_ADC_Read+1,w
  9119  1D72  049F               	iorwf	31,f	;volatile
  9120                           
  9121                           ;main.c: 154: _delay((unsigned long)((2)*(4000000/4000.0)));
  9122  1D73  3003               	movlw	3
  9123  1D74  00F3               	movwf	??_ADC_Read+1
  9124  1D75  3097               	movlw	151
  9125  1D76  00F2               	movwf	??_ADC_Read
  9126  1D77                     u4967:	
  9127  1D77  0BF2               	decfsz	??_ADC_Read,f
  9128  1D78  2D77               	goto	u4967
  9129  1D79  0BF3               	decfsz	??_ADC_Read+1,f
  9130  1D7A  2D77               	goto	u4967
  9131  1D7B  2D7C               	nop2
  9132                           
  9133                           ;main.c: 155: GO_nDONE = 1;
  9134  1D7C  1283               	bcf	3,5	;RP0=0, select bank0
  9135  1D7D  1303               	bcf	3,6	;RP1=0, select bank0
  9136  1D7E  149F               	bsf	31,1	;volatile
  9137  1D7F                     l144:	
  9138                           ;main.c: 156: while(GO_nDONE);
  9139                           
  9140  1D7F  189F               	btfsc	31,1	;volatile
  9141  1D80  2D7F               	goto	l144
  9142                           
  9143                           ;main.c: 157: return (uint16_t)((ADRESH<<8)+ADRESL);
  9144  1D81  081E               	movf	30,w	;volatile
  9145  1D82  00F1               	movwf	?_ADC_Read+1
  9146  1D83  1683               	bsf	3,5	;RP0=1, select bank1
  9147  1D84  1303               	bcf	3,6	;RP1=0, select bank1
  9148  1D85  081E               	movf	30,w	;volatile
  9149  1D86  00F0               	movwf	?_ADC_Read
  9150  1D87  0008               	return
  9151  1D88                     __end_of_ADC_Read:	
  9152                           
  9153                           	psect	text36
  9154  1CAD                     __ptext36:	
  9155 ;; *************** function _ADC_Initialize *****************
  9156 ;; Defined at:
  9157 ;;		line 142 in file "main.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  1    wreg      void 
  9164 ;; Registers used:
  9165 ;;		wreg
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9171 ;;      Params:         0       0       0       0       0
  9172 ;;      Locals:         0       0       0       0       0
  9173 ;;      Temps:          0       0       0       0       0
  9174 ;;      Totals:         0       0       0       0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; This function calls:
  9178 ;;		Nothing
  9179 ;; This function is called by:
  9180 ;;		_main
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _ADC_Initialize
  9186  1CAD                     _ADC_Initialize:	
  9187                           
  9188                           ;main.c: 144: ADCON0 = 0b01000001;
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _ADC_Initialize: [wreg]
  9192  1CAD  3041               	movlw	65
  9193  1CAE  1283               	bcf	3,5	;RP0=0, select bank0
  9194  1CAF  1303               	bcf	3,6	;RP1=0, select bank0
  9195  1CB0  009F               	movwf	31	;volatile
  9196                           
  9197                           ;main.c: 145: ADCON1 = 0b11000000;
  9198  1CB1  30C0               	movlw	192
  9199  1CB2  1683               	bsf	3,5	;RP0=1, select bank1
  9200  1CB3  1303               	bcf	3,6	;RP1=0, select bank1
  9201  1CB4  009F               	movwf	31	;volatile
  9202                           
  9203                           ;main.c: 146: ANSELbits.ANS0 = 1;
  9204  1CB5  1683               	bsf	3,5	;RP0=1, select bank3
  9205  1CB6  1703               	bsf	3,6	;RP1=1, select bank3
  9206  1CB7  1408               	bsf	8,0	;volatile
  9207                           
  9208                           ;main.c: 147: TRISAbits.TRISA0 = 1;
  9209  1CB8  1683               	bsf	3,5	;RP0=1, select bank1
  9210  1CB9  1303               	bcf	3,6	;RP1=0, select bank1
  9211  1CBA  1405               	bsf	5,0	;volatile
  9212  1CBB  0008               	return
  9213  1CBC                     __end_of_ADC_Initialize:	
  9214                           ;main.c: 148: return;
  9215                           
  9216  007E                     btemp	set	126	;btemp
  9217  007E                     wtemp0	set	126
  9218                           
  9219                           	psect	text1_split_1
  9220  0868                     l3076:	
  9221                           
  9222                           ;doprnt.c: 1341: else if(prec < c)
  9223  0868  1683               	bsf	3,5	;RP0=1, select bank1
  9224  0869  1303               	bcf	3,6	;RP1=0, select bank1
  9225  086A  083D               	movf	sprintf@c^(0+128),w
  9226  086B  00A0               	movwf	??_sprintf^(0+128)
  9227  086C  01A1               	clrf	(??_sprintf^(0+128)+1)
  9228  086D  1BA0               	btfsc	??_sprintf^(0+128),7
  9229  086E  03A1               	decf	(??_sprintf^(0+128)+1),f
  9230  086F  083C               	movf	(sprintf@prec+1)^(0+128),w
  9231  0870  3A80               	xorlw	128
  9232  0871  00A2               	movwf	(??_sprintf+2)^(0+128)
  9233  0872  0821               	movf	(??_sprintf+1)^(0+128),w
  9234  0873  3A80               	xorlw	128
  9235  0874  0222               	subwf	(??_sprintf+2)^(0+128),w
  9236  0875  1D03               	skipz
  9237  0876  2879               	goto	u4695
  9238  0877  0820               	movf	??_sprintf^(0+128),w
  9239  0878  023B               	subwf	sprintf@prec^(0+128),w
  9240  0879                     u4695:	
  9241  0879  1803               	skipnc
  9242  087A  2882               	goto	l267
  9243                           
  9244                           ;doprnt.c: 1342: prec = c;
  9245  087B  1683               	bsf	3,5	;RP0=1, select bank1
  9246  087C  1303               	bcf	3,6	;RP1=0, select bank1
  9247  087D  083D               	movf	sprintf@c^(0+128),w
  9248  087E  00BB               	movwf	sprintf@prec^(0+128)
  9249  087F  01BC               	clrf	(sprintf@prec+1)^(0+128)
  9250  0880  1BBB               	btfsc	sprintf@prec^(0+128),7
  9251  0881  03BC               	decf	(sprintf@prec+1)^(0+128),f
  9252  0882                     l267:	
  9253                           
  9254                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9255  0882  1683               	bsf	3,5	;RP0=1, select bank1
  9256  0883  1303               	bcf	3,6	;RP1=0, select bank1
  9257  0884  0836               	movf	sprintf@width^(0+128),w
  9258  0885  0437               	iorwf	(sprintf@width+1)^(0+128),w
  9259  0886  1903               	btfsc	3,2
  9260  0887  2898               	goto	l3084
  9261  0888  3003               	movlw	3
  9262  0889  0534               	andwf	sprintf@flag^(0+128),w
  9263  088A  00A0               	movwf	??_sprintf^(0+128)
  9264  088B  3000               	movlw	0
  9265  088C  0535               	andwf	(sprintf@flag+1)^(0+128),w
  9266  088D  00A1               	movwf	(??_sprintf+1)^(0+128)
  9267  088E  0820               	movf	??_sprintf^(0+128),w
  9268  088F  0421               	iorwf	(??_sprintf^(0+128)+1),w
  9269  0890  1903               	btfsc	3,2
  9270  0891  2898               	goto	l3084
  9271                           
  9272                           ;doprnt.c: 1346: width--;
  9273  0892  30FF               	movlw	255
  9274  0893  07B6               	addwf	sprintf@width^(0+128),f
  9275  0894  1803               	skipnc
  9276  0895  0AB7               	incf	(sprintf@width+1)^(0+128),f
  9277  0896  30FF               	movlw	255
  9278  0897  07B7               	addwf	(sprintf@width+1)^(0+128),f
  9279  0898                     l3084:	
  9280                           
  9281                           ;doprnt.c: 1348: if(flag & 0x4000) {
  9282  0898  1F35               	btfss	(sprintf@flag+1)^(0+128),6
  9283  0899  28B3               	goto	l3092
  9284                           
  9285                           ;doprnt.c: 1349: if(width > prec)
  9286  089A  083C               	movf	(sprintf@prec+1)^(0+128),w
  9287  089B  3A80               	xorlw	128
  9288  089C  00A0               	movwf	??_sprintf^(0+128)
  9289  089D  0837               	movf	(sprintf@width+1)^(0+128),w
  9290  089E  3A80               	xorlw	128
  9291  089F  0220               	subwf	??_sprintf^(0+128),w
  9292  08A0  1D03               	skipz
  9293  08A1  28A4               	goto	u4735
  9294  08A2  0836               	movf	sprintf@width^(0+128),w
  9295  08A3  023B               	subwf	sprintf@prec^(0+128),w
  9296  08A4                     u4735:	
  9297  08A4  1803               	skipnc
  9298  08A5  28AF               	goto	l3090
  9299                           
  9300                           ;doprnt.c: 1350: width -= prec;
  9301  08A6  1683               	bsf	3,5	;RP0=1, select bank1
  9302  08A7  1303               	bcf	3,6	;RP1=0, select bank1
  9303  08A8  083B               	movf	sprintf@prec^(0+128),w
  9304  08A9  02B6               	subwf	sprintf@width^(0+128),f
  9305  08AA  083C               	movf	(sprintf@prec+1)^(0+128),w
  9306  08AB  1C03               	skipc
  9307  08AC  03B7               	decf	(sprintf@width+1)^(0+128),f
  9308  08AD  02B7               	subwf	(sprintf@width+1)^(0+128),f
  9309  08AE  28B3               	goto	l3092
  9310  08AF                     l3090:	
  9311                           
  9312                           ;doprnt.c: 1351: else
  9313                           ;doprnt.c: 1352: width = 0;
  9314  08AF  1683               	bsf	3,5	;RP0=1, select bank1
  9315  08B0  1303               	bcf	3,6	;RP1=0, select bank1
  9316  08B1  01B6               	clrf	sprintf@width^(0+128)
  9317  08B2  01B7               	clrf	(sprintf@width+1)^(0+128)
  9318  08B3                     l3092:	
  9319                           
  9320                           ;doprnt.c: 1353: }
  9321                           ;doprnt.c: 1381: if(width > c)
  9322  08B3  083D               	movf	sprintf@c^(0+128),w
  9323  08B4  00A0               	movwf	??_sprintf^(0+128)
  9324  08B5  01A1               	clrf	(??_sprintf^(0+128)+1)
  9325  08B6  1BA0               	btfsc	??_sprintf^(0+128),7
  9326  08B7  03A1               	decf	(??_sprintf^(0+128)+1),f
  9327  08B8  0821               	movf	(??_sprintf+1)^(0+128),w
  9328  08B9  3A80               	xorlw	128
  9329  08BA  00A2               	movwf	(??_sprintf+2)^(0+128)
  9330  08BB  0837               	movf	(sprintf@width+1)^(0+128),w
  9331  08BC  3A80               	xorlw	128
  9332  08BD  0222               	subwf	(??_sprintf+2)^(0+128),w
  9333  08BE  1D03               	skipz
  9334  08BF  28C2               	goto	u4745
  9335  08C0  0836               	movf	sprintf@width^(0+128),w
  9336  08C1  0220               	subwf	??_sprintf^(0+128),w
  9337  08C2                     u4745:	
  9338  08C2  1803               	skipnc
  9339  08C3  28D2               	goto	l3096
  9340                           
  9341                           ;doprnt.c: 1382: width -= c;
  9342  08C4  1683               	bsf	3,5	;RP0=1, select bank1
  9343  08C5  1303               	bcf	3,6	;RP1=0, select bank1
  9344  08C6  083D               	movf	sprintf@c^(0+128),w
  9345  08C7  00A0               	movwf	??_sprintf^(0+128)
  9346  08C8  01A1               	clrf	(??_sprintf^(0+128)+1)
  9347  08C9  1BA0               	btfsc	??_sprintf^(0+128),7
  9348  08CA  03A1               	decf	(??_sprintf^(0+128)+1),f
  9349  08CB  0820               	movf	??_sprintf^(0+128),w
  9350  08CC  02B6               	subwf	sprintf@width^(0+128),f
  9351  08CD  0821               	movf	(??_sprintf+1)^(0+128),w
  9352  08CE  1C03               	skipc
  9353  08CF  03B7               	decf	(sprintf@width+1)^(0+128),f
  9354  08D0  02B7               	subwf	(sprintf@width+1)^(0+128),f
  9355  08D1  28D6               	goto	l3098
  9356  08D2                     l3096:	
  9357                           
  9358                           ;doprnt.c: 1383: else
  9359                           ;doprnt.c: 1384: width = 0;
  9360  08D2  1683               	bsf	3,5	;RP0=1, select bank1
  9361  08D3  1303               	bcf	3,6	;RP1=0, select bank1
  9362  08D4  01B6               	clrf	sprintf@width^(0+128)
  9363  08D5  01B7               	clrf	(sprintf@width+1)^(0+128)
  9364  08D6                     l3098:	
  9365                           
  9366                           ;doprnt.c: 1387: if(flag & 0x04) {
  9367  08D6  1D34               	btfss	sprintf@flag^(0+128),2
  9368  08D7  291B               	goto	l3114
  9369                           
  9370                           ;doprnt.c: 1392: if(flag & 0x03)
  9371  08D8  3003               	movlw	3
  9372  08D9  0534               	andwf	sprintf@flag^(0+128),w
  9373  08DA  00A0               	movwf	??_sprintf^(0+128)
  9374  08DB  3000               	movlw	0
  9375  08DC  0535               	andwf	(sprintf@flag+1)^(0+128),w
  9376  08DD  00A1               	movwf	(??_sprintf+1)^(0+128)
  9377  08DE  0820               	movf	??_sprintf^(0+128),w
  9378  08DF  0421               	iorwf	(??_sprintf^(0+128)+1),w
  9379  08E0  1903               	btfsc	3,2
  9380  08E1  28F7               	goto	l3106
  9381                           
  9382                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9383  08E2  302D               	movlw	45
  9384  08E3  00A0               	movwf	??_sprintf^(0+128)
  9385  08E4  1283               	bcf	3,5	;RP0=0, select bank0
  9386  08E5  1303               	bcf	3,6	;RP1=0, select bank0
  9387  08E6  0863               	movf	sprintf@sp,w
  9388  08E7  0084               	movwf	4
  9389  08E8  1783               	bsf	3,7
  9390  08E9  1C64               	btfss	sprintf@sp+1,0
  9391  08EA  1383               	bcf	3,7
  9392  08EB  1683               	bsf	3,5	;RP0=1, select bank1
  9393  08EC  1303               	bcf	3,6	;RP1=0, select bank1
  9394  08ED  0820               	movf	??_sprintf^(0+128),w
  9395  08EE  0080               	movwf	0
  9396  08EF  3001               	movlw	1
  9397  08F0  1283               	bcf	3,5	;RP0=0, select bank0
  9398  08F1  1303               	bcf	3,6	;RP1=0, select bank0
  9399  08F2  07E3               	addwf	sprintf@sp,f
  9400  08F3  1803               	skipnc
  9401  08F4  0AE4               	incf	sprintf@sp+1,f
  9402  08F5  3000               	movlw	0
  9403  08F6  07E4               	addwf	sprintf@sp+1,f
  9404  08F7                     l3106:	
  9405                           
  9406                           ;doprnt.c: 1415: if(width)
  9407  08F7  1683               	bsf	3,5	;RP0=1, select bank1
  9408  08F8  1303               	bcf	3,6	;RP1=0, select bank1
  9409  08F9                     L6:	
  9410  08F9  0836               	movf	sprintf@width^(0+128),w
  9411  08FA  0437               	iorwf	(sprintf@width+1)^(0+128),w
  9412  08FB  1903               	btfsc	3,2
  9413  08FC  295F               	goto	l3134
  9414                           
  9415                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9416                           
  9417                           ;doprnt.c: 1416: do
  9418  08FD  3030               	movlw	48
  9419  08FE  00A0               	movwf	??_sprintf^(0+128)
  9420  08FF  1283               	bcf	3,5	;RP0=0, select bank0
  9421  0900  1303               	bcf	3,6	;RP1=0, select bank0
  9422  0901  0863               	movf	sprintf@sp,w
  9423  0902  0084               	movwf	4
  9424  0903  1783               	bsf	3,7
  9425  0904  1C64               	btfss	sprintf@sp+1,0
  9426  0905  1383               	bcf	3,7
  9427  0906  1683               	bsf	3,5	;RP0=1, select bank1
  9428  0907  1303               	bcf	3,6	;RP1=0, select bank1
  9429  0908  0820               	movf	??_sprintf^(0+128),w
  9430  0909  0080               	movwf	0
  9431  090A  3001               	movlw	1
  9432  090B  1283               	bcf	3,5	;RP0=0, select bank0
  9433  090C  1303               	bcf	3,6	;RP1=0, select bank0
  9434  090D  07E3               	addwf	sprintf@sp,f
  9435  090E  1803               	skipnc
  9436  090F  0AE4               	incf	sprintf@sp+1,f
  9437  0910  3000               	movlw	0
  9438  0911  07E4               	addwf	sprintf@sp+1,f
  9439                           
  9440                           ;doprnt.c: 1418: while(--width);
  9441  0912  30FF               	movlw	255
  9442  0913  1683               	bsf	3,5	;RP0=1, select bank1
  9443  0914  1303               	bcf	3,6	;RP1=0, select bank1
  9444  0915  07B6               	addwf	sprintf@width^(0+128),f
  9445  0916  1803               	skipnc
  9446  0917  0AB7               	incf	(sprintf@width+1)^(0+128),f
  9447  0918  30FF               	movlw	255
  9448  0919  07B7               	addwf	(sprintf@width+1)^(0+128),f
  9449  091A  28F9               	goto	L6
  9450  091B                     l3114:	
  9451                           ;doprnt.c: 1420: } else
  9452                           
  9453                           
  9454                           ;doprnt.c: 1422: {
  9455                           ;doprnt.c: 1424: if(width
  9456                           ;doprnt.c: 1428: )
  9457  091B  0836               	movf	sprintf@width^(0+128),w
  9458  091C  0437               	iorwf	(sprintf@width+1)^(0+128),w
  9459  091D  1903               	btfsc	3,2
  9460  091E  2940               	goto	l3122
  9461  091F                     l3116:	
  9462                           ;doprnt.c: 1429: do
  9463                           
  9464                           
  9465                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9466  091F  3020               	movlw	32
  9467  0920  00A0               	movwf	??_sprintf^(0+128)
  9468  0921  1283               	bcf	3,5	;RP0=0, select bank0
  9469  0922  1303               	bcf	3,6	;RP1=0, select bank0
  9470  0923  0863               	movf	sprintf@sp,w
  9471  0924  0084               	movwf	4
  9472  0925  1783               	bsf	3,7
  9473  0926  1C64               	btfss	sprintf@sp+1,0
  9474  0927  1383               	bcf	3,7
  9475  0928  1683               	bsf	3,5	;RP0=1, select bank1
  9476  0929  1303               	bcf	3,6	;RP1=0, select bank1
  9477  092A  0820               	movf	??_sprintf^(0+128),w
  9478  092B  0080               	movwf	0
  9479  092C  3001               	movlw	1
  9480  092D  1283               	bcf	3,5	;RP0=0, select bank0
  9481  092E  1303               	bcf	3,6	;RP1=0, select bank0
  9482  092F  07E3               	addwf	sprintf@sp,f
  9483  0930  1803               	skipnc
  9484  0931  0AE4               	incf	sprintf@sp+1,f
  9485  0932  3000               	movlw	0
  9486  0933  07E4               	addwf	sprintf@sp+1,f
  9487                           
  9488                           ;doprnt.c: 1431: while(--width);
  9489  0934  30FF               	movlw	255
  9490  0935  1683               	bsf	3,5	;RP0=1, select bank1
  9491  0936  1303               	bcf	3,6	;RP1=0, select bank1
  9492  0937  07B6               	addwf	sprintf@width^(0+128),f
  9493  0938  1803               	skipnc
  9494  0939  0AB7               	incf	(sprintf@width+1)^(0+128),f
  9495  093A  30FF               	movlw	255
  9496  093B  07B7               	addwf	(sprintf@width+1)^(0+128),f
  9497  093C  0836               	movf	sprintf@width^(0+128),w
  9498  093D  0437               	iorwf	(sprintf@width+1)^(0+128),w
  9499  093E  1D03               	btfss	3,2
  9500  093F  291F               	goto	l3116
  9501  0940                     l3122:	
  9502                           
  9503                           ;doprnt.c: 1438: if(flag & 0x03)
  9504  0940  3003               	movlw	3
  9505  0941  0534               	andwf	sprintf@flag^(0+128),w
  9506  0942  00A0               	movwf	??_sprintf^(0+128)
  9507  0943  3000               	movlw	0
  9508  0944  0535               	andwf	(sprintf@flag+1)^(0+128),w
  9509  0945  00A1               	movwf	(??_sprintf+1)^(0+128)
  9510  0946  0820               	movf	??_sprintf^(0+128),w
  9511  0947  0421               	iorwf	(??_sprintf^(0+128)+1),w
  9512  0948  1903               	btfsc	3,2
  9513  0949  295F               	goto	l3134
  9514                           
  9515                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9516  094A  302D               	movlw	45
  9517  094B                     L8:	
  9518  094B  00A0               	movwf	??_sprintf^(0+128)
  9519  094C  1283               	bcf	3,5	;RP0=0, select bank0
  9520  094D  1303               	bcf	3,6	;RP1=0, select bank0
  9521  094E  0863               	movf	sprintf@sp,w
  9522  094F  0084               	movwf	4
  9523  0950  1783               	bsf	3,7
  9524  0951  1C64               	btfss	sprintf@sp+1,0
  9525  0952  1383               	bcf	3,7
  9526  0953  1683               	bsf	3,5	;RP0=1, select bank1
  9527  0954  1303               	bcf	3,6	;RP1=0, select bank1
  9528  0955  0820               	movf	??_sprintf^(0+128),w
  9529  0956  0080               	movwf	0
  9530  0957  3001               	movlw	1
  9531  0958  1283               	bcf	3,5	;RP0=0, select bank0
  9532  0959  1303               	bcf	3,6	;RP1=0, select bank0
  9533  095A  07E3               	addwf	sprintf@sp,f
  9534  095B  1803               	skipnc
  9535  095C  0AE4               	incf	sprintf@sp+1,f
  9536  095D  3000               	movlw	0
  9537  095E  07E4               	addwf	sprintf@sp+1,f
  9538  095F                     l3134:	
  9539  095F  30FF               	movlw	255
  9540  0960  1683               	bsf	3,5	;RP0=1, select bank1
  9541  0961  1303               	bcf	3,6	;RP1=0, select bank1
  9542  0962  07BB               	addwf	sprintf@prec^(0+128),f
  9543  0963  1803               	skipnc
  9544  0964  0ABC               	incf	(sprintf@prec+1)^(0+128),f
  9545  0965  30FF               	movlw	255
  9546  0966  07BC               	addwf	(sprintf@prec+1)^(0+128),f
  9547  0967  0A3B               	incf	sprintf@prec^(0+128),w
  9548  0968  1903               	btfsc	3,2
  9549  0969  0A3C               	incf	(sprintf@prec+1)^(0+128),w
  9550  096A  1903               	btfsc	3,2
  9551  096B  29CB               	goto	L12
  9552                           
  9553                           ;doprnt.c: 1478: {
  9554                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9555                           
  9556                           ;doprnt.c: 1469: }
  9557                           ;doprnt.c: 1474: while(prec--) {
  9558  096C  3000               	movlw	0
  9559  096D  1283               	bcf	3,5	;RP0=0, select bank0
  9560  096E  00A3               	movwf	___llmod@divisor+3
  9561  096F  3000               	movlw	0
  9562  0970  00A2               	movwf	___llmod@divisor+2
  9563  0971  3000               	movlw	0
  9564  0972  00A1               	movwf	___llmod@divisor+1
  9565  0973  300A               	movlw	10
  9566  0974  00A0               	movwf	___llmod@divisor
  9567  0975  1683               	bsf	3,5	;RP0=1, select bank1
  9568  0976  1303               	bcf	3,6	;RP1=0, select bank1
  9569  0977  083B               	movf	sprintf@prec^(0+128),w
  9570  0978  00A0               	movwf	??_sprintf^(0+128)
  9571  0979  3001               	movlw	1
  9572  097A                     u4825:	
  9573  097A  1003               	clrc
  9574  097B  0DA0               	rlf	??_sprintf^(0+128),f
  9575  097C  3EFF               	addlw	-1
  9576  097D  1D03               	skipz
  9577  097E  297A               	goto	u4825
  9578  097F  1003               	clrc
  9579  0980  0D20               	rlf	??_sprintf^(0+128),w
  9580  0981  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  9581  0982  0084               	movwf	4
  9582  0983  160A  118A  2000  120A  158A  	fcall	stringdir
  9583  0988  00F0               	movwf	___lldiv@divisor
  9584  0989  160A  118A  2000  120A  158A  	fcall	stringdir
  9585  098E  00F1               	movwf	___lldiv@divisor+1
  9586  098F  160A  118A  2000  120A  158A  	fcall	stringdir
  9587  0994  00F2               	movwf	___lldiv@divisor+2
  9588  0995  160A  118A  2000  120A  158A  	fcall	stringdir
  9589  099A  00F3               	movwf	___lldiv@divisor+3
  9590  099B  0831               	movf	(sprintf@val+3)^(0+128),w
  9591  099C  00F7               	movwf	___lldiv@dividend+3
  9592  099D  0830               	movf	(sprintf@val+2)^(0+128),w
  9593  099E  00F6               	movwf	___lldiv@dividend+2
  9594  099F  082F               	movf	(sprintf@val+1)^(0+128),w
  9595  09A0  00F5               	movwf	___lldiv@dividend+1
  9596  09A1  082E               	movf	sprintf@val^(0+128),w
  9597  09A2  00F4               	movwf	___lldiv@dividend
  9598  09A3  120A  158A  200A  120A  158A  	fcall	___lldiv
  9599  09A8  0873               	movf	?___lldiv+3,w
  9600  09A9  1283               	bcf	3,5	;RP0=0, select bank0
  9601  09AA  1303               	bcf	3,6	;RP1=0, select bank0
  9602  09AB  00A7               	movwf	___llmod@dividend+3
  9603  09AC  0872               	movf	?___lldiv+2,w
  9604  09AD  00A6               	movwf	___llmod@dividend+2
  9605  09AE  0871               	movf	?___lldiv+1,w
  9606  09AF  00A5               	movwf	___llmod@dividend+1
  9607  09B0  0870               	movf	?___lldiv,w
  9608  09B1  00A4               	movwf	___llmod@dividend
  9609  09B2  160A  158A  26AB  120A  158A  	fcall	___llmod
  9610  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  9611  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  9612  09B9  0820               	movf	?___llmod,w
  9613  09BA  3E30               	addlw	48
  9614  09BB  1683               	bsf	3,5	;RP0=1, select bank1
  9615  09BC  1303               	bcf	3,6	;RP1=0, select bank1
  9616  09BD  00A1               	movwf	(??_sprintf+1)^(0+128)
  9617  09BE  0821               	movf	(??_sprintf+1)^(0+128),w
  9618  09BF  00BD               	movwf	sprintf@c^(0+128)
  9619                           
  9620                           ;doprnt.c: 1523: }
  9621                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9622  09C0  083D               	movf	sprintf@c^(0+128),w
  9623  09C1  294B               	goto	L8
  9624  09C2                     l3138:	
  9625                           ;doprnt.c: 1525: }
  9626                           ;doprnt.c: 1533: }
  9627                           ;doprnt.c: 1535: alldone:
  9628                           
  9629                           
  9630                           ;doprnt.c: 1538: *sp = 0;
  9631  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  9632  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  9633  09C4  0863               	movf	sprintf@sp,w
  9634  09C5  0084               	movwf	4
  9635  09C6  1783               	bsf	3,7
  9636  09C7  1C64               	btfss	sprintf@sp+1,0
  9637  09C8  1383               	bcf	3,7
  9638  09C9  0180               	clrf	0
  9639  09CA  0008               	return
  9640  09CB                     L12:	
  9641  09CB                     __end_of_sprintf:	
  9642                           ;doprnt.c: 1540: return 0;
  9643                           ;	Return value of _sprintf is never used
  9644                           
  9645  09CB  120A  118A  282C   	ljmp	l3136


Data Sizes:
    Strings     39
    Constant    118
    Data        6
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     74      80
    BANK3            96      0       4
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_4(CODE[3]), STR_3(CODE[6]), STR_2(CODE[18]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@duty_str(BANK1[5]), main@line2(BANK1[16]), main@line1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@duty_str(BANK1[5]), main@line2(BANK1[16]), main@line1(BANK1[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___bmul
    _fround->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _set_PWM_duty_cycle->___altoft
    ___lwtoft->___ftpack
    ___fttol->___altoft
    ___ftmul->___altoft
    ___ftmul->___bmul
    ___ftdiv->___lwtoft
    ___altoft->___aldiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___bmul->___awdiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _PWM_Initialize->_set_PWM_duty_cycle
    _set_PWM_duty_cycle->___fttol
    ___fttol->_scale
    ___ftmul->___ftdiv
    ___altoft->___aldiv

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                49    49      0   75749
                                             75 BANK0      5     5      0
                                             30 BANK1     44    44      0
                     _ADC_Initialize
                           _ADC_Read
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                     _PWM_Initialize
                            ___aldiv
                            ___ftdiv
                           ___lwtoft
                  _set_H_bridge_pins
                 _set_PWM_duty_cycle
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             43    35      8   40455
                                             67 BANK0      8     0      8
                                              0 BANK1     30    30      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3    8425
                                             32 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              16    13      3    8227
                                             32 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     560
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1844
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2281
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     671
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     546
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3439
                                             61 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3244
                                             48 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     648
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _set_H_bridge_pins                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Initialize                                      10     4      6   14183
                                             61 BANK0     10     4      6
                            ___aldiv
                 _set_PWM_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _set_PWM_duty_cycle                                   6     4      2   13327
                                             55 BANK0      6     4      2
                            ___aldiv
                           ___altoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2362
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     508
                                             41 BANK0     14    10      4
                            ___aldiv (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4394
                                             16 BANK0     16    10      6
                            ___aldiv (ARG)
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2812
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    2350
                                              9 COMMON     4     4      0
                                              6 BANK0      4     0      4
                            ___aldiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2148
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     684
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     524
                                              5 COMMON     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     636
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_Read
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _PWM_Initialize
     ___aldiv
     _set_PWM_duty_cycle
       ___aldiv
       ___altoft
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lwtoft
         ___ftpack
   ___aldiv
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _set_H_bridge_pins
   _set_PWM_duty_cycle
     ___aldiv
     ___altoft
       ___aldiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___lwtoft
       ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___ftge
     ___ftmul
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       4       9        4.2%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     4A      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B2      12        0.0%
ABS                  0      0      B2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Oct 09 20:48:58 2021

                  ___altoft@exp 007B               _set_H_bridge_pins 1D38                               pc 0002  
                ___bmul@product 0025         __size_of_PWM_Initialize 0051                     __CFG_CP$OFF 0000  
                 ___altoft@sign 007C                              l80 1CF7                              l81 1CFB  
                            l75 1CEA                              l76 1CED                              l77 1CF1  
                            l78 1CF2                              l79 1CF6                    ___awdiv@sign 0021  
                            fsr 0004             ___wmul@multiplicand 0072              ?_set_H_bridge_pins 0070  
                  ___ftadd@exp1 005C                    ___ftadd@exp2 005B                     __CFG_LVP$ON 0000  
                  ___ftadd@sign 005A                             l150 1D4E                             l207 0125  
                           l144 1D7F                             l192 0060                             l531 17AB  
                           l267 0882                             l428 1254                             l373 000F  
                           l551 117E                             l608 1461                             l618 14E6  
                           l539 17F4                             l558 1193                             l582 166D  
                           l559 119B                             l659 1228                             _RA1 0029  
                           _RA2 002A                             _RB6 0036                             _RC4 003C  
                           _RB7 0037                             _RC5 003D                             _RC6 003E  
                           _RC7 003F                             _PR2 0092                    __CFG_CPD$OFF 0000  
                           fsr0 0004                             indf 0000                    ___awmod@sign 0076  
           ??_set_H_bridge_pins 0070                     _sprintf$851 00A6                    ___ftdiv@cntr 002A  
                   main@dir_str 00E7                    ___ftdiv@sign 002F                            l2110 12BA  
                          l2030 1157                            l2040 1183                            l2032 1163  
                          l2200 1E85                            l3000 04D5                            l2114 12C8  
                          l2106 12AD                            l2042 118D                            l2034 1168  
                          l2026 1150                            l2130 10D1                            l3002 055D  
                          l2212 1EA6                            l2204 1E93                            l2222 15EE  
                          l2142 1FB1                            l2070 1CC6                            l3022 05C1  
                          l3014 0598                            l2128 10BF                            l2320 1409  
                          l2312 13EA                            l2232 1604                            l2160 1FD2  
                          l2208 1E9E                            l3008 057C                            l2410 121D  
                          l2402 1200                            l2250 1633                            l2226 15F5  
                          l2170 1FF3                            l2066 1CC0                            l3122 0940  
                          l3106 08F7                            l3114 091B                            l3042 0736  
                          l3202 0C79                            l2340 1520                            l2412 122B  
                          l2404 1210                            l2252 163F                            l2244 161E  
                          l2148 1FBC                            l3116 091F                            l3060 0771  
                          l3036 0719                            l3044 073B                            l2334 150A  
                          l2262 165D                            l2254 1644                            l2174 1FFB  
                          l2166 1FE8                            l2158 1FC4                            l2190 1E71  
                          l3134 095F                            l3054 0761                            l3230 0D59  
                          l2096 1275                            l2088 1265                            l2352 155F  
                          l2416 1239                            l2272 1691                            l2264 1669  
                          l2256 1648                            l2504 0E97                            l3072 07B3  
                          l3136 002C                            l2098 1285                            l2282 16B4  
                          l2602 170E                            l2186 1E6A                            l2522 0FE1  
                          l3090 08AF                            l3066 0777                            l3138 09C2  
                          l3218 0D08                            l2292 138F                            l2364 1587  
                          l2356 156F                            l2268 167F                            l2700 082A  
                          l2612 1755                            l2516 0F73                            l2508 0EB6  
                          l3092 08B3                            l3084 0898                            l3076 0868  
                          l2630 17DC                            l2198 1E77                            l2534 1CAB  
                          l2368 1597                            l2384 11CE                            l2712 085F  
                          l2544 1449                            l3096 08D2                            l2298 13A5  
                          l2722 1EB5                            l2482 0B36                            l2474 0AAC  
                          l3098 08D6                            l2660 1112                            l2708 0852  
                          l2724 1EC5                            l2732 1EF0                            l2740 1D8C  
                          l2644 0007                            l2636 17E9                            l2628 17CC  
                          l2900 01F0                            l2742 1D9E                            l2638 17F7  
                          l2566 14A2                            l2558 1482                            l2760 1E3B  
                          l2664 1139                            l2728 1EE3                            l2584 14DB  
                          l2576 14BE                            l2912 027A                            l2832 0069  
                          l2586 14E9                            l2578 14CE                            l2498 0E29  
                          l2834 0075                            l2826 0059                            l2596 16EF  
                          l2924 02FE                            l2916 02C0                            l2908 025D  
                          l2860 011F                            l2942 03C6                            l2838 0087  
                          l2846 00C7                            l2688 1D20                            l2928 0315  
                          l2786 1DB5                            l2698 081A                            l2962 043A  
                          l2954 0408                            l2938 0357                            l2874 0153  
                          l2866 0127                            l2858 00E0                            l2948 03CC  
                          l2884 018E                            l2868 0143                            l2958 042A  
                          l2976 045B                            l2984 04A7                            l2978 0488  
                          STR_1 108E                            STR_2 107C                            STR_3 1088  
                          STR_4 10A0                            u3105 1649                            u3045 161F  
                          u4005 081E                            u3215 13B7                            u3135 165E  
                          u3225 13C9                            u3305 153E                            u4025 082C  
                          u4105 1EE4                            u2515 1186                            u3235 13EB  
                          u3075 1634                            u4035 0841                            u3245 13FC  
                          u4205 1F0D                            u4045 0853                            u4125 1D91  
                          u3255 140A                            u3335 1570                            u2705 12AE  
                          u3345 1578                            u3425 11D5                            u4155 1E22  
                          u3515 1DF0                            u2555 11A2                            u2475 115C  
                          u4075 1EB9                            u4315 01A6                            u4175 1E47  
                          u2495 1177                            u3295 152C                            u3455 1201  
                          u3535 131F                            u4095 1ED3                            u2815 1FD3  
                          u2665 1279                            u2745 10C4                            u3385 1598  
                          u2825 1FDF                            u4505 04B2                            u4425 03CF  
                          u3395 15A0                            u4195 1F04                            u3715 14BF  
                          u2835 1FE9                            u2915 1E8B                            u4435 03FE  
                          u4355 0285                            u2685 1287                            u3485 121F  
                          u2925 1E94                            u4525 04E3                            u4365 02CB  
                          u2695 129C                            u3655 1484                            u3905 0017  
                          u3745 14DD                            u3665 1495                            u4545 0585  
                          u3931 1105                            u3835 17CD                            u3675 14A3  
                          u2795 1FC7                            u4555 0592                            u4395 02FC  
                          u3932 1106                            u3933 110B                            u3934 110C  
                          u3951 112C                            u2895 1E7A                            u4735 08A4  
                          u4655 077A                            u4575 0631                            u4495 0466  
                          u3952 112D                            u3953 1132                            u3865 17EB  
                          u3785 1757                            u4825 097A                            u4745 08C2  
                          u4665 07A9                            u4585 06C3                            u3954 1133  
                          u4907 1E00                            u3795 1786                            u4917 1E10  
                          u4685 07C2                            u4855 1D69                            u4927 1F54  
                          u3895 0010                            u4695 0879                            u4937 1F63  
                          u4947 1F71                            u4875 0C8B                            u4957 1D0E  
                          u4967 1D77                            u4897 0D5F                    __CFG_WRT$OFF 0000  
             ?_Lcd_Write_String 0075                            _main 0B68                    ___ftpack@arg 0070  
                  ___ftpack@exp 0073                            btemp 007E                __end_of_ADC_Read 1D88  
                          start 0000              ??_Lcd_Write_String 0077                   __CFG_IESO$OFF 0000  
               __end_of_Lcd_Cmd 1D17       __end_of_set_H_bridge_pins 1D5F               ___bmul@multiplier 0026  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 003E                    ___ftmul@sign 003F  
                  ___fttol@exp1 0056                    ___fttol@lval 0052                 __end_of___aldiv 12D1  
                         ?_main 0070                 __end_of___awdiv 2000                 __end_of___ftadd 16CE  
                 __CFG_WDTE$OFF 0000                 __end_of___awmod 1EAB                 __end_of___ftdiv 142F  
               __end_of___ftneg 080A                           _ANSEL 0188                 __end_of___lldiv 0868  
               __end_of___ftmul 15C5                 ___awdiv@divisor 0077                 __end_of___llmod 1EF9  
               __end_of___ftsub 1D38                 __end_of___fttol 1242                 ___awdiv@counter 0020  
       __size_of_Lcd_Set_Cursor 004A                           _TRISB 0086                           _TRISC 0087  
                  ___lltoft@exp 007D                  __CFG_FCMEN$OFF 0000                    main@duty_str 00E0  
               __end_of_dpowers 102E                           _scale 0D65                 __end_of_isdigit 1CAD  
                 ___ftpack@sign 0074                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 09CB  
                 main@adc_value 00E5                __end_of_Lcd_Init 1FA5                __end_of_Lcd_Port 1CFD  
               __initialization 07D2                    __end_of_main 0D65                          ??_main 006B  
                 ___fttol@sign1 0051              __size_of_Lcd_Clear 000B            __size_of__tdiv_to_l_ 00C3  
                        _ADCON0 001F                          _ADCON1 009F                __end_of___altoft 10EB  
              ___llmod@dividend 0024                          ?_scale 0040                          _ADRESH 001E  
                        _ADRESL 009E                          _CCPR1L 0015                ___awdiv@dividend 0079  
              __end_of___ftpack 11B4                          _ANSELH 0189                __end_of___lltoft 1DB3  
              __end_of___lwtoft 1CE3                       ??_Lcd_Cmd 0071         __size_of_Lcd_Write_Char 0037  
                        _TRISB2 0432                          _TRISC2 043A                  __CFG_PWRTE$OFF 0000  
    __size_of_set_H_bridge_pins 0027                __end_of__powers_ 1055                          ___bmul 1CBC  
                        ___ftge 10EB                       ??___aldiv 0078                          ___wmul 0005  
                     ??___awdiv 007B                       ??___ftadd 0056                       ??___awmod 0074  
                _PWM_Initialize 1EF9                       ??___ftdiv 0026                       ??___ftneg 0073  
                     ??___lldiv 0078                       ??___ftmul 0036                       ??___llmod 0028  
                     ??___ftsub 007E                       ??___fttol 004D                 ADC_Read@channel 0074  
                        _fround 09CE                ___awdiv@quotient 0022                 ___awmod@divisor 0070  
               ___awmod@counter 0075           ___ftmul@f3_as_product 003B                       ??_isdigit 0070  
                     ?_ADC_Read 0070          PWM_Initialize@PWM_freq 005D                       ??_sprintf 00A0  
               Lcd_Set_Cursor@a 0077                 Lcd_Set_Cursor@b 0074                 Lcd_Set_Cursor@y 0079  
               Lcd_Set_Cursor@z 0078         __end_of__initialization 07FC                      ___altoft@c 0026  
                    ___ftadd@f1 0050                      ___ftadd@f2 0053                      ___ftge@ff1 0070  
                    ___ftge@ff2 0073               __end_of_Lcd_Clear 1C9F                      ___ftdiv@f1 0023  
                    ___ftdiv@f2 0020                      ___ftdiv@f3 002B                      ___ftneg@f1 0070  
           ___bmul@multiplicand 0024                      ___ftmul@f1 0030                      ___ftmul@f2 0033  
        __end_of_PWM_Initialize 1F4A                      ___ftsub@f1 0060                      ___ftsub@f2 005D  
                    ___fttol@f1 0049                  __pcstackCOMMON 0070                    __pidataBANK1 0003  
                  __pidataBANK3 10A5                      ___lltoft@c 0078                   __end_of_scale 1000  
                    ___lwtoft@c 0078  PWM_Initialize@init_pulse_width 0061                  _Lcd_Set_Cursor 1E16  
                    __div_to_l_ 16CE                      ??_ADC_Read 0072                       ?_Lcd_Init 0070  
                     ?_Lcd_Port 0070      __end_of_set_PWM_duty_cycle 1377                 __div_to_l_@exp1 0025  
               __div_to_l_@cntr 0024                         ??_scale 0043                 __div_to_l_@quot 0020  
                  sprintf@width 00B6                      __pbssBANK1 00EA                   __div_to_l_@f1 0070  
                 __div_to_l_@f2 0073                 ?_PWM_Initialize 005D                      __pmaintext 0B68  
                       ?___bmul 0024                         ?___ftge 0070                         ?___wmul 0070  
                     ?___altoft 0026                         ?_fround 0040       __size_of_Lcd_Write_String 002C  
                     ?___ftpack 0070          __end_of_Lcd_Set_Cursor 1E60                       ?___lltoft 0078  
       __size_of_ADC_Initialize 000F                       ?___lwtoft 0078                      ??_Lcd_Init 0074  
                    ??_Lcd_Port 0070                      __stringtab 1000                  _Lcd_Write_Char 1DDF  
                       _Lcd_Cmd 1CFD               __end_of__npowers_ 107C                         ___aldiv 1242  
               __size_of___bmul 0013                 __size_of___ftge 005D          set_PWM_duty_cycle@duty 0057  
                       ___awdiv 1FA5                         ___ftadd 15C5                         ___awmod 1E60  
                       ___ftdiv 1377                         ___ftneg 0802                         ___lldiv 080A  
               __size_of___wmul 0021                         ___ftmul 14F2                         ___llmod 1EAB  
                       ___ftsub 1D17                         ___fttol 11B4                      _fround$848 004C  
                    _fround$849 0049                      ??___altoft 0079                      ??___ftpack 0075  
                     _ANSELbits 0188                 __size_of_fround 019A                 ?_Lcd_Set_Cursor 0074  
                    ??___lltoft 007C                         __ptext1 0026                         __ptext2 0D65  
                       __ptext3 1C9F                         __ptext4 09CE                         __ptext5 1CBC  
                       __ptext6 1E60                         __ptext7 1FA5                         __ptext8 142F  
                       __ptext9 16CE                      ??___lwtoft 007B                     ?__div_to_l_ 0070  
                       _dpowers 1006                       _T2CONbits 0012                         _isdigit 1C9F  
              ___awmod@dividend 0072                ___aldiv@dividend 0074                         _sprintf 0026  
        __end_of_Lcd_Write_Char 1E16            end_of_initialization 07FC                 ___lldiv@divisor 0070  
               ___lldiv@counter 007D                ___aldiv@quotient 0022                         psplit$0 D0031  
                     Lcd_Port@a 0070                  __tdiv_to_l_@f1 0070                  __tdiv_to_l_@f2 0073  
                 ??__tdiv_to_l_ 0076                       _PORTBbits 0006                       _PORTCbits 0007  
                     _TRISAbits 0085                       _TRISBbits 0086                       _TRISCbits 0087  
             __size_of_ADC_Read 0029                 ?_Lcd_Write_Char 0070               Lcd_Write_String@a 0075  
             Lcd_Write_String@i 0079                     _CCP1CONbits 0017                     ___ftdiv@exp 002E  
           __size_of__div_to_l_ 0132                     ___ftmul@exp 003A                       _Lcd_Clear 1C94  
                __end_of___bmul 1CCF                  __end_of___ftge 1148                  __end_of___wmul 0026  
              _Lcd_Write_String 1DB3               pnum$text1_split_1 0031                  _ADC_Initialize 1CAD  
                __end_of_fround 0B68             start_initialization 07D2             __end_of__tdiv_to_l_ 14F2  
             __size_of_Lcd_Init 005B               __size_of_Lcd_Port 001A                ??_PWM_Initialize 0063  
               ___llmod@divisor 0020                 ___llmod@counter 0029        __CFG_FOSC$INTRC_NOCLKOUT 0000  
            _set_PWM_duty_cycle 12D1                      ?_Lcd_Clear 0070                        ??___bmul 007C  
                      ??___ftge 0076                        ??___wmul 0074          __end_of_ADC_Initialize 1CBC  
                   __pdataBANK1 00EE                     __pdataBANK3 0190                 Lcd_Write_Char@a 0074  
               Lcd_Write_Char@y 0073             ?_set_PWM_duty_cycle 0057                        ??_fround 0043  
                 sprintf@tmpval 00AA               __size_of___altoft 0042                      fround@prec 004F  
             __size_of___ftpack 006C               __size_of___lltoft 002B                       ___latbits 0002  
             __size_of___lwtoft 0014                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
          ??_set_PWM_duty_cycle 0059                        ?_Lcd_Cmd 0070                     sprintf@flag 00B4  
                   sprintf@fval 00B8                     sprintf@prec 00BB                ??_Lcd_Set_Cursor 0075  
                      ?___aldiv 0070                        ?___awdiv 0077                        ?___ftadd 0050  
                      ?___awmod 0070                        ?___ftdiv 0020                        ?___ftneg 0070  
                      ?___lldiv 0070                        ?___ftmul 0030                        ?___llmod 0020  
                      ?___ftsub 005D                       __npowers_ 1055                        ?___fttol 0049  
               ?_ADC_Initialize 0070                _init_pulse_width 00EE                       __pstrings 1000  
                   __tdiv_to_l_ 142F                    ??__div_to_l_ 0076                        ?_isdigit 0070  
                      _ADC_Read 1D5F                       _scale$850 0045                        ?_sprintf 0063  
                __size_of_scale 029B                 ___aldiv@divisor 0070                 ___aldiv@counter 0020  
                ___wmul@product 0074                        Lcd_Cmd@a 0073              __end_of__div_to_l_ 1800  
                      _GO_nDONE 00F9                     ??_Lcd_Clear 0074                     __stringbase 1005  
             ___wmul@multiplier 0070                        _PWM_freq 0190                       main@line1 00BE  
                     main@line2 00CE                ??_Lcd_Write_Char 0071                        _Lcd_Init 1F4A  
                      _Lcd_Port 1CE3        __end_of_Lcd_Write_String 1DDF                __size_of_Lcd_Cmd 001A  
              __size_of___aldiv 008F                __size_of___awdiv 005B                __size_of___ftadd 0109  
              __size_of___awmod 004B                __size_of___ftdiv 00B8                __size_of___ftneg 0008  
              __size_of___lldiv 005E                        ___altoft 10A9                __size_of___ftmul 00D3  
              __size_of___llmod 004E                __size_of___ftsub 0021                __size_of___fttol 008E  
                      ___ftpack 1148              __end_of__stringtab 1006                        ___lltoft 1D88  
                   _isdigit$624 0070                        ___lwtoft 1CCF                      sprintf@exp 00B2  
                    sprintf@val 00AE                __size_of_isdigit 000E                        __ptext10 0005  
                      __ptext11 1D88                        __ptext20 12D1                        __ptext12 1EAB  
                      __ptext21 1CCF                        __ptext13 080A                        __ptext30 1E16  
                      __ptext22 11B4                        __ptext14 1D17                        __ptext31 1F4A  
                      __ptext23 14F2                        __ptext15 15C5                        __ptext32 1C94  
                      __ptext24 1377                        __ptext16 0802                        __ptext33 1CFD  
                      __ptext25 10A9                        __ptext17 10EB                        __ptext34 1CE3  
                      __ptext26 1148                        __ptext18 1D38                        __ptext35 1D5F  
                      __ptext27 1242                        __ptext19 1EF9                        __ptext36 1CAD  
                      __ptext28 1DB3                        __ptext29 1DDF               __CFG_BOR4V$BOR40V 0000  
                      __powers_ 102E                __size_of_sprintf 09A5                        _duty_LCD 00EA  
                 __size_of_main 01FD                       pnum$text1 000D                        main@freq 00DE  
                      isdigit@c 0071                        scale@scl 0048              Lcd_Write_Char@temp 0072  
                     sprintf@ap 00A9                __tdiv_to_l_@exp1 0025                       sprintf@sp 0063  
              __tdiv_to_l_@cntr 0024                __tdiv_to_l_@quot 0020                ___lldiv@dividend 0074  
              ??_ADC_Initialize 0070                       stringcode 1000              Lcd_Set_Cursor@temp 007A  
                  ?__tdiv_to_l_ 0070                 main@pulse_width 00E8                        sprintf@c 00BD  
                      sprintf@f 0065                ___lldiv@quotient 0079                        stringdir 1000  
                      stringtab 1000                    ___aldiv@sign 0021     __size_of_set_PWM_duty_cycle 00A6  
             _current_direction 00ED  
